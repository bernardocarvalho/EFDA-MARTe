# 1 "SignalArchiver.cpp"
# 1 "/home/aneto/Projects/EFDA-MARTe/trunk/BaseLib2/Level6//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "SignalArchiver.cpp"
# 25 "SignalArchiver.cpp"
# 1 "SignalArchiver.h" 1
# 28 "SignalArchiver.h"
# 1 "../Level1/ConfigurationDataBase.h" 1
# 29 "../Level1/ConfigurationDataBase.h"
# 1 "../Level1/CDBVirtual.h" 1
# 39 "../Level1/CDBVirtual.h"
# 1 "../Level0/System.h" 1
# 39 "../Level0/System.h"
# 1 "../Level0/SystemMSC.h" 1
# 40 "../Level0/System.h" 2
# 1 "../Level0/SystemLinux.h" 1
# 34 "../Level0/SystemLinux.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 361 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 365 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 366 "/usr/include/sys/cdefs.h" 2 3 4
# 362 "/usr/include/features.h" 2 3 4
# 385 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4




# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 2 3 4
# 386 "/usr/include/features.h" 2 3 4
# 29 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 37 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 460 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 490 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 552 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 91 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 161 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 162 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;









extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 204 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 226 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 251 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 261 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 294 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 416 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 467 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 526 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 554 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 565 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 598 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 644 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 660 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 721 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 732 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 768 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 787 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 810 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 849 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 868 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 938 "/usr/include/stdio.h" 3 4
}
# 35 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 236 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 237 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 28 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 99 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 116 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 75 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4
# 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4
extern "C" {
# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);


}
# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw ();
# 224 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 263 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/sys/types.h" 2 3 4


}
# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4
}
# 36 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 43 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 37 "../Level0/SystemLinux.h" 2
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stdarg.h" 1 3 4
# 38 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 29 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 165 "/usr/include/string.h" 3 4
extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 646 "/usr/include/string.h" 3 4
}
# 39 "../Level0/SystemLinux.h" 2

# 1 "/usr/include/sys/syscall.h" 1 3 4
# 25 "/usr/include/sys/syscall.h" 3 4
# 1 "/usr/include/asm/unistd.h" 1 3 4



# 1 "/usr/include/asm/unistd_64.h" 1 3 4
# 16 "/usr/include/asm/unistd_64.h" 3 4


































































































































































































































































































































































































































































































































































































































































































# 5 "/usr/include/asm/unistd.h" 2 3 4
# 26 "/usr/include/sys/syscall.h" 2 3 4






# 1 "/usr/include/bits/syscall.h" 1 3 4






# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 8 "/usr/include/bits/syscall.h" 2 3 4
# 33 "/usr/include/sys/syscall.h" 2 3 4
# 41 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/socket.h" 1 3 4
# 26 "/usr/include/sys/socket.h" 3 4
extern "C" {

# 1 "/usr/include/sys/uio.h" 1 3 4
# 26 "/usr/include/sys/uio.h" 3 4
extern "C" {


# 1 "/usr/include/bits/uio.h" 1 3 4
# 44 "/usr/include/bits/uio.h" 3 4
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 30 "/usr/include/sys/uio.h" 2 3 4
# 40 "/usr/include/sys/uio.h" 3 4
extern ssize_t readv (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 51 "/usr/include/sys/uio.h" 3 4
extern ssize_t writev (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 66 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, __const struct iovec *__iovec, int __count,
         __off_t __offset) ;
# 78 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, __const struct iovec *__iovec, int __count,
   __off_t __offset) ;
# 104 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, __const struct iovec *__iovec, int __count,
    __off64_t __offset) ;
# 116 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, __const struct iovec *__iovec, int __count,
     __off64_t __offset) ;



}
# 29 "/usr/include/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 31 "/usr/include/sys/socket.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 34 "/usr/include/sys/socket.h" 2 3 4






# 1 "/usr/include/bits/socket.h" 1 3 4
# 29 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 30 "/usr/include/bits/socket.h" 2 3 4





typedef __socklen_t socklen_t;




enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 04000


};
# 171 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/bits/sockaddr.h" 1 3 4
# 29 "/usr/include/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 172 "/usr/include/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 187 "/usr/include/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    unsigned long int __ss_align;
    char __ss_padding[(128 - (2 * sizeof (unsigned long int)))];
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };



struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;
  };



struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 304 "/usr/include/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) throw ();
# 331 "/usr/include/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 377 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4



# 1 "/usr/include/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/asm/sockios.h" 2 3 4
# 5 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/asm/socket.h" 2 3 4
# 378 "/usr/include/bits/socket.h" 2 3 4
# 411 "/usr/include/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };


extern "C" {






extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       __const struct timespec *__tmo);

}
# 41 "/usr/include/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 105 "/usr/include/sys/socket.h" 3 4
extern int socket (int __domain, int __type, int __protocol) throw ();





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) throw ();


extern int bind (int __fd, __const struct sockaddr * __addr, socklen_t __len)
     throw ();


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();
# 129 "/usr/include/sys/socket.h" 3 4
extern int connect (int __fd, __const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();






extern ssize_t send (int __fd, __const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, __const void *__buf, size_t __n,
         int __flags, __const struct sockaddr * __addr,
         socklen_t __addr_len);
# 166 "/usr/include/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, __const struct msghdr *__message,
   int __flags);






extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);





extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) throw ();




extern int setsockopt (int __fd, int __level, int __optname,
         __const void *__optval, socklen_t __optlen) throw ();





extern int listen (int __fd, int __n) throw ();
# 214 "/usr/include/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, struct sockaddr *__restrict __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 232 "/usr/include/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) throw ();




extern int sockatmark (int __fd) throw ();







extern int isfdtype (int __fd, int __fdtype) throw ();
# 254 "/usr/include/sys/socket.h" 3 4
}
# 42 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/time.h" 1 3 4
# 29 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/sys/time.h" 2 3 4
# 39 "/usr/include/sys/time.h" 3 4
extern "C" {
# 57 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     throw () __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, __const char *__file,
        __const struct timeval __tvp[2]) throw ();
# 191 "/usr/include/sys/time.h" 3 4
}
# 43 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 24 "/usr/include/sys/ioctl.h" 3 4
extern "C" {


# 1 "/usr/include/bits/ioctls.h" 1 3 4
# 24 "/usr/include/bits/ioctls.h" 3 4
# 1 "/usr/include/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4



# 1 "/usr/include/linux/ioctl.h" 1 3 4



# 1 "/usr/include/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 1 "/usr/include/asm/ioctl.h" 2 3 4
# 5 "/usr/include/linux/ioctl.h" 2 3 4
# 5 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 1 "/usr/include/asm/ioctls.h" 2 3 4
# 25 "/usr/include/bits/ioctls.h" 2 3 4
# 28 "/usr/include/sys/ioctl.h" 2 3 4


# 1 "/usr/include/bits/ioctl-types.h" 1 3 4
# 25 "/usr/include/bits/ioctl-types.h" 3 4
# 1 "/usr/include/asm/ioctls.h" 1 3 4
# 26 "/usr/include/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 31 "/usr/include/sys/ioctl.h" 2 3 4






# 1 "/usr/include/sys/ttydefaults.h" 1 3 4
# 38 "/usr/include/sys/ioctl.h" 2 3 4




extern int ioctl (int __fd, unsigned long int __request, ...) throw ();

}
# 44 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/net/if.h" 1 3 4
# 34 "/usr/include/net/if.h" 3 4
struct if_nameindex
  {
    unsigned int if_index;
    char *if_name;
  };




enum
  {
    IFF_UP = 0x1,

    IFF_BROADCAST = 0x2,

    IFF_DEBUG = 0x4,

    IFF_LOOPBACK = 0x8,

    IFF_POINTOPOINT = 0x10,

    IFF_NOTRAILERS = 0x20,

    IFF_RUNNING = 0x40,

    IFF_NOARP = 0x80,

    IFF_PROMISC = 0x100,



    IFF_ALLMULTI = 0x200,


    IFF_MASTER = 0x400,

    IFF_SLAVE = 0x800,


    IFF_MULTICAST = 0x1000,


    IFF_PORTSEL = 0x2000,

    IFF_AUTOMEDIA = 0x4000,

    IFF_DYNAMIC = 0x8000

  };






struct ifaddr
  {
    struct sockaddr ifa_addr;
    union
      {
 struct sockaddr ifu_broadaddr;
 struct sockaddr ifu_dstaddr;
      } ifa_ifu;
    struct iface *ifa_ifp;
    struct ifaddr *ifa_next;
  };
# 112 "/usr/include/net/if.h" 3 4
struct ifmap
  {
    unsigned long int mem_start;
    unsigned long int mem_end;
    unsigned short int base_addr;
    unsigned char irq;
    unsigned char dma;
    unsigned char port;

  };





struct ifreq
  {


    union
      {
 char ifrn_name[16];
      } ifr_ifrn;

    union
      {
 struct sockaddr ifru_addr;
 struct sockaddr ifru_dstaddr;
 struct sockaddr ifru_broadaddr;
 struct sockaddr ifru_netmask;
 struct sockaddr ifru_hwaddr;
 short int ifru_flags;
 int ifru_ivalue;
 int ifru_mtu;
 struct ifmap ifru_map;
 char ifru_slave[16];
 char ifru_newname[16];
 __caddr_t ifru_data;
      } ifr_ifru;
  };
# 177 "/usr/include/net/if.h" 3 4
struct ifconf
  {
    int ifc_len;
    union
      {
 __caddr_t ifcu_buf;
 struct ifreq *ifcu_req;
      } ifc_ifcu;
  };





extern "C" {


extern unsigned int if_nametoindex (__const char *__ifname) throw ();
extern char *if_indextoname (unsigned int __ifindex, char *__ifname) throw ();


extern struct if_nameindex *if_nameindex (void) throw ();


extern void if_freenameindex (struct if_nameindex *__ptr) throw ();

}
# 45 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 24 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 25 "/usr/include/netinet/in.h" 2 3 4




extern "C" {


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_HOPOPTS = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MTP = 92,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };



typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };
# 198 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];

 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];

      } __in6_u;





  };

extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 225 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };


struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 356 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/bits/in.h" 1 3 4
# 99 "/usr/include/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 357 "/usr/include/netinet/in.h" 2 3 4
# 365 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) throw () __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     throw () __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     throw () __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     throw () __attribute__ ((__const__));




# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 377 "/usr/include/netinet/in.h" 2 3 4
# 440 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) throw ();


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     throw ();
# 471 "/usr/include/netinet/in.h" 3 4
struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) throw () __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    __const uint8_t *__typep, int __multx,
    int __plusy) throw () __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_next (__const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_find (__const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     throw () __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) throw ();
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) throw ();
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     throw ();
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();



extern socklen_t inet6_rth_space (int __type, int __segments) throw ();
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) throw ();
extern int inet6_rth_add (void *__bp, __const struct in6_addr *__addr) throw ();
extern int inet6_rth_reverse (__const void *__in, void *__out) throw ();
extern int inet6_rth_segments (__const void *__bp) throw ();
extern struct in6_addr *inet6_rth_getaddr (__const void *__bp, int __index)
     throw ();





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     throw ();


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    __const struct in_addr *__slist)
     throw ();



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       __const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) throw ();


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       __const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       __const struct sockaddr_storage *__slist) throw ();


}
# 46 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/netdb.h" 1 3 4
# 33 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4

extern "C" {

struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) throw ();
extern void endrpcent (void) throw ();
extern struct rpcent *getrpcbyname (__const char *__name) throw ();
extern struct rpcent *getrpcbynumber (int __number) throw ();
extern struct rpcent *getrpcent (void) throw ();


extern int getrpcbyname_r (__const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) throw ();

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) throw ();

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) throw ();


}
# 34 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 273 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     void *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 39 "/usr/include/netdb.h" 2 3 4




# 1 "/usr/include/bits/netdb.h" 1 3 4
# 27 "/usr/include/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 44 "/usr/include/netdb.h" 2 3 4
# 54 "/usr/include/netdb.h" 3 4
extern "C" {







extern int *__h_errno_location (void) throw () __attribute__ ((__const__));
# 93 "/usr/include/netdb.h" 3 4
extern void herror (__const char *__str) throw ();


extern __const char *hstrerror (int __err_num) throw ();




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (__const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (__const char *__name);
# 156 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (__const char *__name, int __af);
# 168 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (__const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (__const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (__const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 199 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (__const char *__name);
# 238 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (__const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (__const char *__name,
          __const char *__proto);






extern struct servent *getservbyport (int __port, __const char *__proto);
# 310 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (__const char *__restrict __name,
       __const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, __const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (__const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 376 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (__const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 397 "/usr/include/netdb.h" 3 4
extern int setnetgrent (__const char *__netgroup);







extern void endnetgrent (void);
# 414 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 425 "/usr/include/netdb.h" 3 4
extern int innetgr (__const char *__netgroup, __const char *__host,
      __const char *__user, __const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 453 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   __const char *__restrict __locuser,
   __const char *__restrict __remuser,
   __const char *__restrict __cmd, int *__restrict __fd2p);
# 465 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      __const char *__restrict __locuser,
      __const char *__restrict __remuser,
      __const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 481 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    __const char *__restrict __name,
    __const char *__restrict __pass,
    __const char *__restrict __cmd, int *__restrict __fd2p);
# 493 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       __const char *__restrict __name,
       __const char *__restrict __pass,
       __const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 507 "/usr/include/netdb.h" 3 4
extern int ruserok (__const char *__rhost, int __suser,
      __const char *__remuser, __const char *__locuser);
# 517 "/usr/include/netdb.h" 3 4
extern int ruserok_af (__const char *__rhost, int __suser,
         __const char *__remuser, __const char *__locuser,
         sa_family_t __af);
# 530 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       __const char *__remuser, __const char *__locuser);
# 541 "/usr/include/netdb.h" 3 4
extern int iruserok_af (__const void *__raddr, int __suser,
   __const char *__remuser, __const char *__locuser,
   sa_family_t __af);
# 553 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 562 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __unused[5];
};
# 664 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (__const char *__restrict __name,
   __const char *__restrict __service,
   __const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) throw ();


extern __const char *gai_strerror (int __ecode) throw ();





extern int getnameinfo (__const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, unsigned int __flags);
# 694 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[],
     int __ent, struct sigevent *__restrict __sig);
# 705 "/usr/include/netdb.h" 3 4
extern int gai_suspend (__const struct gaicb *__const __list[], int __ent,
   __const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) throw ();


extern int gai_cancel (struct gaicb *__gaicbp) throw ();


}
# 47 "../Level0/SystemLinux.h" 2
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/float.h" 1 3 4
# 48 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 26 "/usr/include/bits/mathdef.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/mathdef.h" 2 3 4




typedef float float_t;
typedef double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                           ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ();




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void
 sincosf
# 82 "/usr/include/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw (); extern void
 __sincosf
# 82 "/usr/include/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw ()
                                                           ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ();




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 141 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void
 sincosl
# 82 "/usr/include/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw (); extern void
 __sincosl
# 82 "/usr/include/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                           ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ();




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 142 "/usr/include/math.h" 2 3 4
# 157 "/usr/include/math.h" 3 4
extern int signgam;
# 198 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 291 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 314 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 472 "/usr/include/math.h" 3 4
}
# 49 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sched.h" 1 3 4
# 30 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 31 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 74 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


}







struct __sched_param
  {
    int __sched_priority;
  };
# 116 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 199 "/usr/include/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 44 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         __const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 50 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4
extern "C" {
# 203 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 204 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/environments.h" 2 3 4
# 208 "/usr/include/unistd.h" 2 3 4
# 227 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 228 "/usr/include/unistd.h" 2 3 4
# 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 331 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 342 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 373 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 401 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 429 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 441 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 466 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 508 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (__const char *__file, char *__const __argv[],
      char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 607 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();




extern __pid_t getpgrp (void) throw ();
# 643 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 669 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();
# 686 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw ();




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();




extern int seteuid (__uid_t __uid) throw ();






extern int setgid (__gid_t __gid) throw ();




extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();




extern int setegid (__gid_t __gid) throw ();





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 890 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 50 "/usr/include/getopt.h" 3 4
extern "C" {
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 187 "/usr/include/getopt.h" 3 4
}
# 891 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 976 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 1007 "/usr/include/unistd.h" 3 4
extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1036 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1047 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1068 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1091 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1101 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1122 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) throw ();
# 1160 "/usr/include/unistd.h" 3 4
}
# 51 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/pthread.h" 1 3 4
# 29 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 30 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 31 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 147 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 182 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 220 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     __const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ();







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (__const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, __const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 478 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 490 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 524 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 726 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        __const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 790 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (__const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (__const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 872 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 984 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1028 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1095 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1129 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1143 "/usr/include/pthread.h" 3 4
}
# 52 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/resource.h" 1 3 4
# 25 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/bits/resource.h" 1 3 4
# 33 "/usr/include/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,


  __RLIMIT_NLIMITS = 15,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 127 "/usr/include/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/bits/time.h" 1 3 4
# 176 "/usr/include/bits/resource.h" 2 3 4


struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    long int ru_maxrss;


    long int ru_ixrss;

    long int ru_idrss;

    long int ru_isrss;


    long int ru_minflt;

    long int ru_majflt;

    long int ru_nswap;


    long int ru_inblock;

    long int ru_oublock;

    long int ru_msgsnd;

    long int ru_msgrcv;

    long int ru_nsignals;



    long int ru_nvcsw;


    long int ru_nivcsw;
  };







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};
# 26 "/usr/include/sys/resource.h" 2 3 4






extern "C" {
# 43 "/usr/include/sys/resource.h" 3 4
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;





extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) throw ();
# 62 "/usr/include/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) throw ();






extern int setrlimit (__rlimit_resource_t __resource,
        __const struct rlimit *__rlimits) throw ();
# 82 "/usr/include/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   __const struct rlimit64 *__rlimits) throw ();




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) throw ();





extern int getpriority (__priority_which_t __which, id_t __who) throw ();



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     throw ();

}
# 53 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 31 "/usr/include/arpa/inet.h" 3 4
extern "C" {



extern in_addr_t inet_addr (__const char *__cp) throw ();


extern in_addr_t inet_lnaof (struct in_addr __in) throw ();



extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
     throw ();


extern in_addr_t inet_netof (struct in_addr __in) throw ();



extern in_addr_t inet_network (__const char *__cp) throw ();



extern char *inet_ntoa (struct in_addr __in) throw ();




extern int inet_pton (int __af, __const char *__restrict __cp,
        void *__restrict __buf) throw ();




extern __const char *inet_ntop (int __af, __const void *__restrict __cp,
    char *__restrict __buf, socklen_t __len)
     throw ();






extern int inet_aton (__const char *__cp, struct in_addr *__inp) throw ();



extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) throw ();




extern char *inet_net_ntop (int __af, __const void *__cp, int __bits,
       char *__buf, size_t __len) throw ();




extern int inet_net_pton (int __af, __const char *__cp,
     void *__buf, size_t __len) throw ();




extern unsigned int inet_nsap_addr (__const char *__cp,
        unsigned char *__buf, int __len) throw ();



extern char *inet_nsap_ntoa (int __len, __const unsigned char *__cp,
        char *__buf) throw ();


}
# 54 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4
extern "C" {



# 1 "/usr/include/bits/errno.h" 1 3 4
# 25 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/bits/errno.h" 2 3 4
# 47 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 55 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 69 "/usr/include/errno.h" 3 4
typedef int error_t;
# 55 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4
extern "C" {

# 1 "/usr/include/bits/sigset.h" 1 3 4
# 104 "/usr/include/bits/sigset.h" 3 4
extern int __sigismember (__const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 34 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 58 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/signum.h" 1 3 4
# 59 "/usr/include/signal.h" 2 3 4
# 79 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4
# 51 "/usr/include/bits/siginfo.h" 3 4
typedef struct siginfo
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
      } _sifields;
  } siginfo_t;
# 129 "/usr/include/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};



enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR

};


enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};


enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 80 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();







extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 113 "/usr/include/signal.h" 3 4





extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     throw ();






extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();




extern int raise (int __sig) throw ();




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, __const char *__s);




extern void psiginfo (__const siginfo_t *__pinfo, __const char *__s);
# 168 "/usr/include/signal.h" 3 4
extern int __sigpause (int __sig_or_mask, int __is_sig);
# 177 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 196 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 211 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (__const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (__const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, __const sigset_t *__left,
        __const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, __const sigset_t *__left,
       __const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 25 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 253 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, __const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (__const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, __const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));






extern int sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (__const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (__const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    __const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, __const union sigval __val)
     throw ();
# 310 "/usr/include/signal.h" 3 4
extern __const char *__const _sys_siglist[65];
extern __const char *__const sys_siglist[65];


struct sigvec
  {
    __sighandler_t sv_handler;
    int sv_mask;

    int sv_flags;

  };
# 334 "/usr/include/signal.h" 3 4
extern int sigvec (int __sig, __const struct sigvec *__vec,
     struct sigvec *__ovec) throw ();



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 26 "/usr/include/bits/sigcontext.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/sigcontext.h" 2 3 4

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 109 "/usr/include/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  unsigned long r8;
  unsigned long r9;
  unsigned long r10;
  unsigned long r11;
  unsigned long r12;
  unsigned long r13;
  unsigned long r14;
  unsigned long r15;
  unsigned long rdi;
  unsigned long rsi;
  unsigned long rbp;
  unsigned long rbx;
  unsigned long rdx;
  unsigned long rax;
  unsigned long rcx;
  unsigned long rsp;
  unsigned long rip;
  unsigned long eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  unsigned long err;
  unsigned long trapno;
  unsigned long oldmask;
  unsigned long cr2;
  struct _fpstate * fpstate;
  unsigned long __reserved1 [8];
};
# 340 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 350 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 26 "/usr/include/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 50 "/usr/include/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 357 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 23 "/usr/include/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 24 "/usr/include/sys/ucontext.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 25 "/usr/include/sys/ucontext.h" 2 3 4
# 33 "/usr/include/sys/ucontext.h" 3 4
typedef long int greg_t;





typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    unsigned long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 360 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));



extern int sigaltstack (__const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) throw ();







extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       __const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 396 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();



}
# 56 "../Level0/SystemLinux.h" 2




# 1 "/usr/include/sys/ipc.h" 1 3 4
# 29 "/usr/include/sys/ipc.h" 3 4
# 1 "/usr/include/bits/ipctypes.h" 1 3 4
# 33 "/usr/include/bits/ipctypes.h" 3 4
typedef int __ipc_pid_t;
# 30 "/usr/include/sys/ipc.h" 2 3 4
# 1 "/usr/include/bits/ipc.h" 1 3 4
# 43 "/usr/include/bits/ipc.h" 3 4
struct ipc_perm
  {
    __key_t __key;
    __uid_t uid;
    __gid_t gid;
    __uid_t cuid;
    __gid_t cgid;
    unsigned short int mode;
    unsigned short int __pad1;
    unsigned short int __seq;
    unsigned short int __pad2;
    unsigned long int __unused1;
    unsigned long int __unused2;
  };
# 31 "/usr/include/sys/ipc.h" 2 3 4
# 52 "/usr/include/sys/ipc.h" 3 4
extern "C" {


extern key_t ftok (__const char *__pathname, int __proj_id) throw ();

}
# 61 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/sem.h" 1 3 4
# 25 "/usr/include/sys/sem.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 26 "/usr/include/sys/sem.h" 2 3 4





# 1 "/usr/include/bits/sem.h" 1 3 4
# 39 "/usr/include/bits/sem.h" 3 4
struct semid_ds
{
  struct ipc_perm sem_perm;
  __time_t sem_otime;
  unsigned long int __unused1;
  __time_t sem_ctime;
  unsigned long int __unused2;
  unsigned long int sem_nsems;
  unsigned long int __unused3;
  unsigned long int __unused4;
};
# 73 "/usr/include/bits/sem.h" 3 4
struct seminfo
{
  int semmap;
  int semmni;
  int semmns;
  int semmnu;
  int semmsl;
  int semopm;
  int semume;
  int semusz;
  int semvmx;
  int semaem;
};
# 32 "/usr/include/sys/sem.h" 2 3 4
# 42 "/usr/include/sys/sem.h" 3 4
struct sembuf
{
  unsigned short int sem_num;
  short int sem_op;
  short int sem_flg;
};


extern "C" {


extern int semctl (int __semid, int __semnum, int __cmd, ...) throw ();


extern int semget (key_t __key, int __nsems, int __semflg) throw ();


extern int semop (int __semid, struct sembuf *__sops, size_t __nsops) throw ();



extern int semtimedop (int __semid, struct sembuf *__sops, size_t __nsops,
         __const struct timespec *__timeout) throw ();


}
# 62 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/stat.h" 1 3 4
# 105 "/usr/include/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/bits/stat.h" 1 3 4
# 46 "/usr/include/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/bits/stat.h" 3 4
    long int __unused[3];
# 115 "/usr/include/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 167 "/usr/include/bits/stat.h" 3 4
    long int __unused[3];



  };
# 108 "/usr/include/sys/stat.h" 2 3 4
# 211 "/usr/include/sys/stat.h" 3 4
extern int stat (__const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 230 "/usr/include/sys/stat.h" 3 4
extern int stat64 (__const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, __const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 255 "/usr/include/sys/stat.h" 3 4
extern int fstatat64 (int __fd, __const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (__const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 278 "/usr/include/sys/stat.h" 3 4
extern int lstat64 (__const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (__const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (__const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, __const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (__const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, __const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, __const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (__const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, __const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, __const char *__path,
        __const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, __const struct timespec __times[2]) throw ();
# 401 "/usr/include/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, __const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, __const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, __const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 434 "/usr/include/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, __const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, __const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, __const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, __const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, __const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));
# 536 "/usr/include/sys/stat.h" 3 4
}
# 63 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/reboot.h" 1 3 4
# 42 "/usr/include/sys/reboot.h" 3 4
extern "C" {


extern int reboot (int __howto) throw ();

}
# 64 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 30 "/usr/include/fcntl.h" 3 4
extern "C" {



# 1 "/usr/include/bits/fcntl.h" 1 3 4
# 26 "/usr/include/bits/fcntl.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/fcntl.h" 2 3 4

# 1 "/usr/include/bits/uio.h" 1 3 4
# 29 "/usr/include/bits/fcntl.h" 2 3 4
# 165 "/usr/include/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };




enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 250 "/usr/include/bits/fcntl.h" 3 4
extern "C" {




extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();



extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);



extern ssize_t vmsplice (int __fdout, const struct iovec *__iov,
    size_t __count, unsigned int __flags);


extern ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
         __off64_t *__offout, size_t __len,
         unsigned int __flags);


extern ssize_t tee (int __fdin, int __fdout, size_t __len,
      unsigned int __flags);



extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 290 "/usr/include/bits/fcntl.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);



}
# 35 "/usr/include/fcntl.h" 2 3 4






# 1 "/usr/include/bits/stat.h" 1 3 4
# 42 "/usr/include/fcntl.h" 2 3 4
# 122 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 131 "/usr/include/fcntl.h" 3 4
extern int open (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/fcntl.h" 3 4
extern int open64 (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 155 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 166 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 177 "/usr/include/fcntl.h" 3 4
extern int creat (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 187 "/usr/include/fcntl.h" 3 4
extern int creat64 (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 223 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off_t __offset, __off_t __len,
     int __advise) throw ();
# 235 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, __off64_t __offset, __off64_t __len,
       int __advise) throw ();
# 245 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off_t __offset, __off_t __len);
# 256 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, __off64_t __offset, __off64_t __len);
# 267 "/usr/include/fcntl.h" 3 4
}
# 65 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/file.h" 1 3 4
# 28 "/usr/include/sys/file.h" 3 4
extern "C" {
# 51 "/usr/include/sys/file.h" 3 4
extern int flock (int __fd, int __operation) throw ();


}
# 66 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/sys/shm.h" 1 3 4
# 25 "/usr/include/sys/shm.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 26 "/usr/include/sys/shm.h" 2 3 4





# 1 "/usr/include/bits/shm.h" 1 3 4
# 40 "/usr/include/bits/shm.h" 3 4
extern "C" {



extern int __getpagesize (void) throw () __attribute__ ((__const__));



typedef unsigned long int shmatt_t;


struct shmid_ds
  {
    struct ipc_perm shm_perm;
    size_t shm_segsz;
    __time_t shm_atime;



    __time_t shm_dtime;



    __time_t shm_ctime;



    __pid_t shm_cpid;
    __pid_t shm_lpid;
    shmatt_t shm_nattch;
    unsigned long int __unused4;
    unsigned long int __unused5;
  };
# 86 "/usr/include/bits/shm.h" 3 4
struct shminfo
  {
    unsigned long int shmmax;
    unsigned long int shmmin;
    unsigned long int shmmni;
    unsigned long int shmseg;
    unsigned long int shmall;
    unsigned long int __unused1;
    unsigned long int __unused2;
    unsigned long int __unused3;
    unsigned long int __unused4;
  };

struct shm_info
  {
    int used_ids;
    unsigned long int shm_tot;
    unsigned long int shm_rss;
    unsigned long int shm_swp;
    unsigned long int swap_attempts;
    unsigned long int swap_successes;
  };



}
# 32 "/usr/include/sys/shm.h" 2 3 4
# 45 "/usr/include/sys/shm.h" 3 4
extern "C" {





extern int shmctl (int __shmid, int __cmd, struct shmid_ds *__buf) throw ();


extern int shmget (key_t __key, size_t __size, int __shmflg) throw ();


extern void *shmat (int __shmid, __const void *__shmaddr, int __shmflg)
     throw ();


extern int shmdt (__const void *__shmaddr) throw ();

}
# 67 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/dirent.h" 1 3 4
# 28 "/usr/include/dirent.h" 3 4
extern "C" {
# 62 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/bits/dirent.h" 1 3 4
# 23 "/usr/include/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 63 "/usr/include/dirent.h" 2 3 4
# 98 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 128 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (__const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 163 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 174 "/usr/include/dirent.h" 3 4
extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 184 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 201 "/usr/include/dirent.h" 3 4
extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern void rewinddir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) throw () __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/bits/local_lim.h" 2 3 4
# 158 "/usr/include/bits/posix1_lim.h" 2 3 4
# 234 "/usr/include/dirent.h" 2 3 4
# 245 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 246 "/usr/include/dirent.h" 2 3 4






extern int scandir (__const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (__const struct dirent *),
      int (*__cmp) (__const struct dirent **,
      __const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 275 "/usr/include/dirent.h" 3 4
extern int scandir64 (__const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (__const struct dirent64 *),
        int (*__cmp) (__const struct dirent64 **,
        __const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));




extern int alphasort (__const struct dirent **__e1,
        __const struct dirent **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 300 "/usr/include/dirent.h" 3 4
extern int alphasort64 (__const struct dirent64 **__e1,
   __const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 313 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     throw () __attribute__ ((__nonnull__ (2, 4)));
# 330 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     throw () __attribute__ ((__nonnull__ (2, 4)));






extern int versionsort (__const struct dirent **__e1,
   __const struct dirent **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 356 "/usr/include/dirent.h" 3 4
extern int versionsort64 (__const struct dirent64 **__e1,
     __const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



}
# 68 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 30 "/usr/include/ctype.h" 3 4
extern "C" {
# 48 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 81 "/usr/include/ctype.h" 3 4
extern __const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const));
# 96 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 247 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 323 "/usr/include/ctype.h" 3 4
}
# 69 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/dlfcn.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 26 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/bits/dlfcn.h" 1 3 4
# 58 "/usr/include/bits/dlfcn.h" 3 4
extern "C" {


extern void _dl_mcount_wrapper_check (void *__selfpc) throw ();

}
# 29 "/usr/include/dlfcn.h" 2 3 4
# 45 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;







extern "C" {



extern void *dlopen (__const char *__file, int __mode) throw ();



extern int dlclose (void *__handle) throw () __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      __const char *__restrict __name) throw () __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, __const char *__file, int __mode) throw ();



extern void *dlvsym (void *__restrict __handle,
       __const char *__restrict __name,
       __const char *__restrict __version)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) throw ();





typedef struct
{
  __const char *dli_fname;
  void *dli_fbase;
  __const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (__const void *__address, Dl_info *__info)
     throw () __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (__const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) throw () __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     throw () __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;
  Dl_serpath dls_serpath[1];
} Dl_serinfo;



}
# 70 "../Level0/SystemLinux.h" 2
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/typeinfo" 1 3
# 34 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/typeinfo" 3
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 1 3
# 35 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/c++config.h" 1 3


# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 4 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/c++config.h" 2 3
# 1687 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/c++config.h" 3
# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/os_defines.h" 1 3
# 1688 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/c++config.h" 2 3


# 1 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/cpu_defines.h" 1 3
# 1691 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/c++config.h" 2 3
# 38 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 2 3

extern "C++" {

namespace std
{
# 59 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 115 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
  bool uncaught_exception() throw();


}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 138 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
  void __verbose_terminate_handler();

}

}

#pragma GCC visibility pop
# 35 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/typeinfo" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 77 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const
    { return __name[0] == '*' ? __name + 1 : __name; }
# 112 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/typeinfo" 3
    bool before(const type_info& __arg) const
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 133 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/typeinfo" 3
    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }



    virtual ~bad_cast() throw();


    virtual const char* what() const throw();
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }



    virtual ~bad_typeid() throw();


    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 71 "../Level0/SystemLinux.h" 2

# 1 "/usr/include/sys/timeb.h" 1 3 4
# 28 "/usr/include/sys/timeb.h" 3 4
extern "C" {



struct timeb
  {
    time_t time;
    unsigned short int millitm;
    short int timezone;
    short int dstflag;
  };



extern int ftime (struct timeb *__timebuf);

}
# 73 "../Level0/SystemLinux.h" 2
# 1 "/usr/include/termio.h" 1 3 4




# 1 "/usr/include/termios.h" 1 3 4
# 36 "/usr/include/termios.h" 3 4
extern "C" {



# 1 "/usr/include/bits/termios.h" 1 3 4
# 25 "/usr/include/bits/termios.h" 3 4
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;


struct termios
  {
    tcflag_t c_iflag;
    tcflag_t c_oflag;
    tcflag_t c_cflag;
    tcflag_t c_lflag;
    cc_t c_line;
    cc_t c_cc[32];
    speed_t c_ispeed;
    speed_t c_ospeed;


  };
# 41 "/usr/include/termios.h" 2 3 4
# 49 "/usr/include/termios.h" 3 4
extern speed_t cfgetospeed (__const struct termios *__termios_p) throw ();


extern speed_t cfgetispeed (__const struct termios *__termios_p) throw ();


extern int cfsetospeed (struct termios *__termios_p, speed_t __speed) throw ();


extern int cfsetispeed (struct termios *__termios_p, speed_t __speed) throw ();



extern int cfsetspeed (struct termios *__termios_p, speed_t __speed) throw ();




extern int tcgetattr (int __fd, struct termios *__termios_p) throw ();



extern int tcsetattr (int __fd, int __optional_actions,
        __const struct termios *__termios_p) throw ();




extern void cfmakeraw (struct termios *__termios_p) throw ();



extern int tcsendbreak (int __fd, int __duration) throw ();





extern int tcdrain (int __fd);



extern int tcflush (int __fd, int __queue_selector) throw ();



extern int tcflow (int __fd, int __action) throw ();




extern __pid_t tcgetsid (int __fd) throw ();




# 1 "/usr/include/sys/ttydefaults.h" 1 3 4
# 106 "/usr/include/termios.h" 2 3 4


}
# 6 "/usr/include/termio.h" 2 3 4
# 74 "../Level0/SystemLinux.h" 2

# 1 "../Level0/GenDefs.h" 1
# 38 "../Level0/GenDefs.h"
typedef float real;
# 82 "../Level0/GenDefs.h"
typedef unsigned long long uint64;

typedef long long int64;



typedef unsigned long intptr;
# 104 "../Level0/GenDefs.h"
typedef unsigned int uint32;

typedef signed int int32;




typedef unsigned short uint16;

typedef signed short int16;

typedef unsigned char uint8;

typedef signed char int8;
# 151 "../Level0/GenDefs.h"
enum Colours{
    Black = 0,
    Red = 1,
    Green = 2,
    Yellow = 3,
    Blue = 4,
    Purple = 5,
    Cyan = 6,
    White = 7,



    Grey = 8,
    DarkRed = 9,
    DarkGreen = 10,
    DarkYellow = 11,
    DarkBlue = 12,
    DarkPurple = 13,
    DarkCyan = 14,
    DarkGrey = 15

};
# 76 "../Level0/SystemLinux.h" 2
# 41 "../Level0/System.h" 2
# 1 "../Level0/SystemVX5100.h" 1
# 42 "../Level0/System.h" 2
# 1 "../Level0/SystemVX5500.h" 1
# 43 "../Level0/System.h" 2
# 1 "../Level0/SystemV6X5100.h" 1
# 44 "../Level0/System.h" 2
# 1 "../Level0/SystemV6X5500.h" 1
# 45 "../Level0/System.h" 2
# 1 "../Level0/SystemVX68k.h" 1
# 46 "../Level0/System.h" 2
# 1 "../Level0/SystemRTAI.h" 1
# 47 "../Level0/System.h" 2
# 1 "../Level0/SystemSolaris.h" 1
# 48 "../Level0/System.h" 2
# 1 "../Level0/SystemMacOSX.h" 1
# 49 "../Level0/System.h" 2






# 1 "../Level0/Memory.h" 1
# 32 "../Level0/Memory.h"
# 1 "../Level0/System.h" 1
# 33 "../Level0/Memory.h" 2


class StreamInterface;


enum MemoryAllocationFlags{

    MEMORYStandardMemory = 0x00000000,


    MEMORYExtraMemory = 0x00000001,
};


enum MemoryTestAccessMode{

    MTAM_Execute = 0x00000001,


    MTAM_Read = 0x00000002,


    MTAM_Write = 0x00000004

};


static inline MemoryTestAccessMode operator &(MemoryTestAccessMode a, MemoryTestAccessMode b){
    return (MemoryTestAccessMode) ((int)a & (int) b);
}


static inline MemoryTestAccessMode operator |(MemoryTestAccessMode a, MemoryTestAccessMode b){
    return (MemoryTestAccessMode) ((int)a | (int) b);
}

extern "C" {






    void *MEMORYMalloc(int size,MemoryAllocationFlags allocFlags=MEMORYStandardMemory);




    void MEMORYFree(void *&data);






    void *MEMORYRealloc(void *&data,int newSize);





    char *MEMORYStrDup(const char *s);




    void MEMORYDisplayAllocationStatistics(StreamInterface *out);







    bool MEMORYAllocationStatistics(int &size, int &chunks, pthread_t tid = (pthread_t)0xFFFFFFFF);







    bool MEMORYCheck(void *address, MemoryTestAccessMode accessMode,int size=4);
# 125 "../Level0/Memory.h"
    void *SharedMemoryAlloc(uint32 key, uint32 size, uint32 permMask = 0666);




    void SharedMemoryFree(void *address);


}
# 56 "../Level0/System.h" 2




extern "C"{

    int UserMainFunction(int argc,char **argv);




    int MainHandler(int (*userMainFunction)(int argc,char **argv),int argc,char **argv);
}
# 40 "../Level1/CDBVirtual.h" 2
# 1 "../Level0/BString.h" 1
# 36 "../Level0/BString.h"
class BString;

extern "C" {





    bool FSAlloc(BString &s,int32 allocSize);







    bool FSRead(BString &s,void* buffer, uint32 &size);







    bool FSWrite(BString &s,const void* buffer, uint32 &size);

}

class BString {

    friend bool FSAlloc(BString &s,int32 allocSize);
    friend bool FSRead(BString &s,void* buffer, uint32 &size);
    friend bool FSWrite(BString &s,const void* buffer, uint32 &size);

protected:


    uint32 allocatedSize;


    uint32 size;


    char * buffer;


    uint32 position;


    void InitMembers(){
        size = 0;
        allocatedSize = 0;
        buffer = __null;
        position = 0;
        FSAlloc(*this,0);
    }


    void FinishMembers(){
        if (buffer!=__null) MEMORYFree((void *&)buffer);
        size = 0;
        allocatedSize = 0;
        buffer = __null;
        position = 0;
    }





    bool Copy(char c){
        uint32 wsize = 1;
        size = 0;
        position = 0;
        bool ret = FSWrite(*this,&c,wsize);
        position = 0;
        return ret;
    }





    bool Copy(const char *s){
        if (s==__null) return (1==0);
        uint32 wsize = strlen(s);
        size = 0;
        position = 0;
        bool ret = FSWrite(*this,s,wsize);
        position = 0;
        return ret;
    }






    bool Copy(const BString &s){
        uint32 wsize = s.size;
        size = 0;
        position = 0;
        bool ret = FSWrite(*this,s.Buffer(),wsize);
        position = 0;
        return ret;
    }

public:


    inline BString(){
        InitMembers();
    }




    inline BString(const BString &x){
        InitMembers();
        Copy(x);
    }




    inline BString(const char *x){
        InitMembers();
        Copy(x);
    }


    virtual ~BString(){
        FinishMembers();
    }




    inline uint32 Size() const{
        return size;
    }




    inline const char *Buffer() const{
        return buffer;
    }




    inline char *BufferReference() const{
        return buffer;
    }





    inline bool SetSize(uint32 size){
        if (FSAlloc(*this,size)==(1==0)) return (1==0);
        if (size < position) position = size;
        this->size = size;
        buffer[size]=0;
        return (1==1);
    }





    inline const char *Tail(int32 ix ) const {
        return buffer + size - ix - 1;
    }





    inline bool operator=(char c){
        return Copy(c);
    }





    inline bool operator=(const char *s){
        return Copy(s);
    }





    inline bool operator=(const BString &s){
        return Copy(s);
    }





    inline bool operator+=(const char c){
        position = size;
        uint32 wsize = 1;
        char temp = c;
        return FSWrite(*this,&temp,wsize);
    }





    inline bool operator+=(const char *s){
        if (s == __null) return (1==0);
        position = size;
        uint32 wsize = strlen(s);
        return FSWrite(*this,s,wsize);
    }





    inline bool operator+=(BString &s){
        position = size;
        uint32 wsize = s.Size();
        return FSWrite(*this,s.Buffer(),wsize);
    }





    inline bool operator==(BString &s) const {
        if (size!=s.size) return (1==0);
        if (strcmp(buffer,s.buffer)!=0) return (1==0);
        return (1==1);
    }





    inline bool operator==(const char *s) const {
        if (s==__null) return (1==0);
        if (strcmp(buffer,s)!=0) return (1==0);
        return (1==1);
    }

    inline bool operator!=(BString &s) const {
        return !((*this)==s);
    }

    inline bool operator!=(const char *s) const {
        return !((*this)==s);
    }





    inline char operator[](uint32 pos){
        if ( pos >= size ) return 0;
        return buffer[pos] ;
    }





    inline bool In(char c) const {
        for (uint32 i=0;i<size;i++) if (buffer[i] == c) return (1==1);
        return (1==0);
    }





    inline bool In(BString &x) const {
        if (x.Size() == 0) return (1==0);
        for (uint32 i=0;i<(size - x.Size() + 1);i++) if (memcmp(&buffer[i],x.Buffer(),x.Size())==0) return (1==1);
        return (1==0);
    }


};
# 41 "../Level1/CDBVirtual.h" 2
# 1 "../Level1/CDBTypes.h" 1
# 33 "../Level1/CDBTypes.h"
# 1 "../Level1/BasicTypes.h" 1
# 33 "../Level1/BasicTypes.h"
# 1 "../Level0/GenDefs.h" 1
# 34 "../Level1/BasicTypes.h" 2


# 1 "../Level0/ErrorManagement.h" 1
# 35 "../Level0/ErrorManagement.h"
enum EMFErrorType {

    Debug = 2,

    Information = 1,

    Warning = 0,

    FatalError = -1,

    RecoverableError = -2,

    InitialisationError = -3,

    OSError = -4,

    ParametersError = -5,

    IllegalOperation = -6,

    ErrorSharing = -7,

    ErrorAccessDenied = -8,

    Exception = -9,

    Timeout = -10,

    CommunicationError = -11,

    SyntaxError = -12
};



enum EMFErrorBehaviour {

    onErrorSulkES = 0x0001,

    onErrorQuitES = 0x0002,

    onErrorRememberES = 0x0004,

    onErrorReportES = 0x0008,

    onErrorReportConsoleES = 0x0010,

    onErrorLogES = 0x0020,

    onErrorRemoteLogES = 0x0040
};


typedef void (*AssembleErrorMessageFunctionType)(const char *errorDescription,va_list argList,const char *errorHeader,...);

extern "C" {





    void VCAssertErrorCondition(EMFErrorType errorCode,const void *object,const char *className,const char *errorDescription,va_list argList);




    void VCISRAssertErrorCondition(EMFErrorType errorCode,const void *object,const char *className,const char *errorDescription,va_list argList);




    void CISRStaticAssertErrorCondition(EMFErrorType errorCode,const char *errorDescription,...);






    void VCAssertPlatformErrorCondition(EMFErrorType errorCode,const void *object,const char *className,const char *errorDescription,va_list argList);



    void VCAssertSocketErrorCondition(EMFErrorType errorCode,const void *object,const char *className,const char *errorDescription,va_list argList);




    void VCStaticAssertErrorCondition(EMFErrorType errorCode,const char *errorDescription,va_list argList);




    void CStaticAssertErrorCondition(EMFErrorType errorCode,const char *errorDescription,...);






    void CStaticAssertPlatformErrorCondition(EMFErrorType errorCode,const char *errorDescription,...);



    void LSSetUserAssembleErrorMessageFunction(AssembleErrorMessageFunctionType userFun=__null);


    void LSGetUserAssembleErrorMessageFunction(AssembleErrorMessageFunctionType &userFun);


    void LSSetUserAssembleISRErrorMessageFunction(AssembleErrorMessageFunctionType userFun);


    const char *EMFErrorName(EMFErrorType errorCode);
}
# 37 "../Level1/BasicTypes.h" 2
# 47 "../Level1/BasicTypes.h"
enum BTDTypes{


    BTDTInteger = 0,


    BTDTFloat = 1,


    BTDTString = 2,


    BTDTPointer = 4,


    BTDTNone = 15

};


typedef int BTDSubTypes ;


union BTDFormat{






    struct {

        unsigned int minNumberOfFigures:5;







        int padding:3;







        int mode:3;


        int unused: 21;

    } intInfo;


    struct {


        unsigned int minNumberOfFigures:5;







        int padding:3;


        bool fixedFormat:1;


        int unused: 23;

    }floatInfo;


    struct {
# 134 "../Level1/BasicTypes.h"
        int separator:3;




        unsigned int sizeExp:4;


        int unused: 25;

    } stringInfo;
# 222 "../Level1/BasicTypes.h"
    BTDFormat(int x=0){
        int *p = (int *)this;
        *p = x;
    };


    int Value(){
        int *p = (int *)this;
        return *p;
    }
};


static const BTDFormat BTDFNone;


static const BTDSubTypes BTDSTNone = 0;




static const BTDSubTypes BTDSTUnsigned = 1;
# 252 "../Level1/BasicTypes.h"
static const BTDSubTypes BTDSTCString = 1;



static const BTDSubTypes BTDSTCArray = 2;






static const BTDSubTypes BTDSTBString = 3;






static const BTDSubTypes BTDSTFString = 4;





static const BTDSubTypes BTDSTBStringArray = 5;





static const BTDSubTypes BTDSTFStringArray = 6;


static const BTDSubTypes BTDSTStream = 7;



static const int32 BYTE_BIT_SIZE = 8;


static const int32 WORD32_BIT_SIZE = BYTE_BIT_SIZE * 4;

struct BasicTypeDescriptor;


extern "C" {


    const char *BTConvertToString(const BasicTypeDescriptor &bt,BString &string);


    bool BTConvertFromString(BasicTypeDescriptor &bt,const char *name);






    bool BTConvert( int numberOfElements,
                    BasicTypeDescriptor destinationBTD,
                    void * destination,
                    BasicTypeDescriptor sourceBTD,
                    const void * source
                    );

}



struct BasicTypeDescriptor {

    friend const char *BTConvertToString(
                            const BasicTypeDescriptor &bt,
                            BString & string);
    friend bool BTConvertFromString(
                            BasicTypeDescriptor &bt,
                            const char * name);
    friend bool BTConvert( int numberOfElements,
                            BasicTypeDescriptor destinationBTD,
                            void * destination,
                            BasicTypeDescriptor sourceBTD,
                            const void * source
                        );

private:



    uint32 size:10;


    int format:14;


    BTDTypes type:4;


    BTDSubTypes flags:4;

public:

    BasicTypeDescriptor()
    {
        this->size = 32;
        this->type = BTDTInteger;
        this->flags = BTDSTNone;
        this->format = 0;
    }


    BasicTypeDescriptor(int32 equivalent)
    {
        int32 *p = (int32 *)this;
        *p = equivalent;
    }


    BasicTypeDescriptor(uint32 size,BTDTypes type, BTDSubTypes flags,BTDFormat format = BTDFNone)
    {
        if (type == BTDTString){
            format.stringInfo.sizeExp = 0;
            while ((format.stringInfo.sizeExp < 15) && (size > 1024)){
                format.stringInfo.sizeExp ++;
                size = size / 10;
            }
        }
        if (size >= 1024) size = 1023;
        this->size = size;
        this->type = type;
        this->flags = flags;
        this->format = format.Value();
    }


    BasicTypeDescriptor(const BasicTypeDescriptor &desc)
    {
        this->size = desc.size;
        this->type = desc.type;
        this->flags = desc.flags;
        this->format = desc.format;
    }



    BasicTypeDescriptor operator=(const BasicTypeDescriptor &desc)
    {
 this->size = desc.size;
        this->type = desc.type;
 this->flags = desc.flags;
 this->format = desc.format;
 return *this;
    }






    bool operator==(const BasicTypeDescriptor &desc) const
    {
        bool ret = (1==1);
        ret &= (this->size == desc.size);
        ret &= (this->type == desc.type);
        ret &= (this->flags == desc.flags);
        return ret;
    }

    bool operator!=(const BasicTypeDescriptor &desc) const
    {
        return !(this->operator==(desc));
    }


    int32 BitSize() const
    {
        return size;
    }


    int32 ByteSize() const
    {
        return (size+BYTE_BIT_SIZE-1)/BYTE_BIT_SIZE;
    }


    int32 Word32Size() const
    {
        return (size+WORD32_BIT_SIZE-1)/WORD32_BIT_SIZE;
    }


    uint32 CArraySize() const
    {
        uint32 size = this->size;
        int exp = Format().stringInfo.sizeExp;
        while (exp> 0){
            size = size * 10;
            exp--;
        }

        return size;
    }


    const char *ConvertToString(BString &string) const
    {
 return BTConvertToString(*this,string);
    }


    bool ConvertFromString(const char *name)
    {
        return BTConvertFromString(*this,name);
    }


    int32 Value() const
    {
        int32 *p = (int32 *)this;
        return *p;
    }


    BTDFormat Format() const
    {
        return BTDFormat(format);
    }


    BTDTypes Type() const
    {
        return type;
    }


    BTDSubTypes Flags() const
    {
        return flags;
    }

};



static const BasicTypeDescriptor BTDInt8 ( 8,BTDTInteger,BTDSTNone);


static const BasicTypeDescriptor BTDInt16 (16,BTDTInteger,BTDSTNone);


static const BasicTypeDescriptor BTDInt32 (32,BTDTInteger,BTDSTNone);


static const BasicTypeDescriptor BTDInt64 (64,BTDTInteger,BTDSTNone);


static const BasicTypeDescriptor BTDPointer (8 * sizeof(size_t),BTDTPointer,BTDSTNone);


static const BasicTypeDescriptor BTDUint8 ( 8,BTDTInteger,BTDSTUnsigned);


static const BasicTypeDescriptor BTDUint16(16,BTDTInteger,BTDSTUnsigned);


static const BasicTypeDescriptor BTDUint32(32,BTDTInteger,BTDSTUnsigned);


static const BasicTypeDescriptor BTDUint64(64,BTDTInteger,BTDSTUnsigned);


static const BasicTypeDescriptor BTDFloat (32,BTDTFloat,BTDSTNone);


static const BasicTypeDescriptor BTDDouble(64,BTDTFloat,BTDSTNone);


static const BasicTypeDescriptor BTDCString(0,BTDTString,BTDSTCString);


static const BasicTypeDescriptor BTDBString(0,BTDTString,BTDSTBString);


static const BasicTypeDescriptor BTDBStringArray(0,BTDTString,BTDSTBStringArray);


static const BasicTypeDescriptor BTDStream (0,BTDTString,BTDSTStream);


extern "C" {
# 552 "../Level1/BasicTypes.h"
    int64 StringToInt64(const char *&string, int maxNumberOfBits=64,bool isSigned=(1==1));


    bool Int64ToString(BString &bs,int64 n,BTDFormat format);


    inline int32 StringToInt32(const char *&string,bool isSigned=(1==1)){
        return StringToInt64(string,32,isSigned);
    }


    inline int32 StringToInt16(const char *&string,bool isSigned=(1==1)){
        return StringToInt64(string,16,isSigned);
    }


    inline int32 StringToInt8(const char *&string,bool isSigned=(1==1)){
        return StringToInt64(string,8,isSigned);
    }







    bool IntToInt(
            int64 *& destination,
            int & destinationBitShift,
            int destinationBitSize,
            bool destinationIsSigned,
            int64 *& source,
            int & sourceBitShift,
            int sourceBitSize,
            bool sourceIsSigned);



    bool IntToInt64(
        int64 *& destination,
        int64 *& source,
        int & sourceBitShift,
        int sourceBitSize,
        bool sourceIsSigned);



    bool IntToInt32(
        int32 *& destination,
        int32 *& source,
        int & sourceBitShift,
        int sourceBitSize,
        bool sourceIsSigned);


    bool Int64ToInt(
            int64 *& destination,
            int & destinationBitShift,
            int destinationBitSize,
            bool destinationIsSigned,
            int64 *& sourceDataSigned);



    bool Int32ToInt(
            int64 *& destination,
            int & destinationBitShift,
            int destinationBitSize,
            bool destinationIsSigned,
            int32 *& sourceDataSigned);

};







typedef char * (*BTStringGetDataFunction)(const void *&p);


typedef void (*BTStringPutDataFunction)(const void *&p,const char *s,int maxSize,int pos,char sep);

extern BTStringPutDataFunction BTSPDFArray[16];

extern BTStringGetDataFunction BTSGDFArray[16];
# 34 "../Level1/CDBTypes.h" 2






enum CDBWriteMode{




    CDBWM_Modes = 0x000000FF,


    CDBWM_Tree = 0x00000001,


    CDBWM_Comma = 0x00000002,






    CDBWM_NoIndent = 0x00000100,


    CDBWM_Indent = ~CDBWM_NoIndent,


    CDBWM_NameJoin = 0x00000200,


    CDBWM_NameNoJoin= ~CDBWM_NameJoin,


    CDBWM_AllmanStyle = 0x00000400,


    CDBWM_NoAllmanStyle = ~CDBWM_AllmanStyle



};


static inline CDBWriteMode operator|(CDBWriteMode a,CDBWriteMode b){ return (CDBWriteMode) ((int)a|(int)b); }


static inline CDBWriteMode operator&(CDBWriteMode a,CDBWriteMode b){ return (CDBWriteMode) ((int)a&(int)b); }


static inline CDBWriteMode operator~(CDBWriteMode a){ return (CDBWriteMode) (~(int)a); }




enum CDBAddressMode {


    CDBAM_None = 0x00000000,


    CDBAM_FromRoot = 0x00000001,


    CDBAM_SkipCurrent = 0x00000002,


    CDBAM_SubTreeOnly = 0x00000004,


    CDBAM_LeafsOnly = 0x00000008,


    CDBAM_Relative = 0x00000010

};


static inline CDBAddressMode operator|(CDBAddressMode a,CDBAddressMode b){ return (CDBAddressMode) ((int)a|(int)b); }


static inline CDBAddressMode operator&(CDBAddressMode a,CDBAddressMode b){ return (CDBAddressMode) ((int)a&(int)b); }


static inline CDBAddressMode Not(CDBAddressMode a){ return (CDBAddressMode) ~(int)a; }



enum CDBArrayIndexingMode {


    CDBAIM_Flexible = 0x00000000,


    CDBAIM_Strict = 0x00000001,


    CDBAIM_Recursion = 0x00000002

};


static inline CDBArrayIndexingMode operator|(CDBArrayIndexingMode a,CDBArrayIndexingMode b){ return (CDBArrayIndexingMode) ((int)a|(int)b); }


enum CDBNMode{

    CDBN_ModeMask = 0x000000FF,


    CDBN_None = 0x00000000,


    CDBN_SearchOnly = 0x00000001,


    CDBN_SearchAndCreate = 0x00000002,


    CDBN_CreateOnly = 0x00000003,


    CDBN_FollowLink = 0x00000100,


    CDBN_PartialMatch = 0x00000200,


    CDBN_MatchAllButLast = 0x00000400,


    CDBN_CreateMask = 0xFF000000,


    CDBN_CreateGroupNode = 0x00000000,


    CDBN_CreateStringNode = 0x01000000,


    CDBN_CreateLinkNode = 0x02000000
};


static inline CDBNMode operator|(CDBNMode a,CDBNMode b){
    return (CDBNMode) ((int)a | (int)b);
}



enum CDBCreationMode{

    CDBCM_None = 0,

    CDBCM_CopyAddress = 1
};
# 200 "../Level1/CDBTypes.h"
static const BasicTypeDescriptor CDB_float = BTDFloat;


static const BasicTypeDescriptor CDB_double = BTDDouble;


static const BasicTypeDescriptor CDB_int32 = BTDInt32;


static const BasicTypeDescriptor CDB_uint32 = BTDUint32;


static const BasicTypeDescriptor CDB_int64 = BTDInt64;


static const BasicTypeDescriptor CDB_Pointer = BTDPointer;


static const BasicTypeDescriptor CDB_char = BTDInt8;


static const BasicTypeDescriptor CDB_FString = BasicTypeDescriptor (0,BTDTString,BTDSTFStringArray);


static const BasicTypeDescriptor CDB_String = BTDCString;


static const BasicTypeDescriptor CDB_None = BasicTypeDescriptor (1,BTDTNone,BTDSTNone);


static const BasicTypeDescriptor CDB_CDBStyle = BasicTypeDescriptor (2,BTDTNone,BTDSTNone);


static const BasicTypeDescriptor CDB_CDBEval = BasicTypeDescriptor (3,BTDTNone,BTDSTNone);


static const BasicTypeDescriptor CDB_Interpret = BasicTypeDescriptor (4,BTDTNone,BTDSTNone);


static const BasicTypeDescriptor CDB_Content = BasicTypeDescriptor (5,BTDTNone,BTDSTNone);


static const BasicTypeDescriptor CDB_BString = BTDBStringArray;




struct CDBTYPE{


    BasicTypeDescriptor dataType;


    int size;


    const char * containerClassName;

    CDBTYPE( BasicTypeDescriptor dataType,
                int size,
                const char * containerClassName
    ){
        this->dataType = dataType;
        this->size = size;
        this->containerClassName = containerClassName;
    }
};


static const CDBTYPE CDBTYPE_float (CDB_float ,sizeof(float) ,__null);


static const CDBTYPE CDBTYPE_double (CDB_double ,sizeof(double) ,__null);

static const CDBTYPE CDBTYPE_int32 (CDB_int32 ,sizeof(int32) ,__null);

static const CDBTYPE CDBTYPE_int64 (CDB_int64 ,sizeof(int64) ,__null);

static const CDBTYPE CDBTYPE_uint32 (CDB_uint32 ,sizeof(uint32) ,__null);

static const CDBTYPE CDBTYPE_char (CDB_char ,sizeof(char) ,__null);





static const CDBTYPE CDBTYPE_String (CDB_String ,sizeof(char *) ,__null);


static const CDBTYPE CDBTYPE_BString (CDB_BString ,sizeof(BString) ,__null);

static const CDBTYPE CDBTYPE_NULL (CDB_None,0 ,__null);

static const CDBTYPE CDBTYPE_Pointer (CDB_Pointer, sizeof(size_t) ,__null);
# 42 "../Level1/CDBVirtual.h" 2
# 1 "../Level0/Iterators.h" 1
# 37 "../Level0/Iterators.h"
enum SFTestType{


    SFTTNull = 0x0000,


    SFTTFound = 0x1001,


    SFTTNotFound = 0x1000,



    SFTTWrongPath = 0x1002,



    SFTTRecurse = 0x2000,



    SFTTBack = 0x2001
};


class LinkedListable;


class Iterator{
public:

    virtual void Do (LinkedListable *data)=0;
};


template <typename T>
class IteratorT{
public:

    virtual void Do (T data)=0;



    virtual void Do2(T data, SFTestType mode = SFTTNull){
        Do(data);
    }
};



typedef void (IteratorFn )(LinkedListable *data);


class SearchFilter{
public:

    virtual bool Test (LinkedListable *data)=0;
};




template <typename T>
class SearchFilterT{
public:

    virtual bool Test (T data)=0;



    virtual SFTestType Test2(T data, SFTestType mode = SFTTNull){
        if (Test(data)) return SFTTFound;
        return SFTTNotFound;
    }
};



typedef bool (SearchFilterFn )(LinkedListable *data);


class SortFilter{
public:

    virtual int32 Compare(LinkedListable *data1,LinkedListable *data2)=0;
};





typedef int32 (SortFilterFn )(LinkedListable *data1,LinkedListable *data2);
# 139 "../Level0/Iterators.h"
typedef LinkedListable Stackable ;
# 148 "../Level0/Iterators.h"
typedef LinkedListable Queueable ;
# 43 "../Level1/CDBVirtual.h" 2
# 1 "../Level1/GCNamedObject.h" 1
# 33 "../Level1/GCNamedObject.h"
# 1 "../Level1/GarbageCollectable.h" 1
# 36 "../Level1/GarbageCollectable.h"
# 1 "../Level1/Object.h" 1
# 36 "../Level1/Object.h"
# 1 "../Level1/ObjectRegistryItem.h" 1
# 33 "../Level1/ObjectRegistryItem.h"
# 1 "../Level0/LinkedListable.h" 1
# 32 "../Level0/LinkedListable.h"
# 1 "../Level0/Iterators.h" 1
# 33 "../Level0/LinkedListable.h" 2





class LinkedListable {
friend class MultiLinkedListHolder;
friend class LinkedListHolder;
friend class StackHolder;
friend class QueueHolder;
protected:
    LinkedListable *next;
public:
    LinkedListable(){
        next = __null;
    }


    virtual ~LinkedListable(){ next = __null; }


    LinkedListable *Next()const{
        return next;
    }


    void SetNext(LinkedListable *p){
        next = p;
    }


    uint32 Size(){
        LinkedListable *p = this;
        uint32 count = 0;
        while (p!=__null){ p = p->next;count++;}
        return count;
    }


    void BSort(SortFilter *sorter){
        if (sorter == __null) return ;
        if (next == __null) return ;
        uint32 count = 1;
        LinkedListable *p = this;
        while(p->next->next != __null){
            count++;
            LinkedListable *a1 = p->next;
            LinkedListable *a2 = p->next->next;
            if (sorter->Compare(a1,a2) > 0){
                a1->next = a2->next;
                a2->next = a1;
                p->next = a2;
                p = a2;
            } else p = a1;
        }
        while (count > 2){
            LinkedListable *p = this;
            uint32 index = count;
            while(index > 2){
                index--;
                LinkedListable *a1 = p->next;
                LinkedListable *a2 = p->next->next;
                if (sorter->Compare(a1,a2) > 0){
                    a1->next = a2->next;
                    a2->next = a1;
                    p->next = a2;
                    p = a2;
                } else p = a1;
            }
            count--;
        }
    }


    void BSort(SortFilterFn *sorter){
        if (sorter == __null) return ;
        if (next == __null) return ;
        uint32 count = 1;
        LinkedListable *p = this;
        while(p->next->next != __null){
            count++;
            LinkedListable *a1 = p->next;
            LinkedListable *a2 = p->next->next;
            if (sorter(a1,a2) > 0){
                a1->next = a2->next;
                a2->next = a1;
                p->next = a2;
                p = a2;
            } else p = a1;
        }
        while (count > 2){
            LinkedListable *p = this;
            uint32 index = count;
            while(index > 2){
                index--;
                LinkedListable *a1 = p->next;
                LinkedListable *a2 = p->next->next;
                if (sorter(a1,a2) > 0){
                    a1->next = a2->next;
                    a2->next = a1;
                    p->next = a2;
                    p = a2;
                } else p = a1;
            }
            count--;
        }
    }


    void Insert(LinkedListable *p){
        if (p == __null) return ;
        LinkedListable *q = next;
        next = p;
        if (q == __null) return;
        while(p->next != __null) p = p->next;
        p->next = q;
    }


    void Insert(LinkedListable *p,SortFilter *sorter){
        if (p == __null) return;
        if (sorter == __null){
            Insert(p);
            return;
        }
        if (p->next != __null){
            LinkedListable root;
            root.next = p;
            root.BSort(sorter);
            p = root.next;
        }
        LinkedListable *list = this;
        while ((p != __null) &&(list->next != __null)){
            if (sorter->Compare(list->next,p)<0){
                LinkedListable *item = p;
                p = p->next;
                item->next = list->next;
                list->next = item;
            } else list = list->next;
        }
        if (p !=__null) list->next = p;
    }


    void Insert(LinkedListable *p,SortFilterFn *sorter){
        if (p == __null) return;
        if (sorter == __null){
            Insert(p);
            return;
        }
        if (p->next != __null){
            LinkedListable root;
            root.next = p;
            root.BSort(sorter);
            p = root.next;
        }
        LinkedListable *list = this;
        while ((p != __null) &&(list->next != __null)){
            if (sorter(list->next,p)<0){
                LinkedListable *item = p;
                p = p->next;
                item->next = list->next;
                list->next = item;
            } else list = list->next;
        }
        if (p !=__null) list->next = p;
    }


    void Add(LinkedListable *p){
        if (p == __null) return ;
        LinkedListable *q = this;
        while (q->next != __null){
         q = q->next;
  }
        q->next = p;
     p->next = __null;
    }


    void AddL(LinkedListable *p){
        if (p == __null) return ;
        LinkedListable *q = this;
        while (q->next != __null){
     q = q->next;
 }
        q->next = p;
    }


    bool Search(LinkedListable *p){
        LinkedListable *q = this;
        while (q!=__null){
            if (q==p) return (1==1);
            q = q->next;
        }
        return (1==0);
    }


    LinkedListable *Search(SearchFilter *filter){
        if (filter == __null) return __null;
        LinkedListable *q = this;
        while (q!=__null){
            if (filter->Test(q)) return q;
            q = q->next;
        }
        return __null;
    }


    LinkedListable *Search(SearchFilterFn *filter){
        if (filter == __null) return __null;
        LinkedListable *q = this;
        while (q!=__null){
            if (filter(q)) return q;
            q = q->next;
        }
        return __null;
    }


    bool Extract(LinkedListable *p){
        if (p == __null) return (1==0);
        LinkedListable *q = this;
        if (p == q) return (1==0);
        while ((q->next != p) && (q->next != __null)) q= q->next;
        if (q->next == __null) return (1==0);
        q->next = q->next->next;
        p->next = __null;
        return (1==1);
    }


    LinkedListable *Extract(SearchFilter *filter){
        if (filter == __null) return __null;
        LinkedListable *q = this;
        while (q->next != __null){
            if (filter->Test(q->next)){
                LinkedListable *p = q->next;
                q->next = q->next->next;
                p->next = __null;
                return p;
            } else q = q->next;
        }
        return __null;
    }


    LinkedListable *Extract(SearchFilterFn *filter){
        if (filter == __null) return __null;
        LinkedListable *q = this;
        while (q->next != __null){
            if (filter(q->next)){
                LinkedListable *p = q->next;
                q->next = q->next->next;
                p->next = __null;
                return p;
            } else q = q->next;
        }
        return __null;
    }


    bool Delete(LinkedListable *p){
        bool ret = Extract(p);
        if (ret) delete p;
        return ret;
    }


    uint32 Delete(SearchFilter *filter){
        uint32 deleted = 0;
        if (filter == __null) return deleted;
        LinkedListable *q = this;
        while (q->next != __null){
            if (filter->Test(q->next)){
                LinkedListable *p = q->next;
                q->next = q->next->next;
                delete p;
                deleted++;
            } else q = q->next;
        }
        return deleted;
    }




    uint32 Delete(SearchFilterFn *filter){
        uint32 deleted = 0;
        if (filter == __null) return deleted;
        LinkedListable *q = this;
        while (q->next != __null){
            if (filter(q->next)){
                LinkedListable *p = q->next;
                q->next = q->next->next;
                delete p;
                deleted++;
            } else q = q->next;
        }
        return deleted;
    }


    LinkedListable *Peek(uint32 index){
        LinkedListable *p = this;
        while((p != __null) && (index > 0)) { p = p->next; index--; }
        return p;
    }


    void Iterate(Iterator *it){
        LinkedListable *p = this;
        while(p != __null){
            it->Do(p);
            p = p->next;
        }
    }


    void Iterate(IteratorFn *it){
        LinkedListable *p = this;
        while(p != __null){
            it(p);
            p = p->next;
        }
    }

};
# 34 "../Level1/ObjectRegistryItem.h" 2
# 1 "../Level1/ErrorSystemInstructions.h" 1
# 29 "../Level1/ErrorSystemInstructions.h"
# 1 "../Level0/LinkedListHolder.h" 1
# 33 "../Level0/LinkedListHolder.h"
# 1 "../Level0/LinkedListable.h" 1
# 34 "../Level0/LinkedListHolder.h" 2

class LinkedListHolder {
protected:

    LinkedListable llhRoot;


    uint32 llhSize;

public:


    void CleanUp(){
        LinkedListable *p = llhRoot.next;
        llhRoot.next = __null;
        while(p != __null){
            LinkedListable *q = p;
            p = p->Next();
            delete q;
        }
        llhSize = 0;
    }




    void Reset(){
        llhRoot.next = __null;
        llhSize = 0;
    }


    LinkedListHolder(){
        llhSize = 0;
        llhRoot.next = __null;
    }



    virtual ~LinkedListHolder(){
        CleanUp();
    }


    LinkedListable *List() const{
        return llhRoot.Next();
    };


    uint32 ListSize()const {
        return llhSize;
    };


    inline void FastListInsertSingle(LinkedListable &p){
        llhSize++;
        p.next = llhRoot.next;
        llhRoot.next = &p;
    }


    void ListInsert(LinkedListable *p){
        llhSize += p->Size();
        llhRoot.Insert(p);
    }


    void ListInsert(LinkedListable *p,SortFilter *sorter){
        llhSize += p->Size();
        llhRoot.Insert(p,sorter);
    }


    void ListInsert(LinkedListable *p,SortFilterFn *sorter){
        llhSize += p->Size();
        llhRoot.Insert(p,sorter);
    }


    void ListInsert(LinkedListable *q,uint32 index){
        if (q == __null) return;
        LinkedListable *p = &llhRoot;
        while ((p->next != __null) && (index > 0)){ p = p->next; index--; }
        llhSize += q->Size();
        p->Insert(q);
    }


    void ListInsertL(LinkedListHolder *p){
        if (p == __null) return;
        llhSize += p->ListSize();
        llhRoot.Insert(p->List());
        p->llhRoot.next = __null;
        p->llhSize = 0;
    }


    void ListInsertL(LinkedListHolder *p,SortFilter *sorter){
        if (p == __null) return;
        llhSize += p->ListSize();
        llhRoot.Insert(p->List(),sorter);
        p->llhRoot.next = __null;
        p->llhSize = 0;
    }


    void ListInsertL(LinkedListHolder *p,SortFilterFn *sorter){
        if (p == __null) return;
        llhSize += p->ListSize();
        llhRoot.Insert(p->List(),sorter);
        p->llhRoot.next = __null;
        p->llhSize = 0;
    }


    void ListInsertL(LinkedListHolder *p,uint32 index){
        if (p == __null) return;
        ListInsert(p->llhRoot.next,index);
        p->llhRoot.next = __null;
        p->llhSize = 0;
    }


    void ListAdd(LinkedListable *p){
        llhSize ++;
        llhRoot.Add(p);
    }


    void ListAddL(LinkedListable *p){
        llhSize += p->Size();
        llhRoot.AddL(p);
    }


    bool ListSearch(LinkedListable *p){
        if (llhRoot.Next() == __null) return (1==0);
        return llhRoot.Next()->Search(p);
    }


    LinkedListable *ListSearch(SearchFilter *filter){
        if (llhRoot.Next() == __null) return __null;
        return llhRoot.Next()->Search(filter);
    }


    LinkedListable *ListSearch(SearchFilterFn *filter){
        if (llhRoot.Next() == __null) return __null;
        return llhRoot.Next()->Search(filter);
    }



    bool ListExtract(LinkedListable *p){
        if (llhRoot.Extract(p) == (1==1)){
            llhSize --;
            return (1==1);
        } else return (1==0);
    }


    LinkedListable *ListExtract(SearchFilter *filter){
        LinkedListable *p = llhRoot.Extract(filter);
        if (p != __null) llhSize --;
        return p;
    }


    LinkedListable *ListExtract(SearchFilterFn *filter){
        LinkedListable *p = llhRoot.Extract(filter);
        if (p != __null) llhSize --;
        return p;
    }


    bool ListDelete(LinkedListable *p){
        if (llhRoot.Delete(p) == (1==1)){
            llhSize --;
            return (1==1);
        } else return (1==0);
    }


    bool ListDelete(SearchFilter *filter){
        uint32 deleted = llhRoot.Delete(filter);
        llhSize -= deleted;
        return (deleted !=0);
    }




    bool ListSafeDelete(SearchFilter *filter){
        if (filter == __null) return (1==0);
        int deleted = 0;
        LinkedListable *p = List();
        while(p != __null){
            if (filter->Test(p)){
                if (ListExtract(p)) {
                    delete p;

                    p = List();
                    deleted++;
                } else p = p->next;
            } else p = p->next;
        }
        return (deleted != 0);
    }


    bool ListDelete(SearchFilterFn *filter){
        uint32 deleted = llhRoot.Delete(filter);
        llhSize -= deleted;
        return (deleted !=0);
    }



    void ListBSort(SortFilter *sorter){
        llhRoot.BSort(sorter);
    }


    void ListBSort(SortFilterFn *sorter){
        llhRoot.BSort(sorter);
    }


    LinkedListable *ListPeek(uint32 index){
        return llhRoot.Next()->Peek(index);
    }


    LinkedListable *ListExtract(uint32 index=0){
        LinkedListable *p = &llhRoot;
        while ((p != __null) && (index > 0)){ p = p->next; index--; }
        LinkedListable *q = p->next;
        if (q != __null){
            llhSize--;
            p->next = q->next;
        }
        if (q != __null) q->next = __null;
        return q;
    }


    void ListIterate(Iterator *it){
        if (llhRoot.Next() != __null) llhRoot.Next()->Iterate(it);
    }


    void ListIterate(IteratorFn *it){
        if (llhRoot.Next() != __null) llhRoot.Next()->Iterate(it);
    }

};
# 30 "../Level1/ErrorSystemInstructions.h" 2
# 1 "../Level0/FastPollingMutexSem.h" 1
# 33 "../Level0/FastPollingMutexSem.h"
# 1 "../Level0/Atomic.h" 1
# 35 "../Level0/Atomic.h"
# 1 "../Level0/Sleep.h" 1
# 33 "../Level0/Sleep.h"
# 1 "../Level0/FastMath.h" 1
# 90 "../Level0/FastMath.h"
static inline int32 FastFloat2Int(float input){
# 119 "../Level0/FastMath.h"
    volatile int32 output;
    __asm__ __volatile__(
        "fld   %1;\n"
        "fistpl %0;"
        : "=m" (output) : "m" (input)
        );
    return output;







}

static inline float FastCos(float angle){



    volatile float output;
    __asm__ __volatile__(
         "fcos;"
        : "=t" (output) : "0" (angle)
        );
    return output;



}

static inline float FastSin(float angle){



    volatile float output;
    __asm__ __volatile__("fsin" : "=t" (output) : "0" (angle));
    return output;



}
# 34 "../Level0/Sleep.h" 2
# 1 "../Level0/HRT.h" 1
# 40 "../Level0/HRT.h"
# 1 "../Level0/Processor.h" 1
# 85 "../Level0/Processor.h"
extern "C" {




    uint64 ProcessorClockRate();




    double ProcessorClockCycle();




    const char *ProcessorName();




    uint32 ProcessorFamily();


    intptr ProcessorCharacteristic(uint32 capId);


    void ProcessorReScanCPU();


    int32 ProcessorsAvailable();

}


class Processor {
public:


    static uint64 ClockFrequency(){
        return ProcessorClockRate();
    }


    static double ClockPeriod(){
        return ProcessorClockCycle();
    }


    static const char *Name(){
        return ProcessorName();
    }


    static uint32 Family(){
        return ProcessorFamily();
    }


    static intptr Characteristic(uint32 capId){
        return ProcessorCharacteristic(capId);
    }


    static void ReScanCPU(){
        ProcessorReScanCPU();
    }


    static int32 Available()
    {
        return ProcessorsAvailable();
    }
};
# 41 "../Level0/HRT.h" 2


static inline uint32 HRTRead32() {







    uint64 perf;
    uint32 *pperf = (uint32 *)&perf;
    asm(
    "\n"
    "        rdtsc        \n"
    : "=a"(pperf[0]) , "=d"(pperf[1])
    :
    : "eax","edx"
    );

    return (uint32)perf;
# 77 "../Level0/HRT.h"
}



static inline int64 HRTRead64 () {
# 99 "../Level0/HRT.h"
    volatile int64 perf;
    uint32 *pperf = (uint32 *)&perf;
    asm volatile(
"\n"
"        rdtsc        \n"
       : "=a"(pperf[0]) , "=d"(pperf[1])
    );
    return perf;
# 145 "../Level0/HRT.h"
}


extern "C" {

    int64 HRTClockRate();


    double HRTClockCycle();


    uint32 HRTMSecTics();


    uint32 HRTSystemMsecTime();

}



class HRT{

public:


    static inline int64 HRTCounter(){
        return HRTRead64();
    }


    static inline uint32 HRTCounter32(){
        return HRTRead32();
    }


    static inline int64 HRTFrequency(){
        return HRTClockRate();
    }


    static inline double HRTPeriod(){
        return HRTClockCycle();
    }


    static inline double TicksToTime(int64 tStop,int64 tStart = 0){
        int64 dT = tStop-tStart;
        return dT * HRTPeriod();
    }



    uint32 SystemMsecTime(){
        return HRTSystemMsecTime();
    }

};
# 35 "../Level0/Sleep.h" 2





extern "C" {


    int GetSleepFrequency();




    bool SetSleepGranularity(int value);



    int GetSleepGranularity();


    int GetDateSeconds();


    void ResynchronizeClock();

};



static inline void SleepAtLeast(double sec){
    int ticks = (int)(GetSleepFrequency()*sec+0.9999);
    if(ticks < 0) return;
# 80 "../Level0/Sleep.h"
     int64 hrtCounter;
     long nsecRemainder;
     struct timespec timesValues;
     struct timespec remTimesValues;
     double roundValue = floor(sec);
     timesValues.tv_sec = (time_t)roundValue;
     timesValues.tv_nsec = (long)((sec-roundValue)*1E9);
     hrtCounter = HRT::HRTCounter();
     while(1) {
         while(nanosleep(&timesValues, &remTimesValues) == -1) {
             if((*__errno_location ()) != 4) {
          return;
      }
      memcpy(&timesValues, &remTimesValues, sizeof(struct timespec));
  }
  nsecRemainder = (long)(((HRT::HRTCounter()-hrtCounter)*HRT::HRTPeriod() - sec)*1E9);
  if(nsecRemainder >= 0) {
      break;
  } else {
      timesValues.tv_sec = 0;
      timesValues.tv_nsec = nsecRemainder;
  }
     }



}


static inline void SleepNoMore(double sec){
    int ticks = (int)(GetSleepFrequency()*sec);
    if(ticks < 0) return;
# 130 "../Level0/Sleep.h"
     int64 secCounts = (int64)(sec * HRT::HRTFrequency());
     sec -= 5000 * 1e-6;
     int64 start = HRT::HRTCounter();
     if(sec > 0){
         struct timespec timesValues;
         struct timespec remTimesValues;
         double roundValue = floor(sec);
         timesValues.tv_sec = (time_t)roundValue;
         timesValues.tv_nsec = (long)((sec-roundValue)*1E9);
  while(nanosleep(&timesValues, &remTimesValues) == -1) {
             if((*__errno_location ()) != 4) {
          return;
      }
      memcpy(&timesValues, &remTimesValues, sizeof(struct timespec));
  }
     }
     int64 sleepUntil = secCounts + start;
     while(HRT::HRTCounter() < sleepUntil);


}




static inline void SleepSec(double sec){
     if(sec<0) return;
# 167 "../Level0/Sleep.h"
     struct timespec timesValues;
     struct timespec remTimesValues;
     double roundValue = floor(sec);
     timesValues.tv_sec = (time_t)roundValue;
     timesValues.tv_nsec = (long)((sec-roundValue)*1E9);
     while(nanosleep(&timesValues, &remTimesValues) == -1) {
         if((*__errno_location ()) != 4) {
      return;
  }
         memcpy(&timesValues, &remTimesValues, sizeof(struct timespec));
     }


}




static inline void SleepSec(float sec){
     if(sec<0) return;
# 197 "../Level0/Sleep.h"
     struct timespec timesValues;
     struct timespec remTimesValues;
     double roundValue = floor(sec);
     timesValues.tv_sec = (time_t)roundValue;
     timesValues.tv_nsec = (long)((sec-roundValue)*1E9);
     while(nanosleep(&timesValues, &remTimesValues) == -1) {
         if((*__errno_location ()) != 4) {
      return;
  }
         memcpy(&timesValues, &remTimesValues, sizeof(struct timespec));
     }


}




static inline void SleepMsec(int32 msec){
     if(msec<0) return;
# 227 "../Level0/Sleep.h"
     int sec = 0;
     int nanosec = 0;
     if(msec >=1000){
     sec = (int)(msec/1000);
     nanosec = (int)((msec - sec*1000)*1E6);
     }else{
     sec = 0;
     nanosec = (int)(msec*1E6);
     }
     struct timespec timesValues;
     struct timespec remTimesValues;
     timesValues.tv_sec = (time_t)sec;
     timesValues.tv_nsec = (long)nanosec;
     while(nanosleep(&timesValues, &remTimesValues) == -1) {
         if((*__errno_location ()) != 4) {
      return;
  }
         memcpy(&timesValues, &remTimesValues, sizeof(struct timespec));
     }


}

static inline void SleepBusy(double sec) {
    int64 startCounter = HRT::HRTCounter();
    int64 sleepUntil = startCounter + (int64)(sec * HRT::HRTFrequency());
    while(HRT::HRTCounter() < sleepUntil);
}



static inline void SleepSemiBusy(double totalSleepSec, double nonBusySleepSec) {
    int64 startCounter = HRT::HRTCounter();
    int64 sleepUntilCounter = startCounter + (int64)(totalSleepSec*HRT::HRTFrequency());
    if((nonBusySleepSec < totalSleepSec) && (nonBusySleepSec > 0.0)) {
        struct timespec timesValues;
 struct timespec remTimesValues;
 double roundValue = floor(nonBusySleepSec);
 timesValues.tv_sec = (time_t)roundValue;
 timesValues.tv_nsec = (long)((nonBusySleepSec-roundValue)*1E9);
 while(nanosleep(&timesValues, &remTimesValues) == -1) {
     if((*__errno_location ()) != 4) {
         return;
     }
     memcpy(&timesValues, &remTimesValues, sizeof(struct timespec));
 }
    }
    while(HRT::HRTCounter() < sleepUntilCounter);
}
# 36 "../Level0/Atomic.h" 2


class Atomic{
# 62 "../Level0/Atomic.h"
public:

    static inline void Increment (volatile int32 *p ){
# 92 "../Level0/Atomic.h"
        asm volatile(
            "lock incl (%0)\n"
            : : "r" (p)
            );







    }


    static inline void Increment (volatile int16 *p){
# 133 "../Level0/Atomic.h"
        asm volatile(
            "lock incw (%0)\n"
            : : "r" (p)
            );







    }


    static inline void Increment (volatile int8 *p){
# 173 "../Level0/Atomic.h"
        asm volatile(
            "lock incb (%0)\n"
            : : "r" (p)
            );







    }


    static inline void Decrement (volatile int32 *p){
# 213 "../Level0/Atomic.h"
        asm volatile(
            "lock decl (%0)\n"
            : : "r" (p)
            );







    }


    static inline void Decrement (volatile int16 *p){
# 253 "../Level0/Atomic.h"
        asm volatile(
            "lock decw (%0)\n"
            : : "r" (p)
            );







    }


    static inline void Decrement (volatile int8 *p){
# 293 "../Level0/Atomic.h"
        asm volatile(
            "lock decb (%0)\n"
            : : "r" (p)
            );







    }


    static inline int32 Exchange (volatile int32 *p, int32 v){
# 345 "../Level0/Atomic.h"
        asm volatile(
            "lock xchg (%1), %0"
            :"=r" (v) : "r" (p), "0" (v)
        );
        return v;

    }


    static inline bool TestAndSet(int32 volatile *p){
# 392 "../Level0/Atomic.h"
    register int32 out=1;
    asm volatile (
        "lock xchg (%2),%1"
        : "=r" (out) : "0" (out), "r" (p)
        );
    return (out==0);
# 408 "../Level0/Atomic.h"
    }


    static inline bool TestAndSet(int16 volatile *p){
# 448 "../Level0/Atomic.h"
    register int16 out=1;
    asm volatile (
        "lock xchgw (%2),%1"
        : "=r" (out) : "0" (out), "r" (p)
        );
    return (out==0);
# 463 "../Level0/Atomic.h"
    }


    static inline bool TestAndSet(int8 volatile *p){
# 503 "../Level0/Atomic.h"
    register int8 out=1;
    asm volatile (
        "lock xchgb (%2),%1"
        : "=q" (out) : "0" (out), "q" (p)
        );
    return (out==0);
# 519 "../Level0/Atomic.h"
    }




    static inline void Add (volatile int32 *p, int32 value) {

        asm volatile (
                "lock addl %1, (%0)"
                :
                :"r" (p), "ir" (value)
        );
# 545 "../Level0/Atomic.h"
    }




    static inline void Sub (volatile int32 *p, int32 value) {

        asm volatile (
                "lock subl %1, (%0)"
                :
                :"r" (p), "ir" (value)
        );
# 571 "../Level0/Atomic.h"
    }

};
# 34 "../Level0/FastPollingMutexSem.h" 2

# 1 "../Level0/TimeoutType.h" 1
# 36 "../Level0/TimeoutType.h"
const uint32 TTMaxDelay = 0xFFFF0000;


class TimeoutType{
public:

    uint32 msecTimeout;
public:

    TimeoutType(uint32 msecs = (uint32)0xFFFFFFFF){
        msecTimeout = msecs;
    }


    void SetTimeOutSec(double secs){
        msecTimeout = (uint32)(secs * 1000.0);
    }


    void SetTimeOutHRTTicks(int64 ticks){
        if (ticks < 0) ticks = 0;
        double msDT = 1000.0 *(ticks * HRT::HRTPeriod());
        msecTimeout = (uint32)msDT;
    }


    int64 HRTTicks() const{
        double dT = msecTimeout;
        dT = dT * 1e-3;
 double freq = HRT::HRTFrequency();
        dT = dT * freq;
        int64 ticks = (int64)dT;
        return ticks;
    }


    void operator-=(int n){
        if (msecTimeout > n) msecTimeout-=n;
        else msecTimeout = 0;
    }


    bool operator==(const TimeoutType tt){
        return msecTimeout == tt.msecTimeout;
    }


    bool operator!=(const TimeoutType tt){
        return msecTimeout != tt.msecTimeout;
    }


    void operator=(const TimeoutType tt){
        msecTimeout = tt.msecTimeout;
    }


    bool IsFinite(){
        return (msecTimeout < (uint32)0xFFFFFFFE);
    }

};




const TimeoutType TTNoWait((uint32)0x00000000);


const TimeoutType TTInfiniteWait((uint32)0xFFFFFFFF);


const TimeoutType TTUnProtected ((uint32)0xFFFFFFFD);


const TimeoutType TTDefault ((uint32)0xFFFFFFFE);
# 36 "../Level0/FastPollingMutexSem.h" 2



class FastPollingMutexSem {
protected:
    volatile int32 flag;
public:

    FastPollingMutexSem(){
        flag = 0;
    }


    bool Create(bool locked = (1==0)){
        if (locked == (1==1)) flag = 1;
        else flag = 0;
        return (1==1);
    }


    bool Close()
    {
        return (1==1);
    }


    inline bool Locked()
    {
        return flag == 1;
    }



    inline bool FastLock(TimeoutType msecTimeout = TTInfiniteWait)
    {
        int64 ticksStop = msecTimeout.HRTTicks();
        ticksStop += HRTRead64();
        while (!Atomic::TestAndSet((int32 *)&flag)) {
            if (msecTimeout != TTInfiniteWait){
                int64 ticks = HRTRead64();
                if (ticks > ticksStop) return (1==0);
            }

            SleepMsec(1);
        }
        return (1==1);
    }


    inline bool FastTryLock()
    {
        return (Atomic::TestAndSet((int32 *)&flag));
    }


    inline bool FastUnLock(void){
        flag = 0;
        return (1==1);
    }
};
# 31 "../Level1/ErrorSystemInstructions.h" 2
# 1 "../Level0/Threads.h" 1
# 33 "../Level0/Threads.h"
# 1 "../Level0/ErrorManagement.h" 1
# 34 "../Level0/Threads.h" 2
# 1 "../Level0/ExceptionHandlerDefinitions.h" 1
# 35 "../Level0/ExceptionHandlerDefinitions.h"
enum ExceptionHandlerBehaviour {

    XH_NotHandled = 0x1,

    XH_ContinueExec = 0x2,

    XH_KillThread = 0x3,

    XH_KillTask = 0x4,

    XH_TryAgain = 0x5,

    XH_TryOther = 0x6,

    XH_NoReport = 0x10000
};
# 35 "../Level0/Threads.h" 2
# 1 "../Level0/ThreadInitialisationInterface.h" 1
# 33 "../Level0/ThreadInitialisationInterface.h"
# 1 "../Level0/EventSem.h" 1
# 39 "../Level0/EventSem.h"
# 1 "../Level0/SemCore.h" 1
# 40 "../Level0/SemCore.h"
class SemCore {
protected:

    intptr semH;
public:

    void Init(){
        semH = (intptr)0;
    }

    void Init(intptr s){
        semH = s;
    }

    SemCore(intptr s){
        Init(s);
    }

    SemCore(){
        Init();
    }

    void operator=(SemCore &s){
        semH = s.semH;
    }


    inline intptr Handle(){
        return semH;
    }
# 86 "../Level0/SemCore.h"
};
# 97 "../Level0/SemCore.h"
extern "C" {

    void SemNameDataBaseErase();


    void SemNameDataBaseList();


    void SemNameDataBaseAdd(int id, char *name,void *data=__null);


    int SemNameDataBaseUseExisting2(char *name,void *&data);


    int SemNameDataBaseUseExisting(char *name);





    bool SemNameDataBaseDelete(int id);

}
# 40 "../Level0/EventSem.h" 2






class PrivateEventSemStruct{

    pthread_mutex_t mutexHandle;


    pthread_mutexattr_t mutexAttributes;


    pthread_cond_t eventVariable;


    bool stop;

public:

    PrivateEventSemStruct(){
 stop = (1==1);
    }

    ~PrivateEventSemStruct(){}

    bool Init(){
 stop = (1==1);
        if (pthread_mutexattr_init(&mutexAttributes) != 0) return (1==0);
        if (pthread_mutex_init(&mutexHandle,&mutexAttributes)!=0) return (1==0);
        if (pthread_cond_init(&eventVariable,__null)!=0) return (1==0);
        return (1==1);
    }

    bool Close(){
 Post();
        if(!pthread_mutexattr_destroy(&mutexAttributes)) return (1==0);
        if(pthread_mutex_destroy(&mutexHandle) != 0) return (1==0);
        if(pthread_cond_destroy(&eventVariable) != 0) return (1==0);
        return (1==1);
    }

    bool Wait(TimeoutType msecTimeout = TTInfiniteWait){
        if(msecTimeout == TTInfiniteWait){
            if(pthread_mutex_lock(&mutexHandle) != 0) return (1==0);
         if(stop == (1==1)){
                if(pthread_cond_wait(&eventVariable,&mutexHandle) != 0){
                     pthread_mutex_unlock(&mutexHandle);
                     return (1==0);
                }
         }
            if(pthread_mutex_unlock(&mutexHandle) != 0) return (1==0);

        }else{
# 107 "../Level0/EventSem.h"
            struct timespec timesValues;
            timeb tb;
            ftime( &tb );

            double sec = ((msecTimeout.msecTimeout + tb.millitm)*1e-3 + tb.time);

            double roundValue = floor(sec);
            timesValues.tv_sec = (int)roundValue;
            timesValues.tv_nsec = (int)((sec-roundValue)*1E9);
            if(pthread_mutex_timedlock(&mutexHandle, &timesValues) != 0) return (1==0);
         if(stop == (1==1)){
                if(pthread_cond_timedwait(&eventVariable,&mutexHandle,&timesValues) != 0){
                    pthread_mutex_unlock(&mutexHandle);
                    return (1==0);
                }
         }
            if(pthread_mutex_unlock(&mutexHandle) != 0) return (1==0);


        }

        return (1==1);
    }

    bool Post(){
 if(pthread_mutex_lock(&mutexHandle) != 0) return (1==0);
        stop = (1==0);
        if(pthread_mutex_unlock(&mutexHandle) != 0) return (1==0);
 return (pthread_cond_broadcast(&eventVariable) == 0);
    }

    bool Reset(){
 if(pthread_mutex_lock(&mutexHandle) != 0) return (1==0);
 stop = (1==1);
        if(pthread_mutex_unlock(&mutexHandle) != 0) return (1==0);
    }

};




class EventSem: public SemCore{
public:

    bool Create(){
# 176 "../Level0/EventSem.h"
        if(semH != (intptr)__null) delete (PrivateEventSemStruct *)semH;


        semH = (intptr) new PrivateEventSemStruct;



        if(semH == (intptr)__null) return (1==0);

        bool ret = ((PrivateEventSemStruct *)semH)->Init();
        if(!ret){
            delete (PrivateEventSemStruct *)semH;
            semH = (intptr)__null;
            return (1==0);
        }

        return (1==1);



    }


    bool CreateShared(const char *name){
# 231 "../Level0/EventSem.h"
        if(!Create())return (1==0);
        SemNameDataBaseAdd(semH,(char *)name);

        return (1==1);



    }


    bool OpenExisting(const char *name){
# 270 "../Level0/EventSem.h"
        int id = SemNameDataBaseUseExisting((char *)name);
        if (id == (int)0){
            CStaticAssertErrorCondition(OSError,"EventSem::OpenExisting: semaphore %s not found",name);
            return (1==0);
        }
        semH = (intptr)id;

        return (1==1);



    }


    bool Close(void){
# 317 "../Level0/EventSem.h"
        bool ret = (1==1);

        if(semH == (intptr)__null)return (1==1);
        if (SemNameDataBaseDelete((int)semH)) {
        bool ret = ((PrivateEventSemStruct *)semH)->Close();
            if (ret != (1==1)){

                ret = (1==0);
            }
        delete (PrivateEventSemStruct *)semH;
        }
        semH = (intptr)__null;

        return ret;



    }


    bool Wait(TimeoutType msecTimeout = TTInfiniteWait){
# 388 "../Level0/EventSem.h"
        if(semH == (intptr)__null)return (1==0);
        return ((PrivateEventSemStruct *)semH)->Wait(msecTimeout);

    return (1==1);



    }


    bool ResetWait(TimeoutType msecTimeout = TTInfiniteWait){
# 417 "../Level0/EventSem.h"
        Reset();
        return Wait(msecTimeout);

    return (1==1);



    }


    bool Post(void){
# 448 "../Level0/EventSem.h"
        if(semH == (intptr)__null)return (1==0);
        return (((PrivateEventSemStruct *)semH)->Post());

    return (1==1);




    }


    bool Reset(void){
# 482 "../Level0/EventSem.h"
        if(semH == (intptr)__null)return (1==0);
        return ((PrivateEventSemStruct *)semH)->Reset();

    return (1==1);

    }


    EventSem(intptr h){
        Init(h);
    }


    void operator=(EventSem &s){
        *this = s;
    }


    EventSem(){
    }


    ~EventSem(){
        Close();
    }


    inline bool fastWait(TimeoutType msecTimeout = TTInfiniteWait){
# 526 "../Level0/EventSem.h"
        return Wait(msecTimeout);



    }


    inline bool fastPost(void){
# 544 "../Level0/EventSem.h"
        return Post();

    }


    inline bool fastReset(void){
# 562 "../Level0/EventSem.h"
        return Reset();

    }
};
# 34 "../Level0/ThreadInitialisationInterface.h" 2

class ExceptionHandlerInterface;
# 45 "../Level0/ThreadInitialisationInterface.h"
typedef void (*ThreadFunctionType)(void *parameters);
# 54 "../Level0/ThreadInitialisationInterface.h"
class ThreadInitialisationInterface{
protected:

    ThreadFunctionType userThreadFunction;


    void *userData;


    const char *name;




    EventSem startThreadSynchSem;

public:

    pthread_t tid;


    pthread_t osTid;


    ThreadInitialisationInterface(){
        userThreadFunction = __null;
        userData = __null;
        name = __null;
        tid = (pthread_t) 0;
        osTid = (pthread_t) 0;
        startThreadSynchSem.Create();
        startThreadSynchSem.Reset();
    }


    ThreadInitialisationInterface(ThreadInitialisationInterface &tii){
        userThreadFunction = tii.userThreadFunction;
        userData = tii.userData;
        name = MEMORYStrDup(tii.name);
        tid = tii.tid;
        osTid = tii.osTid;
    }


    void operator=(ThreadInitialisationInterface &tii){
        userThreadFunction = tii.userThreadFunction;
        userData = tii.userData;
        name = MEMORYStrDup(tii.name);
        tid = tii.tid;
        osTid = tii.osTid;
    }





    ThreadInitialisationInterface(ThreadFunctionType userThreadFunction,void *userData,const char *name){
        this->userThreadFunction = userThreadFunction;
        this->userData = userData ;
        if (name != __null){
            this->name = MEMORYStrDup(name);
        } else {
            this->name = MEMORYStrDup("Unknown");
        }
        tid = (pthread_t) 0;
        osTid = (pthread_t) 0;
        startThreadSynchSem.Create();
        startThreadSynchSem.Reset();
    }


    virtual ~ThreadInitialisationInterface(){
        MEMORYFree((void *&)name);
        startThreadSynchSem.Close();
    };


    virtual void UserThreadFunction(){
        if (userThreadFunction != __null)
            userThreadFunction(userData);
    }




    virtual const char *GetThreadName(){
        return name;
    }




    bool ExceptionProtectedExecute(ThreadFunctionType userFunction,void *userData, ExceptionHandlerInterface *eh){
        userFunction(userData);
        return (1==1);
    }




    inline void ThreadWait(){
        startThreadSynchSem.Wait();
    }




    inline void ThreadPost(){
        startThreadSynchSem.Post();
    }
};







typedef ThreadInitialisationInterface * (*ThreadInitialisationInterfaceConstructorType)(
    ThreadFunctionType userFunction,
    void *userData,
    const char *threadName,
    ExceptionHandlerBehaviour exceptionHandlerBehaviour);
# 36 "../Level0/Threads.h" 2
# 1 "../Level0/ProcessorType.h" 1
# 35 "../Level0/ProcessorType.h"
extern "C"
{
    uint32 ProcessorTypeGetDefaultCPUs();
    void ProcessorTypeSetDefaultCPUs(uint32 defaultMask);
}

class ProcessorType{
public:

    uint32 processorMask;


    static uint32 defaultCPUs;

public:
    friend uint32 ProcessorTypeGetDefaultCPUs();
    friend void ProcessorTypeSetDefaultCPUs(uint32 mask);





    ProcessorType(const uint32 cpuMask = 0xFE){
        processorMask = cpuMask;
    }

    ProcessorType(const ProcessorType &pt){
        processorMask = pt.processorMask;
    }



    void SetMask(const uint32 mask){
        processorMask = mask;
    }

    void AddCPU(const uint32 cpuNumber){
        processorMask |= (1 << (cpuNumber - 1));
    }

    void operator=(const uint32 cpuMask){
        processorMask = cpuMask;
    }

    void operator=(const ProcessorType &pt){
        processorMask = pt.processorMask;
    }

    void operator|=(const uint32 cpuMask){
        processorMask |= cpuMask;
    }

    void operator|=(const ProcessorType &pt){
        processorMask |= pt.processorMask;
    }

    bool operator==(const ProcessorType &pt){
        return processorMask == pt.processorMask;
    }

    bool operator==(const uint32 mask){
        return processorMask == mask;
    }

    bool operator!=(const ProcessorType &pt){
        return processorMask != pt.processorMask;
    }

    bool operator!=(const uint32 mask){
        return processorMask != mask;
    }

    static uint32 GetDefaultCPUs(){
        return ProcessorTypeGetDefaultCPUs();
    }

    static void SetDefaultCPUs(const uint32 mask){
        ProcessorTypeSetDefaultCPUs(mask);
    }
};




const ProcessorType PTUndefinedCPUs(0);
# 37 "../Level0/Threads.h" 2

# 1 "../Level0/ThreadsDatabase.h" 1
# 35 "../Level0/ThreadsDatabase.h"
extern "C" {





    bool TDB_NewEntry(ThreadInitialisationInterface *tii);


    ThreadInitialisationInterface * TDB_RemoveEntry();




    ThreadInitialisationInterface * TDB_GetTII(pthread_t tid=0);






    bool TDB_Lock(TimeoutType tt = TTInfiniteWait);


    bool TDB_UnLock();



    int TDB_NumberOfThreads();



    pthread_t TDB_GetThreadID(int n);



    pthread_t TDB_Find(const char *name);




    bool TDB_GetInfo(ThreadInitialisationInterface &tiiCopy,int n=-1,const char *name=__null,pthread_t tid=(pthread_t)-1);


    const char * TDB_GetName();
}
# 39 "../Level0/Threads.h" 2

class ExceptionHandlerInterface;
# 52 "../Level0/Threads.h"
enum THREAD_STATE{
    THREAD_STATE_UNKNOWN = -1,
    THREAD_STATE_READY = 1024,
    THREAD_STATE_PEND = 512,
    THREAD_STATE_SUSP = 256,
    THREAD_STATE_BLOCKED = 2,
    THREAD_STATE_SEM = 4,
    THREAD_STATE_DELAY = 8,
    THREAD_STATE_TOUT = 16,
    THREAD_STATE_RUN = 32,
    THREAD_STATE_DEAD = 64
};

extern "C"
{

    void ThreadsSetPriorityLevel(uint32 level);


    pthread_t ThreadsBeginThread(ThreadFunctionType function,void *parameters = __null,uint32 stacksize= 32768,const char *name=__null,ExceptionHandlerBehaviour exceptionHandlerBehaviour=XH_NotHandled,ProcessorType runOnCPUs=PTUndefinedCPUs);


    pthread_t ThreadsThreadId();


    pthread_t ThreadsThreadOsId();


    bool ThreadsKill(pthread_t tid);


    bool ThreadsIsAlive(pthread_t tid);


    void ThreadsSetNormalClass();


    void ThreadsSetRealTimeClass();


    void ThreadsSetIdleClass();


    void ThreadsSetHighClass();


    int32 ThreadsGetCPUs(pthread_t tid);
# 107 "../Level0/Threads.h"
    uint32 ThreadsGetState(pthread_t tid);


    int ThreadsGetPriority(pthread_t tid);


    void ThreadsSetInitialisationInterfaceConstructor(ThreadInitialisationInterfaceConstructorType threadInitialisationInterfaceConstructor);


    ThreadInitialisationInterface *ThreadsGetInitialisationInterface();


    bool ThreadProtectedExecute(ThreadFunctionType userFunction,void *userData, ExceptionHandlerInterface *eh);




    const char *GetHttpRelayURL();



    const char *GetProcessName();



    const char *GetLoggerServerURL();


    void SetLoggerServerURL(const char *url);

}
# 146 "../Level0/Threads.h"
ThreadInitialisationInterface * DefaultThreadInitialisationInterfaceConstructor(
    ThreadFunctionType userThreadFunction,
    void *userData,
    const char *threadName,
    ExceptionHandlerBehaviour exceptionHandlerBehaviour);


extern ThreadInitialisationInterfaceConstructorType threadInitialisationInterfaceConstructor;




class Threads {
public:

    friend void ThreadsSetInitialisationInterfaceConstructor(ThreadInitialisationInterfaceConstructorType tiic);
    friend void ThreadsSetPriorityLevel(uint32 level);
    friend pthread_t ThreadsBeginThread(ThreadFunctionType function,void *parameters,uint32 stacksize,const char *name,ExceptionHandlerBehaviour exceptionHandlerBehaviour,ProcessorType runOnCPUs);
    friend pthread_t ThreadsThreadId();
    friend bool ThreadsKill(pthread_t tid);
    friend bool ThreadsIsAlive(pthread_t tid);
    friend void ThreadsSetNormalClass();
    friend void ThreadsSetRealTimeClass();
    friend void ThreadsSetIdleClass();
    friend void ThreadsSetHighClass();


public:






    static void SetThreadInitialisationInterfaceConstructor(ThreadInitialisationInterfaceConstructorType tiic){
        ThreadsSetInitialisationInterfaceConstructor(tiic);
    };


    static void SetPriorityLevel(uint32 level){
        ThreadsSetPriorityLevel(level);
    }


    static void EndThread(){
        CStaticAssertErrorCondition(Warning,"thread %s (0x%x) terminating via EndThread. Some memory will not be deallocated",GetName(),ThreadId());







        pthread_exit(0);

    }
# 217 "../Level0/Threads.h"
    static pthread_t BeginThread(ThreadFunctionType function,void *parameters = __null,uint32 stacksize=32768,const char *name=__null,ExceptionHandlerBehaviour exceptionHandlerBehaviour=XH_NotHandled,ProcessorType runOnCPUs=PTUndefinedCPUs){
        return ThreadsBeginThread(function,parameters,stacksize,name,exceptionHandlerBehaviour,runOnCPUs);
    }


    static void SetNormalClass(){
        ThreadsSetNormalClass();
    }


    static void SetRealTimeClass(){
        ThreadsSetRealTimeClass();
    }


    static void SetIdleClass(){
        ThreadsSetIdleClass();
    }


    static void SetHighClass(){
        ThreadsSetHighClass();
    }


    static pthread_t ThreadId(){
        return ThreadsThreadId();
    }


    static bool Kill(pthread_t tid){
        return ThreadsKill(tid);
    }


    static bool IsAlive(pthread_t tid){
        return ThreadsIsAlive(tid);
    }


    static const char *GetName(){
        return TDB_GetName();
    }

};
# 32 "../Level1/ErrorSystemInstructions.h" 2
# 1 "../Level1/ErrorSystemInstructionItem.h" 1
# 42 "../Level1/ErrorSystemInstructionItem.h"
class ObjectRegistryItem;



class ErrorSystemInstructionItem: public LinkedListable {


    uint32 errorAction;


    void *object;


    const char *className;


    pthread_t tid;


    int32 errorCode;
public:


    ErrorSystemInstructionItem(uint32 errorAction,void *object,const char *className,pthread_t tid,uint32 errorCode){
        this->errorAction = errorAction;
        this->errorCode = errorCode;
        this->object = object;
        this->tid = tid;
        this->className = className;
        printf("className = %s\n", className);
    }


    uint32 ErrorAction(){ return errorAction; }


    void *Object(){ return object; }


    const char *ClassName() {
         if (className==__null) return "";
         return className;
    }


    pthread_t Tid(){ return tid; };


    int32 ErrorCode() { return errorCode; }
};
# 33 "../Level1/ErrorSystemInstructions.h" 2

class ObjectRegistryItem;







class ESISearchFilter: public SearchFilter{

    void *object;

    const char *className;

    int32 errorCode;

    pthread_t tid;
public:


    ESISearchFilter(void *object,const char *className,int32 errorCode){
        this->object = object;
        this->errorCode = errorCode;
        this->className = className;
        tid = Threads::ThreadId();
    }


    bool Test(LinkedListable *data){
        ErrorSystemInstructionItem *p= (ErrorSystemInstructionItem *)data;
        bool flag = (1==1);
        if (p->Object() != (intptr) __null) flag &= (p->Object() == object);



        if (p->Tid() != (pthread_t)0) flag &= (p->Tid() == tid);

        if (p->ErrorCode()!= (int32)(intptr) __null) flag &= (p->ErrorCode() == errorCode);
        if (p->ClassName()[0]!= 0) flag &= (strcmp(p->ClassName(),className)==0);
        return flag;
    }
};


class ESIDeleteFilter: public SearchFilter{
    void *object;
public:

    ESIDeleteFilter(void *object){ this->object = object; }


    bool Test(LinkedListable *data){
        ErrorSystemInstructionItem *p= (ErrorSystemInstructionItem *)data;
        bool flag = (1==1);
        if (p->Object() != (intptr) __null)
            flag &= (p->Object() == object);
        return flag;
    }
};


class ErrorSystemInstructions: public LinkedListHolder {


    FastPollingMutexSem mux;
public:

    uint32 SearchErrorAction(void *object,const char *className,int32 errorCode){
        mux.FastLock();
        ESISearchFilter searcher(object,className,errorCode);
        ErrorSystemInstructionItem *p= (ErrorSystemInstructionItem *)ListSearch(&searcher);
        uint32 ret = (uint32)0xffffffff;
        if (p != __null) ret = p->ErrorAction();
        mux.FastUnLock();
        return ret;
    }


    void PurgeByObject(void *object){
        mux.FastLock();
        ESIDeleteFilter remover(object);
        ListDelete(&remover);
        mux.FastUnLock();
    }
};
# 35 "../Level1/ObjectRegistryItem.h" 2
# 1 "../Level1/ClassStructure.h" 1
# 32 "../Level1/ClassStructure.h"
# 1 "../Level1/ClassStructureEntry.h" 1
# 36 "../Level1/ClassStructureEntry.h"
const int CSE_Const = 0x1;


const int CSE_Static = 0x2;



class ClassStructureEntry{
public:

    const char *type;


    const char *modif;


    int sizes[4];


    int flags;


    const char *name;


    int size;


    int pos;


    void SetUp(const char *type,const char *modif,int size0,int size1,int size2,int size3,int flags,const char *name,int size,int pos){
        this->name = name;
        this->sizes[0] = size0;
        this->sizes[1] = size1;
        this->sizes[2] = size2;
        this->sizes[3] = size3;
        this->flags = flags;
        this->type = type;
        this->modif = modif;
        this->size = size;
        this->pos = pos;
        if (this->sizes[0] <= 0){
            this->sizes[0] = 1;
        }
    }


    void Copy(ClassStructureEntry &x){
        SetUp(x.type,x.modif,x.sizes[0],x.sizes[1],x.sizes[2],x.sizes[3],x.flags,x.name,x.size,x.pos);
    }


    ClassStructureEntry(const char *type="",const char *modif="",int size0=0,int size1=0,int size2=0,int size3=0,int flags=0,const char *name="",int size=0,int pos=0){
        SetUp(type,modif,size0,size1,size2,size3,flags,name,size,pos);
    }



    ClassStructureEntry &operator=(ClassStructureEntry &x){
        Copy(x);
        return *this;
    }


    int NumberOfDimensions(){
        int ix = 0;
        while ((ix < 4) && (sizes[ix]>0))ix++;
        return ix;
    }

};
# 33 "../Level1/ClassStructure.h" 2



typedef int CSFlags;


const CSFlags CSF_HasVirtual = 0x1;


const CSFlags CSF_BasicType = 0x2;

class ClassStructureEntry;



class ClassStructure{
public:


    CSFlags flags;

private:
    union {

        struct {


            int32 btd;
        } btInfo;

        struct {

            int size;


            ClassStructureEntry **members;
        } csInfo;


    };

public:

    ClassStructure(
                const char * name,
                BasicTypeDescriptor btd)
    {
        flags = CSF_BasicType;
        btInfo.btd = btd.Value();
    }


    ClassStructure(
                const char * name,
                int size,
                CSFlags flags,
                ClassStructureEntry ** members)
    {
        this->flags = flags;
        csInfo.size = size;
        csInfo.members = members;
    }


    ~ClassStructure(){
        csInfo.members = __null;
    }


    int32 Size() const {
        if ((flags & CSF_BasicType)==0) return csInfo.size;
        BasicTypeDescriptor btd(btInfo.btd);
        return btd.ByteSize();
    }


    ClassStructureEntry **Members() const {
        if ((flags & CSF_BasicType)==0) return csInfo.members;
        return __null;
    }


    bool IsBasicType(BasicTypeDescriptor &btd){
        if((flags & CSF_BasicType) == 0) return (1==0);
        BasicTypeDescriptor btd2(btInfo.btd);
        btd = btd2;
        return (1==1);
    }
};
# 36 "../Level1/ObjectRegistryItem.h" 2
# 1 "../Level0/LoadableLibrary.h" 1
# 43 "../Level0/LoadableLibrary.h"
class LoadableLibrary{
private:
# 53 "../Level0/LoadableLibrary.h"
    void * module;
# 88 "../Level0/LoadableLibrary.h"
public:

    LoadableLibrary(){





        module = __null;


    }


    ~LoadableLibrary(){


    }
# 116 "../Level0/LoadableLibrary.h"
    bool Open(const char *dllName){
# 125 "../Level0/LoadableLibrary.h"
        if (module != 0) Close();

        module = dlopen(dllName, 0x00002|0x00100);
        if (module==__null) return (1==0);
        return (1==1);
# 160 "../Level0/LoadableLibrary.h"
    }






    void Close(){






        if (module == 0) return ;

        dlclose(module);
# 192 "../Level0/LoadableLibrary.h"
    }



    void *Function(const char *name){
        if (name == __null) return __null;







        if((module == __null) ||(name == __null)) return __null;
        return dlsym(module, name);
# 219 "../Level0/LoadableLibrary.h"
    }



    void *operator[](const char *name){
        return Function(name);
    }

};
# 37 "../Level1/ObjectRegistryItem.h" 2


class Object;


typedef Object *(ObjectBuildFn )();


class ObjectTools {
public:

    ObjectBuildFn *buildFn;


    ObjectTools(ObjectBuildFn *buildFn ){
        this->buildFn = buildFn;
    }
};

extern "C" {

    uint32 NameToClassId(const char *name);

    void ORIInit(ObjectRegistryItem *ori);

    void ORISetup(ObjectRegistryItem *ori,
                    const char *className,
                    const char *version,
                    const char *defaultExtension,
                    uint32 defaultFlags,
                    ObjectTools *tools);

    void ORISetupStructure(ObjectRegistryItem *ori,
                    const char *className,
                    ClassStructure *structure);

    void ORIFinish(ObjectRegistryItem *ori);

}


class ObjectRegistryItem: public LinkedListable {

    friend void ORIInit(ObjectRegistryItem *ori);

    friend void ORISetup(ObjectRegistryItem *ori,
                    const char *className,
                    const char *version,
                    const char *defaultExtension,
                    uint32 defaultFlags,
                    ObjectTools *tools);

    friend void ORIFinish(ObjectRegistryItem *ori);

public:

    const char * className;


    const char * defaultExtension;


    int32 objectOffset;


    uint32 defaultFlags;


    char version[8];


    uint32 classId;


    ClassStructure * structure;


    ObjectTools * tools;


    LoadableLibrary * ll;


    void Setup(const char *className,
               const char *version,
               const char *defaultExtension = __null,
               uint32 defaultFlags = 0,
               ObjectTools *tools = __null){
        ORISetup(this,className,version,defaultExtension,defaultFlags,tools);
    };


    ObjectRegistryItem(){ ORIInit(this); }

public:


    ErrorSystemInstructions classInstructions;



    ObjectRegistryItem(const char *className,
                       const char *version,
                       int objectOffset,
                       const char *defaultExtension = __null,
                       uint32 defaultFlags = 0,
                       ObjectTools *tools = __null){
        this->objectOffset = objectOffset;
        ORISetup(this,className,version,defaultExtension,defaultFlags,tools);
    }




    ObjectRegistryItem(const char *className,
                       ClassStructure *structure){
        this->objectOffset = objectOffset;
        ORISetupStructure(this,className,structure);
    }


    ~ObjectRegistryItem(){
        ORIFinish(this);
    }


    const char *ClassName() {
        return className;
    }


    intptr ClassType() {
        return (intptr)className;
    }


    const char *Version() {
        return version;
    }


    const char *DefaultExtension() {
        return defaultExtension;
    }


    const uint32 DefaultFlags() {
        return defaultFlags;
    }


    uint32 ClassId() {
        return classId;
    }


    void SetClassId(uint32 id) {
        classId = id;
    }


    ObjectTools *Tools() {
        return tools;
    }


    uint32 nOfAllocatedObjects;


    int Size(){
        if (structure == __null) return 0;
        return structure->Size();
    }


    LoadableLibrary * Library(){ return ll; }

};
# 37 "../Level1/Object.h" 2
# 1 "../Level0/StreamInterface.h" 1
# 38 "../Level0/StreamInterface.h"
const uint32 StreamableBufferingSize = 32;


class StreamInterface{
public:

    virtual ~StreamInterface(){};






    virtual bool Read(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)=0;





    virtual bool Write(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)=0;


    virtual bool CanWrite()=0;


    virtual bool CanRead()=0;



    inline bool PutC(char c)
    {
        uint32 size = 1;
        return (Write(&c, size) && (size == 1));
    }


    inline bool GetC(char &c)
    {
        uint32 size = 1;
        return (Read(&c, size) && (size == 1));
    }




    virtual int64 Size()=0;


    virtual bool Seek(int64 pos)=0;


    virtual int64 Position(void)=0;


    virtual bool SetSize(int64 size)=0;


    virtual bool CanSeek()=0;




    virtual uint32 NOfStreams()=0;


    virtual bool Switch(uint32 n)=0;


    virtual bool Switch(const char *name)=0;


    virtual uint32 SelectedStream()=0;


    virtual bool StreamName(uint32 n,char *name,int nameSize)=0;


    virtual bool AddStream(const char *name)=0;


    virtual bool RemoveStream(const char *name)=0;







    virtual bool CompleteRead(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTInfiniteWait) = 0;






    virtual bool CompleteWrite(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTInfiniteWait) = 0;






    inline bool CopyTo( StreamInterface & s,
                        int64 & size,
                        TimeoutType msecTimeout = TTInfiniteWait,
                        char * extBuffer = __null,
                        int extBufferSize = 0){
        char buffer[StreamableBufferingSize];
        if (extBuffer == __null){
            extBuffer = buffer;
            extBufferSize = StreamableBufferingSize;
        }
        int64 left = size;
        while(left > 0){
            uint32 toRead = extBufferSize;
            if (toRead > left) toRead = left;
            CompleteRead(extBuffer,toRead,msecTimeout);
            if (!s.CompleteWrite(extBuffer,toRead,msecTimeout)){
                size = size - left + toRead;
                return (1==0);
            }
            left = left - toRead;

            if (toRead == 0){
                size = size - left;
                if (msecTimeout == TTInfiniteWait) return (1==1);
                return (1==0);
            }
        }
        return (1==1);
    }
# 204 "../Level0/StreamInterface.h"
    inline bool Printf(const char *format,...){
        if (format==__null) return (1==0);

        va_list argList;
        __builtin_va_start(argList,format);
        bool ret = VPrintf(format,argList);
        __builtin_va_end(argList);

        return ret;
    }



    inline bool SSPrintf(uint32 streamNo,const char *format,...){
        if (format==__null) return (1==0);

        uint32 save = SelectedStream();
        bool ret = (1==0);
        if (Switch(streamNo)){
            va_list argList;
            __builtin_va_start(argList,format);
            ret = VPrintf(format,argList);
            __builtin_va_end(argList);
        }
        Switch(save);
        return ret;
    }


    inline bool SSPrintf(const char *streamName,const char *format,...){
        if (format==__null) return (1==0);

        uint32 save = SelectedStream();
        bool ret = (1==0);

        AddStream(streamName);
        if (Switch(streamName)){
            va_list argList;
            __builtin_va_start(argList,format);
            ret = VPrintf(format,argList);
            __builtin_va_end(argList);
        }
        Switch(save);
        return ret;
    }




    virtual bool VPrintf(const char *format,va_list argList)=0;







    virtual bool GetToken( char * buffer,
                                const char * terminator,
                                uint32 maxSize,
                                char * saveTerminator=__null,
                                const char * skipCharacters=__null)=0;
# 278 "../Level0/StreamInterface.h"
    virtual bool GetToken(
                                StreamInterface & output,
                                const char * terminator,
                                char * saveTerminator=__null,
                                const char * skipCharacters=__null)=0;


    virtual bool GetLine(char *buffer,uint32 maxSize,bool skipTerminators=(1==1)){
        const char *skip = "\r";



        if (!skipTerminators) skip = "";

        return GetToken(buffer,"\n",maxSize,__null,skip);
    }


    virtual bool GetLine(StreamInterface &output,bool skipTerminators=(1==1)){
        const char *skip = "\r";



        if (!skipTerminators) skip = "";

        return GetToken(output,"\n",__null,skip);
    }



    virtual bool SkipTokens(uint32 count,const char *terminator)=0;

};
# 38 "../Level1/Object.h" 2

# 1 "../Level1/ObjectMacros.h" 1
# 35 "../Level1/ObjectMacros.h"
class ObjectRegistryItem;
# 40 "../Level1/Object.h" 2






class ErrorSystemInstructions;
class Object;
class ConfigurationDataBase;

extern "C" {


    void OBJDeleteFun(void *p,ObjectRegistryItem *info);


    void *OBJNewFun(unsigned int len,ObjectRegistryItem *info);
# 69 "../Level1/Object.h"
    void OBJSetGlobalOnErrorBehaviour(EMFErrorBehaviour behaviour);


    uint32 OBJGetGlobalErrorAction();


    void OBJSetThreadOnErrorBehaviour(EMFErrorBehaviour behaviour,int32 code);


    void OBJSetClassOnErrorBehaviour(Object &ob,EMFErrorBehaviour behaviour,int32 code);


    void OBJSetObjectOnErrorBehaviour(Object &ob,EMFErrorBehaviour behaviour,int32 code);



    ErrorSystemInstructions *OBJGetGlobalInstructions();
# 98 "../Level1/Object.h"
    void OBJEnableAllocationMonitoring();

}

extern "C" { ObjectRegistryItem *Get_private_ObjectInfo(); }


class Object {
private:

public: virtual ObjectRegistryItem *Info() const{ return Get_private_ObjectInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_ObjectInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_ObjectInfo()); } friend Object * ObjectBuildFn__ ();


public:


    virtual ~Object(){
    }


    const char *ClassName() const{
        if (Info() == __null) return __null;
        return Info()->ClassName();
    }



    uint32 ClassType(){
        if (Info() == __null) return 0;
        return Info()->ClassType();
    }



    uint32 ClassId(){
        if (Info() == __null) return 0;
        return Info()->ClassId();
    }


    const char *DefaultExtension(){
        if (Info() == __null) return __null;
        return Info()->DefaultExtension();
    }


    const uint32 DefaultFlags(){
        if (Info() == __null) return 0;
        return Info()->DefaultFlags();
    }


    const char *Version(){
        if (Info() == __null) return __null;
        return Info()->Version();
    }




    virtual bool ObjectLoadSetup(ConfigurationDataBase &cdb,StreamInterface *err){
        AssertErrorCondition(IllegalOperation,"ObjectLoadSetup is not implemented");
        return (1==0);
    }




    virtual bool ObjectSaveSetup(ConfigurationDataBase &cdb,StreamInterface *err){
        AssertErrorCondition(IllegalOperation,"ObjectSaveSetup is not implemented");
        return (1==0);
    }
# 185 "../Level1/Object.h"
    void VAssertErrorCondition(EMFErrorType errorCode,const char *errorDescription,va_list argList){
        VCAssertErrorCondition(errorCode,this,ClassName(),errorDescription,argList);
    }
# 197 "../Level1/Object.h"
    void AssertErrorCondition(EMFErrorType errorCode,const char *errorDescription=__null,...) const{
        va_list argList;
        __builtin_va_start(argList,errorDescription);
        VCAssertErrorCondition(errorCode,this,ClassName(),errorDescription,argList);
        __builtin_va_end(argList);
    }
# 212 "../Level1/Object.h"
    void ISRAssertErrorCondition(EMFErrorType errorCode,const char *errorDescription=__null,...){
        va_list argList;
        __builtin_va_start(argList,errorDescription);
        VCISRAssertErrorCondition(errorCode,this,ClassName(),errorDescription=__null,argList);
        __builtin_va_end(argList);
    }
# 232 "../Level1/Object.h"
    void AssertPlatformErrorCondition(EMFErrorType errorCode,const char *errorDescription=__null,...){
        va_list argList;
        __builtin_va_start(argList,errorDescription);
        VCAssertPlatformErrorCondition(errorCode,this,ClassName(),errorDescription,argList);
        __builtin_va_end(argList);
    }



};
# 37 "../Level1/GarbageCollectable.h" 2

class GarbageCollectable;

extern "C"{
    int32 GCDecrement(GarbageCollectable &gc);
    int32 GCIncrement(GarbageCollectable &gc);
}

class GCReference;

class GarbageCollectable{

private:

    friend class GCReference;
    friend int32 GCDecrement(GarbageCollectable &gc);
    friend int32 GCIncrement(GarbageCollectable &gc);


    template<typename T> friend class GCRTemplate;



    volatile int32 referenceCounter;


protected:


    GarbageCollectable(){referenceCounter=0;};






    int32 Increment(){
        return GCIncrement(*this);

    }


    int32 Decrement(){
        return GCDecrement(*this);

    };


    virtual GarbageCollectable* Clone() const {return __null;}

public:


    int32 NumberOfReferences() const{return referenceCounter;};




    virtual ~GarbageCollectable(){};


};
# 34 "../Level1/GCNamedObject.h" 2



class GCNamedObject;

extern "C" {

    bool GCNOObjectLoadSetup(GCNamedObject &gcno,ConfigurationDataBase &info,StreamInterface * err);


    bool GCNOObjectSaveSetup(GCNamedObject &gcno,ConfigurationDataBase &info,StreamInterface * err);
}


extern "C" { ObjectRegistryItem *Get_private_GCNamedObjectInfo(); }


class GCNamedObject: public Object, public GarbageCollectable{

public: virtual ObjectRegistryItem *Info() const{ return Get_private_GCNamedObjectInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_GCNamedObjectInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_GCNamedObjectInfo()); } friend Object * GCNamedObjectBuildFn__ ();

    friend bool GCNOObjectLoadSetup(GCNamedObject &gcno,ConfigurationDataBase &info,StreamInterface * err);
    friend bool GCNOObjectSaveSetup(GCNamedObject &gcno,ConfigurationDataBase &info,StreamInterface * err);

private:


    const char * name;

public:

    GCNamedObject(){
        name = MEMORYStrDup("");
    }


    virtual ~GCNamedObject(){
        if (name != __null) {
            MEMORYFree ((void *&)name);
        }
    }


    const char *Name()const{
        return name;
    }


    void SetObjectName(const char *newName){
        MEMORYFree ((void *&)name);
        if (newName == __null) name = MEMORYStrDup("");
        else name = MEMORYStrDup(newName);
    }



    void GetUniqueName(BString &name){
        char address[32];
        sprintf(address,"(%8p)",this);
        name = address;
        name += this->Name();
    }






    virtual bool ObjectLoadSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err){
        return GCNOObjectLoadSetup(*this,info,err);
    }


    virtual bool ObjectSaveSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err){
        return GCNOObjectSaveSetup(*this,info,err);
    }

};
# 44 "../Level1/CDBVirtual.h" 2


class Streamable;

extern "C" {


    int32 CDBC_SortFilterFn(LinkedListable *data1,LinkedListable *data2);


    int32 CDBC_SortNumFilterFn(LinkedListable *data1,LinkedListable *data2);
}


class CDBVirtual: public GCNamedObject{
protected:




public:


    virtual ~CDBVirtual(){};



    virtual CDBVirtual *Clone(CDBCreationMode cdbcm)=0;




    virtual void CleanUp(CDBAddressMode cdbam = CDBAM_FromRoot) = 0;


    virtual bool Lock() = 0;


    virtual void UnLock() = 0;


    virtual bool SubTreeName(Streamable &name,const char *sep = ".") = 0;


    virtual bool NodeName(BString &name) = 0;


    virtual bool NodeType(BString &name) = 0;


    virtual bool AddChildAndMove(const char *subTreeName,SortFilterFn *sorter=__null) = 0;


    virtual int NumberOfChildren()=0;





    virtual bool Move(const char *subTreeName) = 0;


    virtual bool MoveToChildren(int childNumber=0) = 0;


    virtual bool MoveToBrother(int steps = 1) = 0;


    virtual bool MoveToFather(int steps = 1) = 0;


    virtual bool CopyFrom(CDBVirtual *cdbv) = 0;


    inline bool CopyTo(CDBVirtual *cdbv){ if (cdbv ) return cdbv->CopyFrom(this); else return (1==1); }


    inline bool MoveToRoot(){ return MoveToFather(-1); }






    virtual bool FindSubTree(const char *configName,CDBAddressMode cdbam = CDBAM_None)=0;




    virtual int Size(CDBAddressMode cdbam) = 0;



    virtual int TreePosition(CDBAddressMode cdbam = CDBAM_LeafsOnly) = 0;







    virtual bool TreeMove(int index,CDBAddressMode cdbam = CDBAM_LeafsOnly) = 0;





    virtual bool GetArrayDims(int *size,int &maxDim,const char *configName,CDBArrayIndexingMode cdbaim = CDBAIM_Flexible, bool caseSensitive = (1==1)) = 0;






    virtual bool ReadArray (void *array,const CDBTYPE &valueType,const int *size,int nDim,const char *configName, bool caseSensitive = (1==1)) = 0;



    virtual bool WriteArray(const void *array,const CDBTYPE &valueType,const int *size,int nDim,const char *configName,SortFilterFn *sorter=__null) = 0;





    virtual bool Delete(const char *configName) = 0;


    virtual bool Exists(const char *configName) = 0;


    virtual bool Link(const char *linkFrom,const char *linkTo,SortFilterFn *sorter=__null) = 0;
# 183 "../Level1/CDBVirtual.h"
    virtual bool ReadFromStream(StreamInterface &stream,StreamInterface *err=__null,SortFilterFn *sorter=__null) = 0;


    virtual void EnableParserReports(bool flag) = 0;


    virtual bool WriteToStream(StreamInterface &stream,StreamInterface *err=__null,CDBWriteMode mode=CDBWM_Tree) = 0;


    virtual bool LoadFromEnvironment(char **env) = 0;


    virtual bool ReadStructure (const char *className,char *address,Streamable *err=__null) = 0;




    virtual bool WriteStructure(const char *className,char *address,const char *variableName=__null,Streamable *err=__null) = 0;



};
# 30 "../Level1/ConfigurationDataBase.h" 2
# 1 "../Level1/GCRTemplate.h" 1
# 35 "../Level1/GCRTemplate.h"
# 1 "../Level1/GCReference.h" 1
# 38 "../Level1/GCReference.h"
# 1 "../Level0/Atomic.h" 1
# 39 "../Level1/GCReference.h" 2
# 1 "../Level1/ObjectRegistryDataBase.h" 1
# 34 "../Level1/ObjectRegistryDataBase.h"
class ObjectRegistryItem;
class ClassStructure;
class ClassStructureEntry;
class Object;


extern "C" {


    void ObjectRegistryDataBaseAdd(ObjectRegistryItem *p);


    void ObjectRegistryDataBaseDelete(ObjectRegistryItem *p);



    void DisplayRegisteredClasses(StreamInterface *stream=__null,bool onlyAllocated=(1==0));


    void DisplayAllocatedObjects(StreamInterface *stream=__null);


    ObjectRegistryItem *ObjectRegistryDataBaseFind(const char *className);


    ClassStructure *ObjectRegistryDataBaseFindStructure(const char *className);


    ObjectRegistryItem *ObjectRegistryDataBaseFindByCode(uint32 classId);


    ObjectRegistryItem *ObjectRegistryDataBaseFindByExtension(const char *objectName);


    ObjectRegistryItem *ObjectRegistryDataBaseList();



    Object *OBJObjectCreateByName(const char *name);



    Object *OBJObjectCreateById(uint32 classId);

}
# 40 "../Level1/GCReference.h" 2





enum GCFlagType {


    GCFT_Recurse = 2,


    GCFT_Create = 1,


    GCFT_None = 0
};

extern "C"{

    void GCRConstructor(GCReference &gc, const char *typeName);

    bool GCRObjectLoadSetup(GCReference &gc,ConfigurationDataBase &info,StreamInterface *err,bool createOnly);

    bool GCRObjectSaveSetup(GCReference &gc,ConfigurationDataBase &info,StreamInterface *err);

}

class GCReference{

    friend void GCRConstructor(GCReference &gc, const char *typeName);

    friend bool GCRObjectLoadSetup(GCReference &gc,ConfigurationDataBase &info,StreamInterface *err,bool createOnly);

    friend bool GCRObjectSaveSetup(GCReference &gc,ConfigurationDataBase &info,StreamInterface *err);

private:



    GCReference* operator&(){
        return this;
    }


    void IncrementReference(){
        objectPointer->Increment();
    }

protected:


    GarbageCollectable* objectPointer;




protected:




    GCReference& operator=(GarbageCollectable * pointer)
    {
        RemoveReference();
        objectPointer = pointer;
        if (objectPointer == __null){
            CStaticAssertErrorCondition(FatalError,"GCReference::operator=(GCReference *p): p is NULL");
            return *this;
        }
        objectPointer->Increment();
        return *this;
    };



    GCReference(GarbageCollectable * pointer)
    {
        objectPointer = __null;
        *this = pointer;
    }

public:


    GCReference()
    {
        objectPointer = __null;
    };


    GCReference(const GCReference& object)
    {
        objectPointer = __null;
        (*this)=object;
    };


    GCReference(const char* typeName)
    {
        GCRConstructor(*this,typeName);
    };
# 152 "../Level1/GCReference.h"
    virtual bool ObjectLoadSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err,
                        bool createOnly=(1==0))
    {
        return GCRObjectLoadSetup(*this,info,err,createOnly);
    }





    virtual bool ObjectSaveSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {
        return GCRObjectSaveSetup(*this,info,err);
    }




    virtual void RemoveReference()
    {
        if (objectPointer != __null){
            int32 numberOfReferences = objectPointer->Decrement();

            if (numberOfReferences == 0){
                delete objectPointer;
            }
            else if (numberOfReferences < 0){
                CStaticAssertErrorCondition(FatalError, "GCReference::RemoveReference: The number of references is negative: %d", numberOfReferences);
            }
        }
        objectPointer = __null;
    };


    GCReference& operator=(const GCReference& reference)
    {
        RemoveReference();
        if (reference.IsValid()){
            reference.objectPointer->Increment();
            objectPointer = reference.objectPointer;
        }
        return *this;
    };


    virtual ~GCReference()
    {
        RemoveReference();
    };


    virtual bool IsValid() const
    {
        return (objectPointer != __null);
    };


    inline int32 NumberOfReferences() const {
        if (!IsValid()){
            return 0;
        }
        return objectPointer->NumberOfReferences();
    }


    inline bool operator==(const GCReference& reference) const {
        return (objectPointer == reference.objectPointer);
    }


    inline bool operator!=(const GCReference& reference) const {
        return (objectPointer != reference.objectPointer);
    }



    inline GarbageCollectable* operator->() const
    {
        return objectPointer;
    }


    inline bool Clone(const GCReference &reference){
        if (!reference.IsValid()) return (1==0);
        GarbageCollectable* tmp = reference->Clone();
        if (tmp == __null) return (1==0);

        RemoveReference();
        objectPointer = tmp;
        objectPointer->Increment();







        return GCReference::IsValid();
    }
};
# 36 "../Level1/GCRTemplate.h" 2




template<typename T>
class GCRTemplate : public GCReference{
private:



    GCRTemplate<T>* operator&(){
        return this;
    }

protected:



    T* typeTObjectPointer;


    void Init(){
        objectPointer = __null;
        typeTObjectPointer = __null;
    }


    void Load(T *p){
        Init();
        if (p != __null){
            GarbageCollectable *gc = dynamic_cast<GarbageCollectable *>(p);
            if (gc != __null){
                GCReference::operator=(gc);
                typeTObjectPointer = p;
            }
        }
    }

public:


    GCRTemplate(){
        Init();
    }



    GCRTemplate(GCFlagType create){
        Init();
        if (create == GCFT_Create){
            T *p = new T;
            if (p != __null){
                GarbageCollectable *gc;
                gc = dynamic_cast<GarbageCollectable *>(p);
                if (gc != __null){
                    GCReference::operator=(gc);
                    typeTObjectPointer = p;
                }
            }
        }
    }



    GCRTemplate(T *p){
        Load(p);
    }




    GCRTemplate(const GCReference& object){
        Init();


        (*this) = object;
    }


    GCRTemplate(const GCRTemplate<T>& object){
        Init();


        (*this) = object;
    }


    GCRTemplate(const char* typeName): GCReference(typeName){

        if (!GCReference::IsValid()){
            typeTObjectPointer = __null;
            return;
        }

        typeTObjectPointer = dynamic_cast<T*>(objectPointer);
        if (typeTObjectPointer == __null){
            GCReference::RemoveReference();
            typeTObjectPointer = __null;
            return;
        }
    }


    virtual void RemoveReference(){
        typeTObjectPointer = __null;

        GCReference::RemoveReference();
    }


    virtual ~GCRTemplate(){
        RemoveReference();
    }


    virtual bool IsValid() const {
        if (!GCReference::IsValid()) return (1==0);
        return (typeTObjectPointer != __null);
    }


    GCRTemplate<T>& operator=(const GCRTemplate<T>& reference){
        RemoveReference();
        if (reference.IsValid()){
            GCReference::operator=(reference);
            typeTObjectPointer = reference.typeTObjectPointer;
        }

        return *this;
    }


    GCRTemplate<T>& operator=(const GCReference& reference){
        RemoveReference();

        if (reference.IsValid()){

            GCReference::operator=(reference);
            typeTObjectPointer = dynamic_cast<T*>(objectPointer);
            if (typeTObjectPointer == __null){
                RemoveReference();
            }
        }

        return *this;
    }


    inline bool Clone(const GCReference& reference) {
        RemoveReference();

        if (!GCReference::Clone(reference)) return (1==0) ;

        typeTObjectPointer = dynamic_cast<T*>(objectPointer);
        if (typeTObjectPointer == __null){
            RemoveReference();
        }

        return IsValid();
    }


    inline bool Clone(const GCRTemplate<T>& reference) {
        RemoveReference();

        if (!GCReference::Clone(reference)) return (1==0) ;

        typeTObjectPointer = dynamic_cast<T*>(objectPointer);
        if (typeTObjectPointer == __null){
            RemoveReference();
        }

        return IsValid();
    }


    bool operator== (const GCRTemplate<T>& reference){
        return ((GCReference::operator==(reference)) &&
            (typeTObjectPointer == reference.typeTObjectPointer));
    }


    T* operator->()const {
        return typeTObjectPointer;
    }
# 232 "../Level1/GCRTemplate.h"
    virtual bool ObjectLoadSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err,
                        bool createOnly=(1==0)){
        GCReference gc;
        if (!gc.ObjectLoadSetup(info,err,createOnly)) return (1==0);
        *this = gc;
        return IsValid();
    }

};
# 31 "../Level1/ConfigurationDataBase.h" 2





# 1 "../Level1/CDBNull.h" 1
# 35 "../Level1/CDBNull.h"
class CDBNull: public CDBVirtual{
protected:




public:



    virtual CDBVirtual *Clone(CDBCreationMode cdbcm){ return __null;}




    virtual void CleanUp(CDBAddressMode cdbam = CDBAM_FromRoot){ }


    virtual bool Lock(){ return (1==0);}


    virtual void UnLock(){ }


    virtual bool SubTreeName(Streamable &name,const char *sep = "."){ return (1==0);}


    virtual bool NodeName(BString &name){ return (1==0);}


    virtual bool NodeType(BString &name){ return (1==0);}


    virtual bool AddChildAndMove(const char *subTreeName,SortFilterFn *sorter=__null){ return (1==0);}


    virtual int NumberOfChildren(){ return 0;}





    virtual bool Move(const char *subTreeName){ return (1==0);}


    virtual bool MoveToChildren(int childNumber=0){ return (1==0);}


    virtual bool MoveToBrother(int steps = 1){ return (1==0);}


    virtual bool MoveToFather(int steps = 1){ return (1==0);}






    virtual bool FindSubTree(const char *configName,CDBAddressMode cdbam = CDBAM_None){ return (1==0);}




    virtual int Size(CDBAddressMode cdbam){ return 0;}



    virtual int TreePosition(CDBAddressMode cdbam = CDBAM_LeafsOnly){ return 0;}







    virtual bool TreeMove(int index,CDBAddressMode cdbam = CDBAM_LeafsOnly){ return (1==0);}


    virtual bool GetArrayDims(int *size,int &maxDim,const char *configName,CDBArrayIndexingMode cdbaim = CDBAIM_Flexible, bool caseSensitive = (1==1)){ return (1==0);}



    virtual bool ReadArray (void *array,const CDBTYPE &valueType,const int *size,int nDim,const char *configName, bool caseSensitive = (1==1)){ return (1==0);}


    virtual bool WriteArray(const void *array,const CDBTYPE &valueType,const int *size,int nDim,const char *configName,SortFilterFn *sorter=__null){ return (1==0);}





    virtual bool Delete(const char *configName){ return (1==0);}


    virtual bool Exists(const char *configName){ return (1==0);}


    virtual bool Link(const char *linkFrom,const char *linkTo,SortFilterFn *sorter=__null){ return (1==0);}


    virtual bool CopyFrom(CDBVirtual *cdbv){ return (1==0); }
# 144 "../Level1/CDBNull.h"
    virtual bool ReadFromStream(StreamInterface &stream,StreamInterface *err=__null,SortFilterFn *sorter=__null){ return (1==0);}


    virtual void EnableParserReports(bool flag){ }


    virtual bool WriteToStream(StreamInterface &stream,StreamInterface *err=__null,CDBWriteMode mode=CDBWM_Tree){ return (1==0);}


    virtual bool LoadFromEnvironment(char **env){ return (1==0);}


    virtual bool ReadStructure (const char *className,char *address,Streamable *err=__null){ return (1==0);}




    virtual bool WriteStructure(const char *className,char *address,const char *variableName=__null,Streamable *err=__null){ return (1==0);}


};
# 37 "../Level1/ConfigurationDataBase.h" 2







class ConfigurationDataBase: public GCRTemplate<CDBVirtual>{



protected:


    void Load(CDBVirtual *p){
        GCRTemplate<CDBVirtual>::Load(p);
        if (!IsValid()) GCRTemplate<CDBVirtual>::Load(new CDBNull);
    }

public:
# 65 "../Level1/ConfigurationDataBase.h"
    inline void operator=(ConfigurationDataBase &base)
    {
        RemoveReference();
        if (base.IsValid()) {
            Load(base->Clone(CDBCM_CopyAddress));
        }
    }





    inline ConfigurationDataBase(ConfigurationDataBase &base,CDBCreationMode cdbcm=CDBCM_CopyAddress){
        if (base.IsValid()) {
            Load(base->Clone(cdbcm));
        }
    }


    inline ConfigurationDataBase(const char *coreClassName="CDB"):
        GCRTemplate<CDBVirtual>(coreClassName)
    {
        if (!IsValid()) GCRTemplate<CDBVirtual>::Load(new CDBNull);
    }

    inline ConfigurationDataBase(GCReference cdb,CDBCreationMode cdbcm=CDBCM_CopyAddress)
    {
        GCRTemplate<CDBVirtual> test(cdb);
        if(test.IsValid()){
            Load(test->Clone(CDBCM_CopyAddress));
        }else {
            GCRTemplate<CDBVirtual>::Load(new CDBNull);
        }
    }


    virtual ~ConfigurationDataBase(){}


    CDBVirtual *operator->(){
        return GCRTemplate<CDBVirtual>::operator->();
    }


};
# 29 "SignalArchiver.h" 2
# 1 "../Level2/CDBExtended.h" 1
# 32 "../Level2/CDBExtended.h"
# 1 "../Level1/ConfigurationDataBase.h" 1
# 33 "../Level2/CDBExtended.h" 2
# 1 "../Level2/CDBDataTypes.h" 1
# 32 "../Level2/CDBDataTypes.h"
# 1 "../Level1/CDBTypes.h" 1
# 33 "../Level2/CDBDataTypes.h" 2
# 1 "../Level2/Streamable.h" 1
# 32 "../Level2/Streamable.h"
# 1 "../Level0/CStream.h" 1
# 37 "../Level0/CStream.h"
struct CStream;

typedef void(*CStreamNewBufferFN)(CStream *p);

struct CStream{

    void * context;


    char * bufferPtr;

    uint32 sizeLeft;

    CStreamNewBufferFN NewBuffer;
};

static inline bool CPut(
                            CStream * p,
                            char c){
    if (p->sizeLeft == 0){
        p->NewBuffer(p);
        if (p->sizeLeft==0) return (1==0);
    }
    p->sizeLeft--;
    p->bufferPtr[0] = c;
    (p->bufferPtr)++;
    return (1==1);
}

static inline bool CGet(
                            CStream * p,
                            char & c){
    if (p->sizeLeft==0){
        p->NewBuffer(p);
        if (p->sizeLeft==0) return (1==0);
    }
    p->sizeLeft--;
    c = *(p->bufferPtr)++;
    return (1==1);
}

extern "C"{
    bool CRead(CStream *cs,void *buffer,uint32 &size);

    bool CWrite(CStream *cs,const void *buffer,uint32 &size);

    bool CPrintInt32(CStream *cs,int32 n,uint32 desiredSize=0,char desiredPadding=0,char mode='i');

    bool CPrintInt64(CStream *cs,int64 n,uint32 desiredSize=0,char desiredPadding=0,char mode='i');

    bool CPrintDouble(CStream *cs,double ff,int desiredSize=0,int desiredSubSize=6,char desiredPadding=0,char mode = 'f');

    bool CPrintString(CStream *cs,const char *s,uint32 desiredSize=0,char desiredPadding=0, bool rightJustify = (1==1));




    bool VCPrintf(CStream *cs,const char *format,va_list argList);

    bool CPrintf(CStream *cs,const char *format,...);

    bool CGetToken(CStream *cs,char *buffer,const char *terminator,uint32 maxSize,char *saveTerminator=__null,const char *skip=__null);

    bool CGetStringToken(CStream *cs,CStream *out,const char *terminator, int32 totalSize);

    bool CSkipTokens(CStream *cs,uint32 count,const char *terminator);

    bool CGetCStringToken(const char *&input,char *buffer,const char *terminator,uint32 maxSize);

    char *CDestructiveGetCStringToken(char *&input,const char *terminator,char *saveTerminator=__null,const char *skip="");

    bool CGetCSToken(CStream *csIn,CStream *csOut,const char *terminator,char *saveTerminator=__null,const char *skip=__null);


    int bl2_vsprintf(char *buffer,const char *format,va_list argList);


    int bl2_sprintf(char *buffer,const char *format,...);


    int bl2_vsnprintf(char *buffer,size_t size,const char *format,va_list argList);


    int bl2_snprintf(char *buffer,size_t size,const char *format,...);
}
# 33 "../Level2/Streamable.h" 2
# 1 "../Level2/CStreamBuffering.h" 1
# 32 "../Level2/CStreamBuffering.h"
struct CStream;





extern "C" {

    void CStreamBufferingReadFN(CStream *p);


    void CStreamBufferingWriteFN(CStream *p);


    void CStreamBufferingSeekFN(CStream *p);
}


class CStreamBuffering{
public:


    char * saveBuffer;


    uint32 bufferSize;


    StreamInterface * stream;


    CStream cs;


    int mode;

public:

    void ReduceSize(int bufferSize)
    {
        if (this->bufferSize > bufferSize) {
            this->bufferSize = bufferSize;
        }
    }


                        CStreamBuffering(
                            StreamInterface * stream,
                            char * buffer,
                            int bufferSize)
    {
        this->stream = stream;
        cs.bufferPtr = buffer;
        saveBuffer = buffer;
        this->bufferSize = bufferSize;
        cs.context = this;
        cs.sizeLeft = 0;
        mode = 2;
        cs.NewBuffer = CStreamBufferingReadFN;
    }


    virtual ~CStreamBuffering()
    {
        Flush();
        mode = 0;
    }


    CStream * UseAsOutput()
    {
        if (mode != 1) {
            Flush();
            mode = 1;
        }
        cs.NewBuffer = CStreamBufferingWriteFN;
        cs.sizeLeft = bufferSize;
        return &cs;
    }


    CStream * UseAsInput()
    {
        if (mode != 2) {
            Flush();
            mode = 2;
        }
        cs.NewBuffer = CStreamBufferingReadFN;
        return &cs;
    }


    void Flush()
    {
        if (stream == __null) return;
        if (mode == 1) CStreamBufferingWriteFN(&cs);
        if (mode == 2) CStreamBufferingSeekFN(&cs);
    }


    int32 RelativePosition()
    {
        if (mode == 1) return -cs.sizeLeft;
        if (mode == 2) return bufferSize-cs.sizeLeft;
        return 0;
    }
};
# 34 "../Level2/Streamable.h" 2

# 1 "../Level1/Object.h" 1
# 36 "../Level2/Streamable.h" 2
# 1 "../Level1/StreamAttributes.h" 1
# 35 "../Level1/StreamAttributes.h"
typedef enum Colours SAColours;




enum SAStreamModes{

    NormalStreamMode = 0x0000,



    ColourStreamMode = 0x0001,



    CursorStreamMode = 0x0002,



    SizeStreamMode = 0x0003,



    WindowStreamMode = 0x0004,



    FontTypeStreamMode = 0x0005,


    FontStyleStreamMode = 0x0006,



    MultiScreenSelector = 0x1000,


    HtmlTagStreamMode = 0x2000,


    NullStreamMode = 0xFFFFFFFF
};

extern "C"{
# 88 "../Level1/StreamAttributes.h"
    SAStreamModes SANameToStreamModes(const char *name);


    int SAColorsToRGB(SAColours color);

}
# 37 "../Level2/Streamable.h" 2



const uint32 NullSelectedStream = (uint32)NullStreamMode;

class Streamable;

extern "C"{

    bool StreamCompleteRead(Streamable &s,void* buffer, uint32 &size, TimeoutType msecTimeout, int32 pollMs);


    bool StreamCompleteWrite(Streamable &s,const void* buffer, uint32 &size, TimeoutType msecTimeout, int32 pollMs);
};

extern "C" { ObjectRegistryItem *Get_private_StreamableInfo(); }


class Streamable: public StreamInterface {
public: virtual ObjectRegistryItem *Info() const{ return Get_private_StreamableInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_StreamableInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_StreamableInfo()); } friend Object * StreamableBuildFn__ ();

protected:

    CStreamBuffering *csbIn;


    CStreamBuffering *csbOut;



    uint32 selectedStream;

public:

                        Streamable()
    {
        csbIn=__null;
        csbOut=__null;
        selectedStream = 0;
    }


    virtual ~Streamable(){}






    virtual bool CanRead()
    {
        return (1==0);
    }


    virtual bool CanWrite()
    {
        return (1==0);
    }

protected:


    virtual bool SSRead(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)=0;



    virtual bool SSWrite(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)=0;

public:





    virtual bool Read(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        if (selectedStream == NullSelectedStream) return (1==0);
        return SSRead(buffer,size,msecTimeout);
    }





    virtual bool Write(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        if (selectedStream == NullSelectedStream) return (1==1);
        return SSWrite(buffer,size,msecTimeout);
    };


    inline bool PutC(char c)
    {
        uint32 size = 1;
        return (Write(&c, size) && (size == 1));
    }


    inline bool GetC(char &c)
    {
        uint32 size = 1;
        return (Read(&c, size) && (size == 1));
    }







    virtual int64 Size()
    {
        return -1;
    }


    virtual bool Seek(int64 pos)
    {
        return (1==0);
    }


    virtual int64 Position(void)
    {
        return -1;
    }


    virtual bool SetSize(int64 size)
    {
        return (1==0);
    }


    virtual bool CanSeek()
    {
        return (1==0);
    }
# 197 "../Level2/Streamable.h"
    virtual uint32 NOfStreams()
    {
        return 1;
    }





    virtual bool Switch(uint32 selectedStream)
    {
        if (selectedStream >= NOfStreams() ){
            this->selectedStream = NullSelectedStream;
            return (1==0);
        }
        this->selectedStream = selectedStream;
        return (1==1);
    }





    virtual bool Switch(const char *name)
    {
        this->selectedStream = NullSelectedStream;
        return (1==1);
    }


    virtual uint32 SelectedStream()
    {
        return selectedStream;
    }


    virtual bool StreamName(
                                uint32 n,
                                char * name,
                                int nameSize)
    {



        snprintf(name,nameSize,"stream%lu",selectedStream);

        return (1==1);
    }


    virtual bool AddStream(const char *name)
    {
        return (1==0);
    }


    virtual bool RemoveStream(const char *name)
    {
        return (1==0);
    }
# 268 "../Level2/Streamable.h"
    virtual bool CompleteRead(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTInfiniteWait)

    {
        return StreamCompleteRead(*this,buffer,size,msecTimeout,0);
    }





    virtual bool CompleteWrite(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTInfiniteWait)
    {
        return StreamCompleteWrite(*this,buffer,size,msecTimeout,0);
    }
# 307 "../Level2/Streamable.h"
    virtual bool BufferedRead(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        if (csbIn == __null) return Read(buffer,size);
        return CRead(csbIn->UseAsInput(),buffer,size);
    }




    virtual bool BufferedWrite(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        if (csbOut == __null) return Write(buffer,size);
        return CWrite(csbOut->UseAsOutput(),buffer,size);
    }


    inline void Flush()
    {
        if (csbIn != __null) csbIn->Flush();
        if (csbOut != __null) csbOut->Flush();
    }
# 345 "../Level2/Streamable.h"
    inline bool VPrintf(
                                const char * format,
                                va_list argList)
    {
        if (csbOut == __null){
            char stackBuffer[StreamableBufferingSize];
            CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
            return VCPrintf(csb.UseAsOutput(),format,argList);
        }
        return VCPrintf(csbOut->UseAsOutput(),format,argList);
    }





    inline bool Print(
                                int32 n,
                                int desiredSize =0,
                                char desiredPadding =0,
                                char mode = 'i')
    {
        if (csbOut == __null){
            char stackBuffer[StreamableBufferingSize];
            CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
            return CPrintInt32(csb.UseAsOutput(),n,desiredSize,desiredPadding,mode);
        }
        return CPrintInt32(csbOut->UseAsOutput(),n,desiredSize,desiredPadding,mode);
    }



    inline bool Print(
                                double f,
                                int desiredSize =0,
                                int desiredSubSize =6,
                                char desiredPadding =0,
                                char mode = 'f')
    {
        if (csbOut == __null){
            char stackBuffer[StreamableBufferingSize];
            CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
            return CPrintDouble(csb.UseAsOutput(),f,desiredSize,desiredSubSize,desiredPadding,mode);
        }
        return CPrintDouble(csbOut->UseAsOutput(),f,desiredSize,desiredSubSize,desiredPadding,mode);
    }



    inline bool Print(
                                const char * s,
                                int desiredSize =0,
                                char desiredPadding =0)
    {
        if (csbOut == __null){
            char stackBuffer[StreamableBufferingSize];
            CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
            return CPrintString(csb.UseAsOutput(),s,desiredSize,desiredPadding);
        }
        return CPrintString(csbOut->UseAsOutput(),s,desiredSize,desiredPadding);
    }







    virtual bool GetToken(
                                char * buffer,
                                const char * terminator,
                                uint32 maxSize,
                                char * saveTerminator =__null,
                                const char * skipCharacters =__null)
    {
        if (csbIn == __null){
            if (CanSeek()){
                char stackBuffer[StreamableBufferingSize];
                CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
                return CGetToken(csb.UseAsInput(),buffer,terminator,maxSize,saveTerminator,skipCharacters);
            } else {
                char stackBuffer[1];
                CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
                return CGetToken(csb.UseAsInput(),buffer,terminator,maxSize,saveTerminator,skipCharacters);
            }
        }
        return CGetToken(csbIn->UseAsInput(),buffer,terminator,maxSize,saveTerminator,skipCharacters);
    }
# 446 "../Level2/Streamable.h"
    virtual bool GetToken(
                                StreamInterface & output,
                                const char * terminator,
                                char * saveTerminator=__null,
                                const char * skipCharacters=__null)
    {
        int bsize = StreamableBufferingSize;
        if (!CanSeek()) bsize = 1;
        if ( csbIn == __null){
            char stackBufferIn[StreamableBufferingSize];
            char stackBufferOut[StreamableBufferingSize];
            CStreamBuffering csbIn(this,stackBufferIn,bsize);
            CStreamBuffering csbOut(&output,stackBufferOut,sizeof(stackBufferOut));
            return CGetCSToken(csbIn.UseAsInput(),csbOut.UseAsOutput(),terminator,saveTerminator,skipCharacters);
        }
        char stackBufferOut[StreamableBufferingSize];
        CStreamBuffering csbOut(&output,stackBufferOut,sizeof(stackBufferOut));
        return CGetCSToken(csbIn->UseAsInput(),csbOut.UseAsOutput(),terminator,saveTerminator,skipCharacters);
    }
# 478 "../Level2/Streamable.h"
    virtual bool GetToken(
                                Streamable & output,
                                const char * terminator,
                                char * saveTerminator=__null,
                                const char * skipCharacters=__null)
    {
        int bsize = StreamableBufferingSize;
        if (!CanSeek()) bsize = 1;
        if ((csbIn == __null)&&(output.csbOut == __null)){
            char stackBufferIn[StreamableBufferingSize];
            char stackBufferOut[StreamableBufferingSize];
            CStreamBuffering csbIn(this,stackBufferIn,bsize);
            CStreamBuffering csbOut(&output,stackBufferOut,sizeof(stackBufferOut));
            return CGetCSToken(csbIn.UseAsInput(),csbOut.UseAsOutput(),terminator,saveTerminator,skipCharacters);
        }
        if (csbIn == __null){
            char stackBufferIn[StreamableBufferingSize];
            CStreamBuffering csbIn(this,stackBufferIn,bsize);
            return CGetCSToken(csbIn.UseAsInput(),output.csbOut->UseAsOutput(),terminator,saveTerminator,skipCharacters);
        }
        if (output.csbOut == __null){
            char stackBufferOut[StreamableBufferingSize];
            CStreamBuffering csbOut(&output,stackBufferOut,sizeof(stackBufferOut));
            return CGetCSToken(csbIn->UseAsInput(),csbOut.UseAsOutput(),terminator,saveTerminator,skipCharacters);
        }
        return CGetCSToken(csbIn->UseAsInput(),output.csbOut->UseAsOutput(),terminator,saveTerminator,skipCharacters);
    }







    virtual bool GetStringToken(
                                Streamable & output,
                                const char * terminator)
    {
        int bsize = StreamableBufferingSize;
        if (!CanSeek()) bsize = 1;
        if ( csbIn == __null){
            char stackBufferIn[StreamableBufferingSize];
            char stackBufferOut[StreamableBufferingSize];
            memset(stackBufferIn, 0, StreamableBufferingSize);
            CStreamBuffering csbIn(this,stackBufferIn,bsize);
            CStreamBuffering csbOut(&output,stackBufferOut,sizeof(stackBufferOut));
            return CGetStringToken(csbIn.UseAsInput(),csbOut.UseAsOutput(),terminator, Size());
        }
        char stackBufferOut[StreamableBufferingSize];
        CStreamBuffering csbOut(&output,stackBufferOut,sizeof(stackBufferOut));
        return CGetStringToken(csbIn->UseAsInput(),csbOut.UseAsOutput(),terminator, Size());
    }


    virtual bool GetLine(
                                Streamable & output,
                                bool skipTerminators =(1==1))
    {
        const char *skip = "\r";



        if (!skipTerminators) skip = "";

        return GetToken(output,"\n",__null,skip);
    }



    virtual bool SkipTokens(
                                uint32 count,
                                const char * terminator)
    {
        if (csbIn == __null){
            if (CanSeek()){
                char stackBuffer[StreamableBufferingSize];
                CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
                return CSkipTokens(csb.UseAsInput(),count,terminator);
            } else {
                char stackBuffer[1];
                CStreamBuffering csb(this,stackBuffer,sizeof(stackBuffer));
                return CSkipTokens(csb.UseAsInput(),count,terminator);
            }
        }
        return CSkipTokens(csbIn->UseAsInput(),count,terminator);
    }






    static inline bool GetCStringToken(
                                const char *& input,
                                char * buffer,
                                const char * terminator,
                                uint32 maxSize)
    {
        return CGetCStringToken(input,buffer,terminator,maxSize);
    }







    static inline char *DestructiveGetCStringToken(
                                char *& input,
                                const char * terminator,
                                char * saveTerminator =__null,
                                const char * skipCharacters ="")
    {
        return CDestructiveGetCStringToken(input,terminator,saveTerminator,skipCharacters);
    }


    virtual bool GetLine(
                                char * buffer,
                                uint32 maxSize,
                                bool skipTerminators =(1==1))
    {
        return StreamInterface::GetLine(buffer,maxSize,skipTerminators);
    }




    inline bool FindPattern(const char *pattern)
    {
        if (pattern == __null) return (1==0);
        int fullMatch = strlen(pattern);
        int match = 0;
        char c;
        while((match < fullMatch) && (GetC(c))){
            if (c == pattern[match]) match++;
            else {
                if (match > 0){
                    bool selfMatched = (1==0);
                    int step = 1;
                    while ((step <= match) && !selfMatched){
                        while ((step <= match) && (c != pattern[match-step])) step++;
                        if (step <= match){
                            int index = 0;
                            selfMatched = (1==1);
                            while((index < (match-step)) && selfMatched){
                                if (pattern[index] != pattern[index+step]) selfMatched = (1==0);
                                index++;
                            }
                        }
                    }
                    match = match - step + 1;
                }
            }
        }

        return (match==fullMatch);

    }





};
# 34 "../Level2/CDBDataTypes.h" 2
# 1 "../Level2/FString.h" 1
# 36 "../Level2/FString.h"
class FString: public BString,public Streamable {

public:


    virtual bool SSRead(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault){
        return FSRead(*this,buffer,size);
    }


    virtual bool CanRead(){
        return (1==1);
    }


    virtual bool SSWrite(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault){
        return FSWrite(*this,buffer,size);
    }



    virtual bool CanWrite(){
        return (1==1);
    }




    virtual int64 Size(){
        return size;
    }


    virtual bool Seek(int64 pos)
    {
        uint32 maxPos = Size();
        if (pos > maxPos) pos = maxPos;
        if (pos < 0) pos = 0;
        position = pos;
        return (1==1);
    }


    virtual int64 Position(void){

        if (position > Size()) position = Size();
        return position;
    }


    virtual bool SetSize(int64 size){
        if (FSAlloc(*this,size)==(1==0)) return (1==0);

        if (size < position) position = size;
        this->size = size;
        buffer[size]=0;
        return (1==1);
    }


    virtual bool CanSeek()
        { return (1==1); };




    FString(){
    }


    FString(const FString &x){
        *this = x;
    }


    FString(const char *s){
        *this = s;
    }


    virtual ~FString(){
    }



    inline bool operator=(const FString &s){
        return Copy(s);
    }


    inline bool operator=(char c){
        return Copy(c);
    }


    inline bool operator=(const char *s){
        return Copy(s);
    }


    inline bool operator=(const BString &s){
        return Copy(s);
    }


    inline bool operator+=(const char c){
        position = size;
        uint32 wsize = 1;
        char temp = c;
        return FSWrite(*this,&temp,wsize);
    }


    inline bool operator+=(const char *s){
        if (s == __null) return (1==0);
        position = size;
        uint32 wsize = strlen(s);
        return FSWrite(*this,s,wsize);
    }


    inline bool operator+=(BString &s){
        position = size;
        uint32 wsize = s.Size();
        return FSWrite(*this,s.Buffer(),wsize);
    }


    inline bool operator==(BString &s) const {
        if (size!=s.Size()) return (1==0);
        if (strcmp(buffer,s.Buffer())!=0) return (1==0);
        return (1==1);
    }


    inline bool operator==(const char *s) const {
        if (s==__null) return (1==0);
        if (strcmp(buffer,s)!=0) return (1==0);
        return (1==1);
    }

};
# 35 "../Level2/CDBDataTypes.h" 2



static const CDBTYPE CDBTYPE_FString (CDB_FString ,sizeof(FString) ,__null);




static const CDBTYPE CDBTYPE_CDBStyle (CDB_CDBStyle ,sizeof(Streamable *) ,__null);




static const CDBTYPE CDBTYPE_CDBEval (CDB_CDBEval ,sizeof(Streamable *) ,__null);

static const CDBTYPE CDBTYPE_Interpret (CDB_Interpret,sizeof(char *) ,__null);

static const CDBTYPE CDBTYPE_Content (CDB_Content ,sizeof(FString *) ,__null);


extern "C" {


    const CDBTYPE *FindCDBTYPEFromCDBDataType(BasicTypeDescriptor cdt);
}
# 34 "../Level2/CDBExtended.h" 2



class CDBExtended: public ConfigurationDataBase{



public:


    inline CDBExtended(const char *coreClassName="CDB"):
        ConfigurationDataBase(coreClassName){
    }





    inline CDBExtended(ConfigurationDataBase &base,CDBCreationMode cdbcm=CDBCM_CopyAddress):
        ConfigurationDataBase(base,cdbcm){
    }

    inline CDBExtended(GCReference cdb,CDBCreationMode cdbcm=CDBCM_CopyAddress) : ConfigurationDataBase(cdb,cdbcm){
    }


    inline void operator=(ConfigurationDataBase &base){
        ConfigurationDataBase::operator=(base);
    }
# 72 "../Level2/CDBExtended.h"
    inline bool ReadFloat(float &value,const char *configName,float defaultValue = 0,bool caseSensitive = (1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_float,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool ReadDouble(double &value,const char *configName,double defaultValue = 0,bool caseSensitive = (1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_double,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool ReadInt64(int64 &value,const char *configName,int64 defaultValue = 0,bool caseSensitive = (1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_int64,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool ReadInt32(int32 &value,const char *configName,int32 defaultValue = 0, bool caseSensitive = (1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_int32,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool ReadUint32(uint32 &value,const char *configName,uint32 defaultValue = 0,bool caseSensitive = (1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_uint32,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool ReadPointer(intptr &value,const char *configName,int32 defaultValue = 0,bool caseSensitive = (1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_Pointer,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool ReadFString(FString &value,const char *configName,const char *defaultValue = "", bool caseSensitive=(1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_FString,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool ReadBString(BString &value,const char *configName,const char *defaultValue = "", bool caseSensitive=(1==1)){
        bool ret = typeTObjectPointer->ReadArray(&value,CDBTYPE_BString,__null,0,configName,caseSensitive);
        if (!ret) value = defaultValue;
        return ret;
    }


    inline bool WriteInt32(uint32 value,const char *configName){
        return typeTObjectPointer->WriteArray(&value,CDBTYPE_int32,__null,0,configName);
    }

    inline bool WritePointer(void *value,const char *configName){
        return typeTObjectPointer->WriteArray(value,CDBTYPE_Pointer,__null,0,configName);
    }
# 148 "../Level2/CDBExtended.h"
    inline bool WriteFloat(float value,const char *configName){
        return typeTObjectPointer->WriteArray(&value,CDBTYPE_float,__null,0,configName);
    }


    inline bool WriteDouble(double value,const char *configName){
        return typeTObjectPointer->WriteArray(&value,CDBTYPE_double,__null,0,configName);
    }


    inline bool WriteString(const char *value,const char *configName){
        return typeTObjectPointer->WriteArray(&value,CDBTYPE_String,__null,0,configName);
    }


    inline bool WriteFString(FString &value,const char *configName){
        return typeTObjectPointer->WriteArray(&value,CDBTYPE_FString,__null,0,configName);
    }


    inline bool ReadFStringArray(FString *value,int *size,int nDim,const char *configName,bool caseSensitive = (1==1)){
        return typeTObjectPointer->ReadArray(value,CDBTYPE_FString,size,nDim,configName,caseSensitive);
    }


    inline bool ReadBStringArray(BString *value,int *size,int nDim,const char *configName,bool caseSensitive = (1==1)){
        return typeTObjectPointer->ReadArray(value,CDBTYPE_BString,size,nDim,configName,caseSensitive);
    }


    inline bool WriteFStringArray(const FString *value,int *size,int nDim,const char *configName){
        return typeTObjectPointer->WriteArray(value,CDBTYPE_FString,size,nDim,configName);
    }


    inline bool WriteBStringArray(const BString *value,int *size,int nDim,const char *configName){
        return typeTObjectPointer->WriteArray(value,CDBTYPE_BString,size,nDim,configName);
    }


    inline bool ReadFloatArray(float *value,int *size,int nDim,const char *configName,bool caseSensitive = (1==1)){
        return typeTObjectPointer->ReadArray(value,CDBTYPE_float,size,nDim,configName,caseSensitive);
    }


    inline bool WriteFloatArray(const float *value,int *size,int nDim,const char *configName){
        return typeTObjectPointer->WriteArray(value,CDBTYPE_float,size,nDim,configName);
    }


    inline bool ReadDoubleArray(double *value,int *size,int nDim,const char *configName,bool caseSensitive = (1==1)){
        return typeTObjectPointer->ReadArray(value,CDBTYPE_double,size,nDim,configName,caseSensitive);
    }


    inline bool WriteDoubleArray(const double *value,int *size,int nDim,const char *configName){
        return typeTObjectPointer->WriteArray(value,CDBTYPE_double,size,nDim,configName);
    }


    inline bool ReadInt32Array(int32 *value,int *size,int nDim,const char *configName,bool caseSensitive = (1==1)){
        return typeTObjectPointer->ReadArray(value,CDBTYPE_int32,size,nDim,configName,caseSensitive);
    }


    inline bool ReadUint32Array(uint32 *value,int *size,int nDim,const char *configName,bool caseSensitive = (1==1)){
        return typeTObjectPointer->ReadArray(value,CDBTYPE_uint32,size,nDim,configName,caseSensitive);
    }


    inline bool ReadInt64Array(int64 *value,int *size,int nDim,const char *configName,bool caseSensitive = (1==1)){
        return typeTObjectPointer->ReadArray(value,CDBTYPE_int64,size,nDim,configName,caseSensitive);
    }


    inline bool WriteInt32Array(const int32 *value,int *size,int nDim,const char *configName){
        return typeTObjectPointer->WriteArray(value,CDBTYPE_int32,size,nDim,configName);
    }


    inline bool WriteUint32Array(const uint32 *value,int *size,int nDim,const char *configName){
        return typeTObjectPointer->WriteArray(value,CDBTYPE_uint32,size,nDim,configName);
    }



    inline bool ReadOptions(int32 &value,const char *configName,const char **identifierList,const int32 *values,int32 defaultValue,bool caseSensitive = (1==1)){
        value = defaultValue;
        FString sValue;
        bool ret = typeTObjectPointer->ReadArray(&sValue,CDBTYPE_FString,__null,0,configName,caseSensitive);
        if (!ret ) return (1==0);
        int ix = 0;
        while(identifierList[ix] != __null){
            if (sValue == identifierList[ix] ){
                value = values[ix];
                return (1==1);
            }
            ix++;
        }
        typeTObjectPointer->AssertErrorCondition(FatalError,"ReadOptions option %s not found",sValue.Buffer());
        return (1==0);
    }





    inline bool AllocateAndReadFloatArray(float *&value,int *size,int &maxDim,int maxSize,const char *configName,CDBArrayIndexingMode cdbaim = CDBAIM_Strict,bool caseSensitive = (1==1)){
        value = __null;
        if (!typeTObjectPointer->GetArrayDims(size,maxDim,configName,cdbaim)) return (1==0);
        int nOfElements = 1;
        int i;
        for (i = 0;i < maxDim;i++){
            if (size[i] > 0) nOfElements = nOfElements * size[i];
        }
        if (nOfElements > maxSize) {
            typeTObjectPointer->AssertErrorCondition(FatalError,"AllocateAndReadFloatArray: too many elements %i > %i",nOfElements,maxSize);
            return (1==0);
        }
        value = (float *)MEMORYMalloc(sizeof(float)*nOfElements);
        if (value == __null) {
            typeTObjectPointer->AssertErrorCondition(FatalError,"AllocateAndReadFloatArray: malloc(%i) failed",sizeof(float)*nOfElements);
            return (1==0);
        }
        return typeTObjectPointer->ReadArray(value,CDBTYPE_float,size,maxDim,configName,caseSensitive);
    }





    inline bool AllocateAndReadFStringArray(FString *&value,int *size,int &maxDim,int maxSize,const char *configName,CDBArrayIndexingMode cdbaim = CDBAIM_Strict,bool caseSensitive = (1==1)){
        value = __null;
        if (!typeTObjectPointer->GetArrayDims(size,maxDim,configName,cdbaim)) return (1==0);
        int nOfElements = 1;
        int i;
        for (i = 0;i < maxDim;i++){
            if (size[i] > 0) nOfElements = nOfElements * size[i];
        }
        if (nOfElements > maxSize) {
            typeTObjectPointer->AssertErrorCondition(FatalError,"AllocateAndReadFStringArray: too many elements %i > %i",nOfElements,maxSize);
            return (1==0);
        }
        value = new FString[nOfElements];
        if (value == __null) {
            typeTObjectPointer->AssertErrorCondition(FatalError,"AllocateAndReadFStringArray: new[%i] failed",nOfElements);
            return (1==0);
        }
        return typeTObjectPointer->ReadArray(value,CDBTYPE_FString,size,maxDim,configName,caseSensitive);
    }




    inline bool ReadFlags(int32 &value,const char *configName,const char **identifierList,const int32 *values,int32 defaultValue,bool caseSensitive = (1==1)){

        value = defaultValue;
        FString *flags;
        int size;
        int maxDim = 1;

        if (!AllocateAndReadFStringArray(flags,&size,maxDim,100,configName,CDBAIM_Strict,caseSensitive)){
            return (1==0);
        }

        int i;
        for (i = 0;i<size;i++){
            int ix = 0;
            while((identifierList[ix] != __null) && !(flags[i] == identifierList[ix])){
                ix++;
            }
            if (identifierList[ix] != __null){
                value |= values[ix];
            } else {
                typeTObjectPointer->AssertErrorCondition(FatalError,"ReadFlags: flag %s not found",flags[i].Buffer());
                delete[] flags;
                return (1==0);
            }
        }

        delete[] flags;

        return (1==1);
    }

};
# 30 "SignalArchiver.h" 2
# 1 "../Level5/MessageHandler.h" 1
# 32 "../Level5/MessageHandler.h"
# 1 "../Level5/MessageInterface.h" 1
# 34 "../Level5/MessageInterface.h"
# 1 "../Level5/MessageEnvelope.h" 1
# 34 "../Level5/MessageEnvelope.h"
# 1 "../Level1/GCReferenceContainer.h" 1
# 37 "../Level1/GCReferenceContainer.h"
# 1 "../Level0/MutexSem.h" 1
# 42 "../Level0/MutexSem.h"
class PrivateMutexSemStruct{

    pthread_mutex_t mutexHandle;

    pthread_mutexattr_t mutexAttributes;
public:

    PrivateMutexSemStruct(){}

    ~PrivateMutexSemStruct(){}


    bool Init(){
        if(pthread_mutexattr_init(&mutexAttributes) != 0) return (1==0);
        if(pthread_mutexattr_setprotocol(&mutexAttributes, PTHREAD_PRIO_INHERIT) != 0) return (1==0);
        if(pthread_mutexattr_settype(&mutexAttributes,PTHREAD_MUTEX_RECURSIVE)!=0) return (1==0);
        if(pthread_mutex_init(&mutexHandle,&mutexAttributes)!=0) return (1==0);
        return (1==1);
    }


    bool Close(){
        if(!pthread_mutexattr_destroy(&mutexAttributes)) return (1==0);
        if(!pthread_mutex_destroy(&mutexHandle)) return (1==0);
        return (1==1);
    }


    bool Lock(TimeoutType msecTimeout = TTInfiniteWait){
        if(msecTimeout == TTInfiniteWait){
            if(pthread_mutex_lock(&mutexHandle) != 0) return (1==0);
        }else{



            struct timespec timesValues;
            timeb tb;
            ftime( &tb );
            double sec = ((msecTimeout.msecTimeout + tb.millitm)*1e-3 + tb.time);
            double roundValue = floor(sec);
            timesValues.tv_sec = (int)roundValue;
            timesValues.tv_nsec = (int)((sec-roundValue)*1E9);
            int err = 0;
            if((err = pthread_mutex_timedlock(&mutexHandle, &timesValues)) != 0){
                return (1==0);
            }

        }
        return (1==1);
    }


    bool UnLock(){
        return (pthread_mutex_unlock(&mutexHandle)==0);
    }


    bool TryLock(){
        return (pthread_mutex_trylock(&mutexHandle)==0);
    }


};




class MutexSem: public SemCore {

public:

    bool Create(bool locked=(1==0)){
# 147 "../Level0/MutexSem.h"
    if(semH != (intptr)__null) delete (PrivateMutexSemStruct *)semH;

    semH = (intptr) new PrivateMutexSemStruct;
    if(semH == (intptr)__null) return (1==0);

    bool ret = ((PrivateMutexSemStruct *)semH)->Init();
    if(!ret){
        delete (PrivateMutexSemStruct *)semH;
        semH = (intptr)__null;
        return (1==0);
    }
    if(locked == (1==1)){
        ((PrivateMutexSemStruct *)semH)->Lock(TTInfiniteWait);
    }


    return (1==1);

    };


    bool CreateShared(bool locked,const char *name){
# 199 "../Level0/MutexSem.h"
    if(!Create(locked))return (1==0);
    SemNameDataBaseAdd(semH,(char *)name);

    return (1==1);


    };


    bool OpenExisting(const char *name){
# 245 "../Level0/MutexSem.h"
        int id = SemNameDataBaseUseExisting((char *)name);
        if (id == (int)0){
            CStaticAssertErrorCondition(OSError,"MutexSem::OpenExisting: semaphore %s not found",name);
            return (1==0);
        }
        semH = (intptr)id;

        return (1==1);




    };


    bool Close(){
# 299 "../Level0/MutexSem.h"
        if (semH==(intptr)__null) return (1==1);
        if (SemNameDataBaseDelete((int)semH)) {
        bool ret = ((PrivateMutexSemStruct *)semH)->Close();
            if (ret != (1==1)){

                return (1==0);
            }
        delete (PrivateMutexSemStruct *)semH;
        }
        semH=(intptr)__null;

        return (1==1);


    };


    bool Lock(TimeoutType msecTimeout = TTInfiniteWait){
# 359 "../Level0/MutexSem.h"
    if(semH == (intptr)__null)return (1==0);
    return ((PrivateMutexSemStruct *)semH)->Lock(msecTimeout);

    return (1==1);


    };


    bool UnLock(void){
# 391 "../Level0/MutexSem.h"
    if(semH == (intptr)__null)return (1==0);
    return ((PrivateMutexSemStruct *)semH)->UnLock();

    return (1==1);


    };


    MutexSem(intptr h){
        Init(h);

    }


    MutexSem(){

    }


    ~MutexSem(){

        Close();
    }


    inline bool FastLock(TimeoutType msecTimeout = TTInfiniteWait){
# 449 "../Level0/MutexSem.h"
    if(semH == (intptr)__null)return (1==0);
    return ((PrivateMutexSemStruct *)semH)->Lock(msecTimeout);







    }

    inline bool FastUnLock(void){
# 477 "../Level0/MutexSem.h"
    if(semH == (intptr)__null)return (1==0);
    return ((PrivateMutexSemStruct *)semH)->UnLock();





    }


    inline bool FastTryLock(){
# 504 "../Level0/MutexSem.h"
    if(semH == (intptr)__null)return (1==0);
    return ((PrivateMutexSemStruct *)semH)->TryLock();

    return (1==1);



    }

};
# 38 "../Level1/GCReferenceContainer.h" 2
# 1 "../Level1/GCRCItem.h" 1
# 38 "../Level1/GCRCItem.h"
class GCRCItem: public LinkedListable{

public:



    GCRCItem *Next();


    virtual GCReference Reference() = 0;


    virtual const char * Link() = 0;

    virtual ~GCRCItem(){};

};



class GCRCIBasic: public GCRCItem{


    GCReference gc;

public:

    bool Load(GCReference gc){
        this->gc = gc;
        return gc.IsValid();
    }


    virtual GCReference Reference(){
        return gc;
    }

    virtual const char * Link(){
        return __null;
    }

    virtual ~GCRCIBasic(){};

};

class GCRCILink;

extern "C" {

    void GCRCILReference(GCRCILink &gcrcil, GCReference &gc);

}


class GCRCILink: public GCRCItem{

friend void GCRCILReference(GCRCILink &gcrcil, GCReference &gc);

    BString objectPath;

public:

    bool Load(const char * objectPath){
        this->objectPath = objectPath;
        return (1==1);
    }


    virtual GCReference Reference(){
        GCReference gc;

        GCRCILReference(*this,gc);

        return gc;
    }

    virtual const char * Link(){
        return objectPath.Buffer();
    }


    GCRCILink(){
    }

    virtual ~GCRCILink(){};

};
# 39 "../Level1/GCReferenceContainer.h" 2
# 1 "../Level1/GCNOExtender.h" 1
# 37 "../Level1/GCNOExtender.h"
template <class T>
class GCNOExtender: public GCNamedObject, public T
{
public:

};


template <class T>
class GCNOExtender2: public GCNamedObject, public T
{
public:

    static void operator delete(void *p){
        T::operator delete(p);
    }

    static void *operator new (size_t len){
        return T::operator new(len);
    }

};
# 40 "../Level1/GCReferenceContainer.h" 2



class GCRCLister:public IteratorT<GCReference> {

    StreamInterface * stream;


    int level;
public:

    GCRCLister(StreamInterface *s = __null){
        stream = s;
        level = 0;
    }


    virtual void Do(GCReference data){
        GCRTemplate< GCNOExtender<BString> > gcnobs;
        gcnobs = data;
        if (gcnobs.IsValid()){
            if (stream == __null) printf("*%s \n",gcnobs->Buffer());
            else stream->Printf("*%s \n",gcnobs->Buffer());
            return;
        }

        GCRTemplate<GCNamedObject> ref;
        ref = data;
        if (ref.IsValid()){
            if (stream == __null) printf("%s %s \n",ref->ClassName(),ref->Name());
            else stream->Printf("%s %s \n",ref->ClassName(),ref->Name());
        }
    }


    virtual void Do2(GCReference data,SFTestType mode){
        if (mode == SFTTBack) level--;
        else
        if (mode == SFTTRecurse) level++;
        else {
            for (int i = 0;i < level;i++){
                if (stream == __null) printf("    ");
                else stream->Printf("    ");
            }
            GCRTemplate< GCNOExtender<BString> > gcnobs;
            gcnobs = data;
            if (gcnobs.IsValid()){
                if (stream == __null) printf("*%s \n",gcnobs->Buffer());
                else stream->Printf("*%s \n",gcnobs->Buffer());
                return;
            }
            GCRTemplate<GCNamedObject> ref;
            ref = data;
            if (ref.IsValid()){
                if (stream == __null) printf("%s %s \n",ref->ClassName(),ref->Name());
                else stream->Printf("%s %s \n",ref->ClassName(),ref->Name());
            }
        }
    }
};

class GCReferenceContainer;

extern "C" {
# 124 "../Level1/GCReferenceContainer.h"
    bool GCRCFind( GCReferenceContainer & gcrc,
                                GCReference & gc,
                                const char * name = __null,
                                SearchFilterT<GCReference> * selector = __null,
                                int index = -1,
                                bool remove = (1==0),
                                bool recurse = (1==0),
                                const char ** unMatched = __null);


    bool GCRCObjectLoadSetup(GCReferenceContainer &gcrc,ConfigurationDataBase &info,StreamInterface *err);


    bool GCRCObjectSaveSetup(GCReferenceContainer &gcrc,ConfigurationDataBase &info,StreamInterface *err);


    bool GCRCInsert(GCReferenceContainer &gcrc,const char *objectPath,GCReference gc,int position = -1);


    bool GCRCIterate(GCReferenceContainer &gcrc,IteratorT<GCReference> * iterator,bool recurse);

}


extern "C" { ObjectRegistryItem *Get_private_GCReferenceContainerInfo(); }




class GCReferenceContainer: public GCNamedObject{

    friend bool GCRCFind(GCReferenceContainer &gcrc,GCReference &gc,const char *name,SearchFilterT<GCReference> * selector,int index,bool remove,bool recurse,const char **unMatched);

    friend bool GCRCObjectLoadSetup(GCReferenceContainer &gcrc,ConfigurationDataBase &info,StreamInterface *err);

    friend bool GCRCObjectSaveSetup(GCReferenceContainer &gcrc,ConfigurationDataBase &info,StreamInterface *err);

    friend bool GCRCInsert(GCReferenceContainer &gcrc,const char *objectPath,GCReference gc,int position);

    friend bool GCRCIterate(GCReferenceContainer &gcrc,IteratorT<GCReference> * iterator,bool recurse);

public: virtual ObjectRegistryItem *Info() const{ return Get_private_GCReferenceContainerInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_GCReferenceContainerInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_GCReferenceContainerInfo()); } friend Object * GCReferenceContainerBuildFn__ ();


    inline GCReference _Find( const char * name,
                                SearchFilterT<GCReference> * selector = __null,
                                int index = -1,
                                bool recurse = (1==0),
                                const char ** unMatched = __null){
        GCReference gc;
        GCRCFind(*this,gc,name,selector,index,(1==0),recurse,unMatched);
        return gc;
    }


    inline GCReference _Remove( const char * name,
                                SearchFilterT<GCReference> * selector = __null,
                                int index = -1,
                                bool recurse = (1==0)){
        GCReference gc;
        GCRCFind(*this,gc,name,selector,index,(1==1),recurse);
        return gc;
    }

protected:


    LinkedListHolder list;


    MutexSem mux;


    TimeoutType msecTimeout;


    LinkedListable * CreateListElement(
                        const char * objectPath,
                        GCReference gc);

public:


                                    GCReferenceContainer()
    {
        mux.Create();
        msecTimeout = TTInfiniteWait;
    }


    virtual ~GCReferenceContainer(){
        LinkedListable *p = list.List();
        list.Reset();
        while(p != __null){
            LinkedListable *q = p;
            p = p->Next();
            delete q;
        }
        msecTimeout = TTInfiniteWait;
    }


                void SetTimeout(
                        TimeoutType msecTimeout)
    {
        this->msecTimeout = msecTimeout;
    }


    virtual bool ObjectSaveSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {
        return GCRCObjectSaveSetup(*this,info,err);
    };
# 270 "../Level1/GCReferenceContainer.h"
    virtual bool ObjectLoadSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {

        return GCRCObjectLoadSetup(*this,info,err);
    }


    inline bool CleanUp()
    {
        list.CleanUp();
        return (1==1);
    }







    inline bool Insert(
                        const char * objectPath,
                        int position = -1)
    {
        GCReference dummy;
        return GCRCInsert(*this,objectPath,dummy,position);
    }




    inline bool Insert(
                        GCReference gc,
                        int position = -1)
    {
        return GCRCInsert(*this,__null,gc,position);
    }
# 322 "../Level1/GCReferenceContainer.h"
    inline GCReference Find(
                        const char * name,
                        GCFlagType recurse = GCFT_None,
                        const char ** unMatched = __null)
    {
        return _Find(name,__null,-1,(recurse==GCFT_Recurse),unMatched);
    }






    inline GCReference Find(
                        SearchFilterT<GCReference> * selector,
                        GCFlagType recurse = GCFT_None)
    {
        return _Find(__null,selector,-1,(recurse==GCFT_Recurse));
    }



    inline GCReference Find(
                        int index,
                        bool referenceAsBString = (1==0))
    {
        return _Find(__null,__null,index,referenceAsBString);
    }







    inline GCReference Remove(
                        const char * name,
                        GCFlagType recurse = GCFT_None)
    {
        return _Remove(name,__null,-1,(recurse==GCFT_Recurse));
    }


    inline GCReference Remove(
                        SearchFilterT<GCReference> * selector,
                        GCFlagType recurse = GCFT_None)
    {
        return _Remove(__null,selector,-1,(recurse==GCFT_Recurse));
    }


    inline GCReference Remove(
                        int index)
    {
        return _Remove(__null,__null,index);
    }







                bool Iterate(
                        IteratorT<GCReference> * iterator,
                        GCFlagType recurse = GCFT_None)
    {
        return GCRCIterate(*this,iterator,(recurse==GCFT_Recurse));

    }


                int Size()
    {
        return list.ListSize();
    }



    bool Lock(){
        return mux.Lock(msecTimeout);
    }

    bool Lock2(TimeoutType tt){
        return mux.Lock(tt);
    }


    bool UnLock(){
        return mux.UnLock();
    }

};
# 35 "../Level5/MessageEnvelope.h" 2

# 1 "../Level1/GCReference.h" 1
# 37 "../Level5/MessageEnvelope.h" 2
# 1 "../Level5/Message.h" 1
# 33 "../Level5/Message.h"
# 1 "../Level1/GCNamedObject.h" 1
# 34 "../Level5/Message.h" 2


# 1 "../Level5/MessageCode.h" 1
# 38 "../Level5/MessageCode.h"
class MessageCode{

    int32 code;



public:

                        MessageCode(int32 code)
    {
        this->code = code;
    }


    inline int32 Code() const
    {
        return code;
    }


    inline bool operator==(const MessageCode x) const
    {
        return code == x.code;
    }


    inline bool operator==(int32 x) const
    {
        return code == x;
    }


    inline bool operator!=(const MessageCode x) const
    {
        return code != x.code;
    }


    inline bool operator!=(int32 x) const
    {
        return code != x;
    }


    inline bool operator>(int32 x) const
    {
        return code > x;
    }


    inline bool operator>(MessageCode x) const
    {
        return code > x.code;
    }


    inline bool operator<(MessageCode x) const
    {
        return code < x.code;
    }


};




static inline MessageCode operator-(MessageCode a,MessageCode b)
{
    return MessageCode(a.Code()-b.Code());
}


static inline MessageCode operator+(MessageCode a,MessageCode b)
{
    return MessageCode(a.Code()+b.Code());
}



static const MessageCode RejectedMessage(0xFFFFFFFF);


static const MessageCode NullMessage(0x0);



static const MessageCode FinishedMessage(0x1);




static const MessageCode MenuMessage(0x1001);


static const MessageCode HttpMessage(0x1002);


static const MessageCode UserMessageCode(0x100000);


static const int MaxUserMessageCode = 0x100000;
# 37 "../Level5/Message.h" 2

class Message;

extern "C" { ObjectRegistryItem *Get_private_MessageInfo(); }

extern "C"{

    bool MSGObjectLoadSetup(Message &msg,ConfigurationDataBase &info,StreamInterface *err);

    bool MSGObjectSaveSetup(Message &msg,ConfigurationDataBase &info,StreamInterface *err);

    uint32 MSGGetUniqueId();
}


class Message: public GCReferenceContainer{
public: virtual ObjectRegistryItem *Info() const{ return Get_private_MessageInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_MessageInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_MessageInfo()); } friend Object * MessageBuildFn__ ();

    friend bool MSGObjectLoadSetup(Message &msg,ConfigurationDataBase &info,StreamInterface *err);

    friend bool MSGObjectSaveSetup(Message &msg,ConfigurationDataBase &info,StreamInterface *err);


protected:


    int32 id;


    MessageCode messageCode;


    BString content;

public:



    void Init(
                        MessageCode code,
                        const char * content )
    {
        this->messageCode = code;
        this->content = content;
    }


                    Message(): messageCode(0)
    {
        this->content = "";
        this->id = MSGGetUniqueId();
    }


    virtual ~Message()
    {
    }


    MessageCode GetMessageCode()
    {
        return messageCode;
    }


    int32 Id()
    {
        return id;
    }


    const char * Content()
    {
        return content.Buffer();
    }
# 120 "../Level5/Message.h"
    virtual bool ObjectLoadSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {
        return MSGObjectLoadSetup(*this,info,err);
    }
# 134 "../Level5/Message.h"
    virtual bool ObjectSaveSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {
        return MSGObjectSaveSetup(*this,info,err);
    }
};
# 38 "../Level5/MessageEnvelope.h" 2
# 1 "../Level5/MDRFlags.h" 1
# 32 "../Level5/MDRFlags.h"
class MDRFlags {
public:

    int flags;




    MDRFlags(int flags = 0){
        this->flags = flags;
    }




};





static inline MDRFlags operator&(MDRFlags a,MDRFlags b){
    return MDRFlags(a.flags & b.flags);
}


static inline MDRFlags operator|(MDRFlags a,MDRFlags b){
    return MDRFlags(a.flags | b.flags);
}


static inline bool operator==(MDRFlags a,MDRFlags b){
    return (a.flags == b.flags);
}


static inline bool operator!=(MDRFlags a,MDRFlags b){
    return (a.flags != b.flags);
}


static inline bool operator==(MDRFlags a,int x){
    return (a.flags == x);
}


static inline bool operator!=(MDRFlags a,int x){
    return (a.flags != x);
}


class MessageDeliveryRequest;
class MessageDispatcher;


static const MDRFlags MDRF_None(0x0);


static const MDRFlags MDRF_ReplyMask(0x3);


static const MDRFlags MDRF_ReplyNMask(0xFFFFFFFC);


static const MDRFlags MDRF_AutomaticReply(0x1);


static const MDRFlags MDRF_LateReply(0x2);


static const MDRFlags MDRF_EarlyAutomaticReply(0x1);


static const MDRFlags MDRF_LateAutomaticReply(0x3);


static const MDRFlags MDRF_NoReply(0x0);


static const MDRFlags MDRF_ManualReply(0x2);


static const MDRFlags MDRF_ReplyExpected(0x3);


static const MDRFlags MDRF_MatchPartialName(0x4);


static const MDRFlags MDRF_Reply(0x10000);


static MDRFlags MDRFFromString(const char *s){
    if (s == __null) return MDRF_NoReply;
    if (s[0] == 0) return MDRF_NoReply;

    if (strcmp(s,"NoReply")==0) return MDRF_NoReply;
    if (strcmp(s,"EarlyAutomaticReply")==0) return MDRF_EarlyAutomaticReply;
    if (strcmp(s,"LateAutomaticReply")==0) return MDRF_LateAutomaticReply;
    if (strcmp(s,"ManualReply")==0) return MDRF_ManualReply;

    return MDRF_NoReply;
}


static const char * MDRFToString(MDRFlags m){

    MDRFlags mdrf = (m & MDRF_ReplyMask) ;
    if (mdrf == MDRF_NoReply) return "NoReply";
    if (mdrf == MDRF_EarlyAutomaticReply) return "EarlyAutomaticReply";
    if (mdrf == MDRF_LateAutomaticReply) return "LateAutomaticReply";
    if (mdrf == MDRF_ManualReply) return "ManualReply";

    return "NoReply";
}
# 39 "../Level5/MessageEnvelope.h" 2
# 1 "../Level0/MuxLock.h" 1
# 33 "../Level0/MuxLock.h"
# 1 "../Level0/MutexSem.h" 1
# 34 "../Level0/MuxLock.h" 2





class MuxLock{


    MutexSem *mux;

public:

    MuxLock(){
        mux = __null;
    }


    ~MuxLock(){
        UnLock();
    }


    bool Lock(MutexSem &sem,TimeoutType msecTimeout = TTInfiniteWait){
        UnLock();
        if (sem.Lock(msecTimeout)){
            this->mux = &sem;
            return (1==1);
        }
        return (1==0);
    }


    void UnLock(){
        if (mux) mux->UnLock();
        mux = __null;
    }

};
# 40 "../Level5/MessageEnvelope.h" 2


extern "C" { ObjectRegistryItem *Get_private_MessageEnvelopeInfo(); }



class MessageEnvelope;

extern "C"{
    bool MSGEObjectLoadSetup(MessageEnvelope &msg,ConfigurationDataBase &info,StreamInterface *err);

    bool MSGEObjectSaveSetup(MessageEnvelope &msg,ConfigurationDataBase &info,StreamInterface *err);

    bool MSGEPrepareMessageEnvelope(MessageEnvelope &msg,GCRTemplate<Message>message,MDRFlags flags,const char * destination,const char *source);



    bool MSGEPrepareReply(
                        MessageEnvelope & msg,
                        GCRTemplate<MessageEnvelope> messageEnvelope,
                        GCRTemplate<Message> replyMessage,
                        MDRFlags flags,
                        int maxHistory);

}
# 74 "../Level5/MessageEnvelope.h"
class MessageEnvelope: public GCReferenceContainer{
public: virtual ObjectRegistryItem *Info() const{ return Get_private_MessageEnvelopeInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_MessageEnvelopeInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_MessageEnvelopeInfo()); } friend Object * MessageEnvelopeBuildFn__ ();



    friend bool MSGEObjectLoadSetup(MessageEnvelope &msg,ConfigurationDataBase &info,StreamInterface *err);

    friend bool MSGEObjectSaveSetup(MessageEnvelope &msg,ConfigurationDataBase &info,StreamInterface *err);

    friend bool MSGEPrepareMessageEnvelope(MessageEnvelope &msg,GCRTemplate<Message>message,MDRFlags flags,const char * destination,const char *source);

    friend bool MSGEPrepareReply(
                        MessageEnvelope & msg,
                        GCRTemplate<MessageEnvelope> messageEnvelope,
                        GCRTemplate<Message> replyMessage,
                        MDRFlags flags,
                        int maxHistory);

    friend class MessageHandler;


protected:

    BString sender;


    BString destination;


    MDRFlags flags;

public:




                                    MessageEnvelope()
    {
        sender = "None";
        destination = "None";
    }


    virtual ~MessageEnvelope()
    {
    }


    inline const char * Sender()
    {
        return sender.Buffer();
    }


    inline const char * Destination()
    {
        return destination.Buffer();
    }



    inline void SetSender(
                        GCNamedObject & sender)
    {
        if(strcmp(this->sender.Buffer(),"None")==0){
            sender.GetUniqueName(this->sender);
        }
    }



    inline void SetDestination(
                        const char * destination)
    {
        this->destination = destination;
    }






    inline bool PrepareMessageEnvelope(
                        GCRTemplate<Message> message,
                        const char * destination,
                        MDRFlags flags = MDRF_None,
                        GCNamedObject * source = __null)
    {

        MuxLock muxLock;
        if (!muxLock.Lock(mux, msecTimeout)){
           AssertErrorCondition(Timeout,"PrepareMessageEnvelope: timeout on resource sharing ");
           return (1==0);
        }
        BString sourceName;
        if(strcmp(sender.Buffer(),"None") == 0){
            if (source != __null){
                source->GetUniqueName(sourceName);
            } else {
                sourceName = "";
            }
        }else{
            sourceName = sender;
        }
        return MSGEPrepareMessageEnvelope(*this,message,flags,destination,sourceName.Buffer());
    }





    inline bool PrepareReply(
                        GCRTemplate<MessageEnvelope> messageEnvelope,
                        GCRTemplate<Message> replyMessage,
                        MDRFlags flags = MDRF_None,
                        int maxHistory = 2)
    {

        MuxLock muxLock;
        if (!muxLock.Lock(mux, msecTimeout)){
           AssertErrorCondition(Timeout,"PrepepareReply: timeout on resource sharing ");
           return (1==0);
        }
        return MSGEPrepareReply(*this,messageEnvelope,replyMessage,flags,maxHistory);
    }



    inline bool PrepareAutomaticReply(
                        GCRTemplate<MessageEnvelope> envelope)
    {
        GCRTemplate<Message> nullMessage;
        return PrepareReply(envelope,nullMessage,MDRF_Reply);
    }


    inline GCRTemplate<Message> GetMessage()
    {
        if (Size() > 0) return Find(0);
        GCRTemplate<Message> gcrtm;
        return gcrtm;
    }




    inline GCRTemplate<Message> GetOriginal(int index = 1)
    {
        if (Size() > index) return Find(index);
        GCRTemplate<Message> gcrtm;
        return gcrtm;
    }
# 241 "../Level5/MessageEnvelope.h"
    virtual bool ObjectLoadSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {
        return MSGEObjectLoadSetup(*this,info,err);
    }
# 265 "../Level5/MessageEnvelope.h"
    virtual bool ObjectSaveSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {
        return MSGEObjectSaveSetup(*this,info,err);
    }


    inline bool LateAutomaticReplyExpected() const
    {
        return ((flags & MDRF_ReplyExpected) == MDRF_LateAutomaticReply) ;
    }


    inline bool EarlyAutomaticReplyExpected() const
    {
        return ((flags & MDRF_ReplyExpected) == MDRF_EarlyAutomaticReply) ;
    }


    inline bool ManualReplyExpected() const
    {
        return ((flags & MDRF_ReplyExpected) == MDRF_ManualReply) ;
    }


    inline bool ReplyExpected() const
    {
        return ((flags & MDRF_ReplyExpected) != 0) ;
    }


    inline bool AutomaticReply() const
    {
        return ((flags & MDRF_Reply) != 0);
    }


};
# 35 "../Level5/MessageInterface.h" 2







class MessageInterface{

public:

    virtual bool ProcessMessage(GCRTemplate<MessageEnvelope> envelope)=0;


    virtual bool ProcessMessage2(GCRTemplate<MessageEnvelope> envelope,
                                        const char *subAddress){
        if (subAddress == __null) return ProcessMessage(envelope);
        return (1==0);
    }

};
# 33 "../Level5/MessageHandler.h" 2
# 1 "../Level5/MessageQueue.h" 1
# 35 "../Level5/MessageQueue.h"
# 1 "../Level0/EventSem.h" 1
# 36 "../Level5/MessageQueue.h" 2



class MessageQueue: public GCReferenceContainer {
private:

    EventSem newMessage;


    bool Lock(TimeoutType tt = TTInfiniteWait){
        return mux.Lock(tt);
    }


    bool UnLock(){
        return mux.UnLock();
    }


    bool isDying;

public:

    MessageQueue(){
        isDying = (1==0);
        newMessage.Create();
    }


    void SetObjectName(const char *name){
        GCReferenceContainer::SetObjectName(name);
    }


    virtual ~MessageQueue(){
        newMessage.Close();
    }


    bool SendMessage(GCRTemplate<MessageEnvelope> envelope, TimeoutType tt = TTInfiniteWait){
        Lock(tt);
        bool ret = Insert(envelope);
        newMessage.Post();
        UnLock();
        return ret;
    }


    GCRTemplate<MessageEnvelope> GetMessage(TimeoutType tt = TTInfiniteWait){
        GCRTemplate<MessageEnvelope> answer;
        if (Lock(tt)){
            while (Size() ==0) {
                newMessage.Reset();
                UnLock();


                if (!newMessage.Wait(tt)) return answer;
  if (isDying){
      return answer;
  }


                if (!Lock(tt)) return answer;

            }

            answer = Remove((int) 0);

            UnLock();
        }
        return answer;
    }


    int32 Size(){
        return GCReferenceContainer::Size();
    }


    void Reset(){
        isDying = (1==1);
        newMessage.Post();
    }
};
# 34 "../Level5/MessageHandler.h" 2


class MessageHandler;
class MessageEnvelope;

extern "C"{


    void MessageHandlerThreadFN(
                        void * arg);


    bool MHHandleMessage(
                        MessageHandler & mh,
                        GCRTemplate<MessageEnvelope> envelope,
                        const char * subAddress = __null);


    bool MHConstructor(
                        MessageHandler & mh);


    bool MHSendMessage(
                        GCRTemplate<MessageEnvelope> gcrtme);


    bool MHSendMessageAndWait(
                        MessageHandler & mh,
                        GCRTemplate<MessageEnvelope> message,
                        GCRTemplate<MessageEnvelope> & reply,
                        TimeoutType timeout
                    );


    bool MHSendMessageRemotely(
                        GCRTemplate<MessageEnvelope> envelope,
                        const char * serverAddress,
                        int serverPort
                    );


}




class MessageHandler: protected MessageInterface{

    friend void MessageHandlerThreadFN(
                        void * arg);

    friend bool MHHandleMessage(
                        MessageHandler & mh,
                        GCRTemplate<MessageEnvelope> envelope,
                        const char * subAddress);

    friend bool MHConstructor(
                        MessageHandler & mh);

    friend bool MHSendMessageAndWait(
                        MessageHandler & mh,
                        GCRTemplate<MessageEnvelope> message,
                        GCRTemplate<MessageEnvelope> & reply,
                        TimeoutType timeout
                    );


            void ProcessMessageQueue();

protected:



            bool immediate;


            bool keepAlive;


            GCReferenceContainer messageQueues;


            GCRTemplate<MessageQueue> messageQueue;



            pthread_t threadID;


            uint32 threadPriorityLevel;



            uint32 threadPriorityClass;


            EventSem event;


            MutexSem threadIdMutex;


            TimeoutType globalTimeout;


            TimeoutType globalDestructionTimeout;







    virtual bool ProcessMessage(
                            GCRTemplate<MessageEnvelope> envelope)
    {
        return (1==0);
    }


    void EnableReplyOnEnvelope(GCRTemplate<MessageEnvelope> envelope){
        envelope->flags = MDRF_EarlyAutomaticReply | envelope->flags;
    }


public:

                        MessageHandler()
    {
        MHConstructor(*this);
    }


    virtual ~MessageHandler()
    {
        if (threadID != (pthread_t)0){
            event.Reset();
            keepAlive = (1==0);
            messageQueue->Reset();
            if (!event.Wait(globalDestructionTimeout)){
         CStaticAssertErrorCondition(Timeout, "~MessageHandler() exited with timeout: ResetWait(TO = %i, Handle = 0x%x) = False", globalDestructionTimeout.msecTimeout, event.Handle());
                Threads::Kill(threadID);
            }
        }
    }


    inline bool HandleMessage(
                            GCRTemplate<MessageEnvelope> envelope,
                            const char * subAddress = __null)
    {

        if (subAddress){
            int l = strlen(subAddress);
            if (l == 0) subAddress = __null;
        }
        return MHHandleMessage(*this,envelope,subAddress);
    }


    inline bool SendMessageAndWait(
                            GCRTemplate<MessageEnvelope> envelope,
                            GCRTemplate<MessageEnvelope> & reply,
                            TimeoutType timeout = TTInfiniteWait
                        )
    {
        return MHSendMessageAndWait(
                        *this,
                        envelope,
                        reply,
                        timeout
                    );
    }


    static inline bool SendMessage(
                            GCRTemplate<MessageEnvelope> gcrtme
                        )
    {
        return MHSendMessage(gcrtme);
    }

};
# 31 "SignalArchiver.h" 2
# 1 "../Level4/HttpDirectoryResource.h" 1
# 34 "../Level4/HttpDirectoryResource.h"
# 1 "../Level4/HttpStream.h" 1
# 35 "../Level4/HttpStream.h"
# 1 "../Level3/StreamConfigurationDataBase.h" 1
# 33 "../Level3/StreamConfigurationDataBase.h"
# 1 "../Level2/FString.h" 1
# 34 "../Level3/StreamConfigurationDataBase.h" 2




class StreamConfigurationDataBase;

extern "C" { ObjectRegistryItem *Get_private_StreamConfigurationDataBaseInfo(); }

class StreamConfigurationDataBase: public FString{
public: virtual ObjectRegistryItem *Info() const{ return Get_private_StreamConfigurationDataBaseInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_StreamConfigurationDataBaseInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_StreamConfigurationDataBaseInfo()); } friend Object * StreamConfigurationDataBaseBuildFn__ ();

protected:

    CDBExtended cdb;


    FString configName;


    uint32 selectedStream;

public:

    void Commit(){
        if (configName.Size()==0) return;

        cdb.WriteString(this->Buffer(),configName.Buffer());
        (FString &)(*this)="";
        configName="";
    }


    StreamConfigurationDataBase(ConfigurationDataBase *cdb = __null):cdb("CDB"){
        SetCDB(cdb);
    }


    void SetCDB(ConfigurationDataBase *cdb = __null){
        configName.SetSize(0);
        if (cdb != __null) this->cdb = *cdb;
    }


    ~StreamConfigurationDataBase(){
        Commit();
    }


    CDBExtended &GetCDB(){ return cdb; }







    virtual uint32 NumberOfStreams(){
        return cdb->Size(CDBAM_LeafsOnly);
    }


    virtual bool Switch(uint32 n){
        Commit();
        configName = "";
        selectedStream = 0xFFFFFFFF;
        CDBExtended cdb2(cdb);
        if (!cdb2->MoveToChildren(n)) return (1==0);
        bool ret = cdb2.ReadFString(*this,"");
        cdb2->NodeName(configName);
        selectedStream = n;

        FString::Seek(0);
        return ret;
    }


    virtual bool Switch(const char *name){
        Commit();
        configName = name;
        CDBExtended cdb2(cdb);

        if (!cdb2->Move(name)){
            configName = "";
            selectedStream = 0xFFFFFFFF;
            return (1==0);
        }
        bool ret = cdb2.ReadFString(*this,"");


        selectedStream = cdb2->TreePosition();

        FString::Seek(0);
        return ret;
    }


    virtual uint32 SelectedStream(){
        return selectedStream;
    }



    bool AddStream(const char *name){
        Commit();
        if (!StreamConfigurationDataBase::Switch(name)){
            configName = name;
        }
        return (1==1);
    }


    virtual bool RemoveStream(const char *name){
        selectedStream = 0xFFFFFFFF;
        return cdb->Delete(name);
    }


};
# 36 "../Level4/HttpStream.h" 2

# 1 "../Level1/GCRTemplate.h" 1
# 38 "../Level4/HttpStream.h" 2
# 1 "../Level0/HRT.h" 1
# 39 "../Level4/HttpStream.h" 2
# 1 "../Level4/HttpDefinitions.h" 1
# 36 "../Level4/HttpDefinitions.h"
enum HSReadMode {
    HTTPNoContentLengthSpecified = -2
};


enum HSOperatingMode {

    HSOMWriteToString = 0x0,


    HSOMWriteToClient = 0x1,


    HSOMWriteToCDB = 0x2,


    HSOMCompleted = 0x4
};


enum HSHttpCommand {

    HSHCNone = 0,


    HSHCGet = 1,


    HSHCPut = 2,


    HSHCPost = 3,


    HSHCHead = 4,


    HSHCReply = 0x10000000,


    HSHCReplyOK = HSHCReply + 200,


    HSHCReplyAUTH = HSHCReply + 401

};


static inline HSHttpCommand GenerateReplyCode(uint32 httpErrorCode){
    return (HSHttpCommand) (httpErrorCode + (uint32)HSHCReply);
}


static inline bool IsReplyCode(HSHttpCommand hshc,uint32 &httpErrorCode){
    if (hshc < HSHCReply) return (1==0);
    httpErrorCode = (uint32)hshc - (uint32)HSHCReply;
    return (1==1);
}




static inline const char *GetErrorCodeString(int32 httpErrorCode){
    switch(httpErrorCode){
        case 200:
            return "OK";
        case 201:
            return "CREATED";
        case 202:
            return "Accepted";
        case 203:
            return "Partial Information";
        case 204:
            return "No Response";
        case 400:
            return "Bad request";
        case 401:
            return "Unauthorized";
        case 402:
            return "PaymentRequired";
        case 403:
            return "Forbidden";
        case 404:
            return "Not found";
        case 500:
            return "Internal Error";
        case 501:
            return "Not implemented";
        case 301:
            return "Moved";
        case 302:
            return "Found";
        case 303:
            return "Method";
    }
    return "Unknown code";
}
# 40 "../Level4/HttpStream.h" 2
# 1 "../Level4/HttpRealm.h" 1
# 36 "../Level4/HttpRealm.h"
class FString;

class HttpRealm{

public:



    virtual bool Validate(
                            const char * key,
                            HSHttpCommand command,
                            uint32 ipNumber) = 0;


    virtual bool DigestSecurityNeeded() = 0;


    virtual bool GetAuthenticationRequest(FString &message)= 0;


    const char * RealmName()
    {
        GCNamedObject *gcno = dynamic_cast<GCNamedObject *>(this);
        if (gcno) return gcno->Name();
        return "";
    }

};
# 41 "../Level4/HttpStream.h" 2

class HttpStream;

extern "C" {







    bool HSWriteHeader(
                            HttpStream &hs,
                            bool bodyCompleted,
                            HSHttpCommand command,
                            const char * url);

}
# 70 "../Level4/HttpStream.h"
extern "C" { ObjectRegistryItem *Get_private_HttpStreamInfo(); }
class HttpStream: public GCNamedObject, virtual public StreamConfigurationDataBase {

    public: virtual ObjectRegistryItem *Info() const{ return Get_private_HttpStreamInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_HttpStreamInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_HttpStreamInfo()); } friend Object * HttpStreamBuildFn__ ();

friend bool HSWriteHeader(
                            HttpStream &hs,
                            bool bodyCompleted,
                            HSHttpCommand command,
                            const char * url);


    bool _WriteHeader(
                            bool bodyCompleted,
                            HSHttpCommand command,
                            const char * url);

private:



    bool handlePost(const FString &contentType, FString &content);

protected:


    FString unsentReplyBody;




    Streamable * clientStream;


    EventSem bodyCompletedEvent;


public:

    HSOperatingMode operationMode;





    HSHttpCommand httpCommand;


    uint32 httpVersion;


    bool keepAlive;


    FString url;


    FString path;


    FString unMatchedUrl;


    uint32 httpErrorCode;


    int64 lastUpdateTime;


    int32 unreadInput;
public:

                        HttpStream(Streamable *clientStream);


    virtual ~HttpStream(){}


    bool ReadHeader();






    bool WriteReplyHeader(
                            bool bodyCompleted,
                            uint32 httpErrorCode = 200)
    {
        return WriteHeader(bodyCompleted,GenerateReplyCode(httpErrorCode),__null);
    }







    inline bool WriteHeader(
                            bool bodyCompleted,
                            HSHttpCommand command,
                            const char * url)
    {
        return HSWriteHeader(*this,bodyCompleted,command,url);
    }


    bool BodyCompleted();


    bool WaitForBodyCompleted(
                            TimeoutType msecTimeout);


    bool SecurityCheck(GCRTemplate<HttpRealm> realm,uint32 ipNumber);



    bool CompleteReadOperation(
                            Streamable * s = __null,
                            TimeoutType msecTimeout = TTInfiniteWait);


    double IdleTime();





    virtual bool SSRead(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault);


    virtual bool SSWrite(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault);


    virtual bool CanRead()
    {
        if (operationMode == HSOMCompleted) return (1==0);
        if (operationMode == HSOMWriteToClient) return (1==0);
        return (1==1);
    }


    virtual bool CanWrite()
    {
        if (operationMode == HSOMCompleted) return (1==0);
        return (1==1);
    }





    virtual int64 Size();



    virtual bool Seek(int64 pos) ;



    virtual int64 Position();



    virtual bool SetSize(int64 size);


    virtual bool CanSeek();
# 253 "../Level4/HttpStream.h"
    virtual uint32 NumberOfStreams();


    virtual bool Switch(uint32 n);


    virtual bool Switch(const char *name);


    virtual uint32 SelectedStream();


    virtual bool AddStream(const char *name);


    virtual bool RemoveStream(const char *name);




    int32 NumberOfInputCommands();






    bool InputCommandName(FString &name, int32 idx);






    bool InputCommandValue(FString &value, int32 idx);






    bool InputCommandValue(FString &value, const char *name);
};
# 35 "../Level4/HttpDirectoryResource.h" 2
# 1 "../Level4/HttpInterface.h" 1
# 36 "../Level4/HttpInterface.h"
class HttpInterface{

public:


            GCRTemplate<HttpRealm> realm;


            FString comment;

public:

    const char *Comment()
    {
        if (comment.Size() > 0) return comment.Buffer();
        GCNamedObject *gcno = dynamic_cast<GCNamedObject *>(this);
        if (gcno != __null) return gcno->Name();
        return "NO NAME";
    }

    virtual ~HttpInterface(){};


    GCRTemplate<HttpRealm> Realm()
    {
        return realm;
    }



    virtual bool ProcessHttpMessage(HttpStream &hStream) = 0;




    bool ObjectLoadSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){
        CDBExtended cdb(info);
        cdb.ReadFString(comment,"Comment","");
        if (cdb->Move("Realm")){
            if (!realm.ObjectLoadSetup(cdb,err)) return (1==0);
        }
        return (1==1);
    }


    bool ObjectSaveSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){
        CDBExtended cdb(info);
        if (comment.Size()>0) cdb.WriteFString(comment,"Comment");
        if (cdb->Move("Realm")){
            if (!realm.ObjectLoadSetup(cdb,err)) return (1==0);
        }
        return (1==1);
    }

};
# 36 "../Level4/HttpDirectoryResource.h" 2


extern "C" { ObjectRegistryItem *Get_private_HttpDirectoryResourceInfo(); }
class HttpDirectoryResource: public GCNamedObject,public HttpInterface{
    public: virtual ObjectRegistryItem *Info() const{ return Get_private_HttpDirectoryResourceInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_HttpDirectoryResourceInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_HttpDirectoryResourceInfo()); } friend Object * HttpDirectoryResourceBuildFn__ ();


    BString baseDir;


    BString startHtml;


    BString fileFilter;


    bool FileAction(FString &fileName,HttpStream &hstream);

public:


    virtual bool ProcessHttpMessage(HttpStream &hStream);


    HttpDirectoryResource(){
        baseDir = "c:/";
        startHtml = "index";
    }


    virtual bool ObjectSaveSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        GCNamedObject::ObjectSaveSetup(info,err);
        CDBExtended &cdbx = (CDBExtended &)info;

        cdbx.WriteString(baseDir.Buffer(),"BaseDir");
        cdbx.WriteString(startHtml.Buffer(),"StartHtml");
        cdbx.WriteString(fileFilter.Buffer(),"FileFilter");
        return HttpInterface::ObjectSaveSetup(info,err);
    }


    virtual bool ObjectLoadSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        GCNamedObject::ObjectLoadSetup(info,err);
        CDBExtended &cdbx = (CDBExtended &)info;

        cdbx.ReadBString(baseDir,"BaseDir","");
        cdbx.ReadBString(startHtml,"StartHtml","index");
        cdbx.ReadBString(fileFilter,"FileFilter","*");
        return HttpInterface::ObjectLoadSetup(info,err);
    }

};
# 32 "SignalArchiver.h" 2
# 1 "../Level5/SignalInterface.h" 1
# 35 "../Level5/SignalInterface.h"
# 1 "../Level1/BasicTypes.h" 1
# 36 "../Level5/SignalInterface.h" 2


class SignalInterface{
public:
    virtual bool CopyData(
                BasicTypeDescriptor type = BTDInt32,
                uint32 numberOfSamples = 0,
                const void * buffer = __null,
  MemoryAllocationFlags allocFlags = MEMORYStandardMemory
            ) = 0;

    virtual bool ReferData(
                BasicTypeDescriptor type = BTDInt32,
                uint32 numberOfSamples = 0,
                void * buffer = __null
            ) = 0;


    virtual uint32 NumberOfSamples() const = 0;


    virtual BasicTypeDescriptor Type() const = 0;


    virtual const void * Buffer() const = 0;
};
# 33 "SignalArchiver.h" 2
# 1 "SignalMessageInterface.h" 1
# 32 "SignalMessageInterface.h"
# 1 "../Level1/ConfigurationDataBase.h" 1
# 33 "SignalMessageInterface.h" 2



# 1 "CDBBrowserMenu.h" 1
# 32 "CDBBrowserMenu.h"
# 1 "../Level5/MenuEntry.h" 1
# 33 "../Level5/MenuEntry.h"
# 1 "../Level2/Streamable.h" 1
# 34 "../Level5/MenuEntry.h" 2


# 1 "../Level5/MessageHandler.h" 1
# 37 "../Level5/MenuEntry.h" 2
# 1 "../Level4/HttpGroupResource.h" 1
# 39 "../Level4/HttpGroupResource.h"
class HttpGroupResource;


extern "C" { ObjectRegistryItem *Get_private_HttpGroupResourceInfo(); }


class HttpGroupResource:public GCReferenceContainer,public HttpInterface {

private:
public: virtual ObjectRegistryItem *Info() const{ return Get_private_HttpGroupResourceInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_HttpGroupResourceInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_HttpGroupResourceInfo()); } friend Object * HttpGroupResourceBuildFn__ ();
public:

                            HttpGroupResource(){
    };


                            HttpGroupResource(
                const char * comment){
        this->comment = comment;
    }


    virtual bool ProcessHttpMessage(HttpStream &hStream);



    virtual bool ObjectLoadSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        bool ret = GCReferenceContainer::ObjectLoadSetup(info,err);
        ret = ret && HttpInterface::ObjectLoadSetup(info,err);
        return ret;
    }



    virtual bool ObjectSaveSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        bool ret = GCReferenceContainer::ObjectSaveSetup(info,err);
        ret = ret && HttpInterface::ObjectSaveSetup(info,err);
        return ret;
    }

};
# 38 "../Level5/MenuEntry.h" 2
# 1 "../Level5/MenuInterface.h" 1
# 32 "../Level5/MenuInterface.h"
# 1 "../Level2/Console.h" 1
# 33 "../Level2/Console.h"
# 1 "../Level0/BasicConsole.h" 1
# 34 "../Level0/BasicConsole.h"
class BasicConsole;

enum ConsoleOpeningMode{

    ConsoleDefault = 0,


    CreateNewBuffer = 1,


    PerformCharacterInput = 2,


    DisableControlBreak = 4,


    EnablePaging = 8
};


static inline ConsoleOpeningMode operator|(ConsoleOpeningMode a, ConsoleOpeningMode b){
    return (ConsoleOpeningMode )((int)a | (int)b);
}


static inline ConsoleOpeningMode operator&(ConsoleOpeningMode a, ConsoleOpeningMode b){
    return (ConsoleOpeningMode )((int)a & (int)b);
}


static inline ConsoleOpeningMode Not(ConsoleOpeningMode a){
    return (ConsoleOpeningMode )(~(int)a );
}

extern "C" {

    bool ConsoleOpen(BasicConsole &con, ConsoleOpeningMode openingMode,int numberOfColumns, int numberOfRows,TimeoutType msecTimeout = TTInfiniteWait);


    bool ConsoleShow(BasicConsole &con);


    bool ConsoleClose(BasicConsole &con);


    bool ConsoleWrite(BasicConsole &con,const void* buffer,uint32 &size,TimeoutType msecTimeout);


    bool ConsoleRead(BasicConsole &con,void* buffer,uint32 &size,TimeoutType msecTimeout);


    bool ConsoleSetTitleBar(const char *title);


    bool ConsoleSetSize(BasicConsole &con,int numberOfColumns, int numberOfRows);


    bool ConsoleGetSize(BasicConsole &con,int &numberOfColumns, int &numberOfRows);


    bool ConsoleSetWindowSize(BasicConsole &con,int numberOfColumns, int numberOfRows);


    bool ConsoleGetWindowSize(BasicConsole &con,int &numberOfColumns, int &numberOfRows);


    bool ConsoleSetCursorPosition(BasicConsole &con,int column, int row);


    bool ConsoleGetCursorPosition(BasicConsole &con,int &column, int &row);


    bool ConsoleClear(BasicConsole &con);


    bool ConsoleSetColour(BasicConsole &con,Colours foreGroundColour,Colours backGroundColour);


    bool ConsoleSwitch(BasicConsole &con,const char *name);


    bool ConsolePlotChar(BasicConsole &con,char c,Colours foreGroundColour,Colours backGroundColour,int column, int row);

}



class BasicConsole {
# 136 "../Level0/BasicConsole.h"
    struct termio originalConsoleModes;







    int32 lineCount;


    int64 lastPagingTime;


    TimeoutType msecTimeout;


    ConsoleOpeningMode openingMode;

private:

    friend bool ConsoleOpen(BasicConsole &con, ConsoleOpeningMode openingMode,int numberOfColumns, int numberOfRows,TimeoutType msecTimeout);
    friend bool ConsoleClose(BasicConsole &con);
    friend bool ConsoleShow(BasicConsole &con);
    friend bool ConsoleWrite(BasicConsole &con,const void* buffer, uint32 &size,TimeoutType msecTimeout);
    friend bool ConsoleRead(BasicConsole &con,void* buffer, uint32 &size,TimeoutType msecTimeout);
    friend bool ConsoleSetTitleBar(const char *title);
    friend bool ConsoleSetSize(BasicConsole &con,int numberOfColumns, int numberOfRows);
    friend bool ConsoleGetSize(BasicConsole &con,int &numberOfColumns, int &numberOfRows);
    friend bool ConsoleSetCursorPosition(BasicConsole &con,int column, int row);
    friend bool ConsoleSetWindowSize(BasicConsole &con,int numberOfColumns, int numberOfRows);
    friend bool ConsoleGetWindowSize(BasicConsole &con,int &numberOfColumns, int &numberOfRows);
    friend bool ConsoleGetCursorPosition(BasicConsole &con,int &column, int &row);
    friend bool ConsoleClear(BasicConsole &con);
    friend bool ConsoleSetColour(BasicConsole &con,Colours foreGroundColour,Colours backGroundColour);
    friend bool ConsoleSwitch(BasicConsole &con,const char *name);
    friend bool ConsolePlotChar(BasicConsole &con,char c,Colours foreGroundColour,Colours backGroundColour,int column, int row);


public:

                        BasicConsole(
                                ConsoleOpeningMode openingMode = ConsoleDefault,
                                int numberOfColumns = -1,
                                int numberOfRows = -1,
                                TimeoutType msecTimeout = TTInfiniteWait){
        ConsoleOpen(*this,openingMode,numberOfColumns,numberOfRows,msecTimeout);
    }


    virtual ~BasicConsole(){
        ConsoleClose(*this);
    }


    inline bool Show(){
        return ConsoleShow(*this);
    }


protected:

    inline bool Write(
                                const void* buffer,
                                uint32 & size,
                                TimeoutType msecTimeout){
        return ConsoleWrite(*this,buffer,size,msecTimeout);
    }


    inline bool Read(
                                void* buffer,
                                uint32 & size,
                                TimeoutType msecTimeout){
        return ConsoleRead(*this,buffer,size,msecTimeout);
    }

public:


    inline bool SetTitleBar(const char *title){
        return ConsoleSetTitleBar(title);
    }


    inline bool SetSize(
                                int numberOfColumns,
                                int numberOfRows){
        return ConsoleSetSize(*this,numberOfColumns, numberOfRows);
    }


    inline bool GetSize (
                                int & numberOfColumns,
                                int & numberOfRows){
        return ConsoleGetSize(*this,numberOfColumns, numberOfRows);
    }


    inline bool SetWindowSize(
                                int numberOfColumns,
                                int numberOfRows){
        return ConsoleSetWindowSize(*this,numberOfColumns,numberOfRows);
    }


    inline bool GetWindowSize(
                                int & numberOfColumns,
                                int & numberOfRows){
        return ConsoleGetWindowSize(*this,numberOfColumns,numberOfRows);
    }


    inline bool SetCursorPosition(
                                int column,
                                int row){
        return ConsoleSetCursorPosition(*this,column,row);
    }


    inline bool GetCursorPosition(
                                int & column,
                                int & row){
        return ConsoleGetCursorPosition(*this,column,row);
    }


    inline bool SetColour(
                                Colours foreGroundColour,
                                Colours backGroundColour){
        return ConsoleSetColour(*this,foreGroundColour,backGroundColour);
    }


    inline bool Clear(){
        lineCount = 0;
        return ConsoleClear(*this);
    }


    inline void SetPaging(bool enable){
        lineCount = 0;
        if(enable){
            openingMode = openingMode | EnablePaging;
        }else{
            openingMode = openingMode & Not(EnablePaging);
        }
    }



    inline bool PlotChar(
                                char c,
                                Colours foreGroundColour,
                                Colours backGroundColour,
                                int column,
                                int row){
        return ConsolePlotChar(*this,c,foreGroundColour,backGroundColour,column,row);
    }

};
# 34 "../Level2/Console.h" 2




class Console;


extern "C" {


    bool ConsoleSSWrite(Console &con,const void* buffer,uint32 &size,TimeoutType msecTimeout);


    bool ConsoleSSRead(Console &con,void* buffer,uint32 &size,TimeoutType msecTimeout);

}

extern "C" { ObjectRegistryItem *Get_private_ConsoleInfo(); }


class Console: public Streamable, public BasicConsole {

public: virtual ObjectRegistryItem *Info() const{ return Get_private_ConsoleInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_ConsoleInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_ConsoleInfo()); } friend Object * ConsoleBuildFn__ ();


    char streamBuffer[32];


    FString attribute;


    bool attributeReadMode;

private:

    friend bool ConsoleSSWrite(Console &con,const void* buffer, uint32 &size,TimeoutType msecTimeout);
    friend bool ConsoleSSRead(Console &con,void* buffer, uint32 &size,TimeoutType msecTimeout);

public:

                        Console(
                                ConsoleOpeningMode openingMode = ConsoleDefault,
                                int numberOfColumns = -1,
                                int numberOfRows = -1,
                                TimeoutType msecTimeout = TTInfiniteWait)
    {
        ConsoleOpen(*this,openingMode,numberOfColumns,numberOfRows,msecTimeout);
        selectedStream = NormalStreamMode;
        csbIn = new CStreamBuffering(this,streamBuffer,sizeof(streamBuffer));
        attributeReadMode = (1==0);
    }


    virtual ~Console(){
        ConsoleClose(*this);
        delete csbIn;
    }


    virtual bool CanWrite()
    {
        return (1==1);
    }


    virtual bool CanRead()
    {
        return (1==1);
    }

protected:

    virtual bool SSWrite(
                                const void* buffer,
                                uint32 & size,
                                TimeoutType msecTimeout = TTDefault)
    {
        if (selectedStream == 0) return BasicConsole::Write(buffer,size,msecTimeout);


        if (attributeReadMode) {
            attribute="";
            attributeReadMode = (1==0);
        }

        return attribute.Write(buffer,size,msecTimeout);
    }


    virtual bool SSRead(
                                void* buffer,
                                uint32 & size,
                                TimeoutType msecTimeout = TTDefault)
    {
        if (selectedStream == 0) return BasicConsole::Read(buffer,size,msecTimeout);
        if (attributeReadMode != (1==1)) {
            size = 0;
            return (1==0);
        }
        return attribute.Read(buffer,size,msecTimeout);
    }
public:

    inline bool Write(
                                const void* buffer,
                                uint32 & size,
                                TimeoutType msecTimeout = TTDefault)
    {
        return Streamable::Write(buffer,size,msecTimeout);
    }


    inline bool Read(
                                void* buffer,
                                uint32 & size,
                                TimeoutType msecTimeout = TTDefault)
    {
        return Streamable::Read(buffer,size,msecTimeout);
    }

public:


    virtual bool Switch(uint32 newSelectedStream)
    {
        if ((selectedStream > 0) && (attributeReadMode != (1==1))){
            uint32 size = attribute.Size();

            ConsoleSSWrite(*this,attribute.Buffer(),size,0);
        }
        attribute="";
        if ( Streamable::Switch(newSelectedStream)){
            if (selectedStream > 0){
                char buffer[256];
                uint32 size = sizeof(buffer);
                ConsoleSSRead(*this,buffer,size,0);

                attribute.Write(buffer,size);
                attribute.Seek(0);
                attributeReadMode = (1==1);
            }
            return (1==1);
        }
        return (1==0);
    }







    virtual bool Switch(const char *name){
        uint32 newSelectedStream = SANameToStreamModes(name);
        if (newSelectedStream == NullSelectedStream) return (1==0);
        return Switch(newSelectedStream);
    }



    virtual uint32 NOfStreams(){
        return 5;
    }
# 218 "../Level2/Console.h"
    inline bool SetSize(
                                int numberOfColumns,
                                int numberOfRows)
    {
        return BasicConsole::SetSize(numberOfColumns, numberOfRows);
    }


};
# 33 "../Level5/MenuInterface.h" 2




typedef bool (MenuSystemAction )(StreamInterface &in,StreamInterface &out,void *userData);

class MenuInterface;

extern "C" {

    bool MenuSystemTextMenu(
        MenuInterface & ms,
        StreamInterface & in,
        StreamInterface & out,
        bool exitImmediately = (1==0));

}


class MenuInterface {

friend bool MenuSystemTextMenu(
        MenuInterface & ms,
        StreamInterface & in,
        StreamInterface & out,
        bool exitImmediately);


protected:


    MenuSystemAction * action;


    MenuSystemAction * exitAction;


    MenuSystemAction * entryAction;


    void * userData;

public:

    void *UserData(){return userData;}

public:


    MenuInterface()
    {
        action = __null;
        userData = __null;
        exitAction = __null;
        entryAction = __null;
    }


    virtual ~MenuInterface()
    {
    }


    void SetUp(
                    MenuSystemAction * action,
                    MenuSystemAction * entryAction,
                    MenuSystemAction * exitAction,
                    void * userData)
    {
        this->userData = userData;
        this->action = action;
        this->entryAction = entryAction;
        this->exitAction = exitAction;
    }


    virtual const char *Title()=0;


    virtual void SetTitle(const char *title)=0;


    virtual bool TextMenu(
                    StreamInterface & in,
                    StreamInterface & out)
    {
        return MenuSystemTextMenu(*this,in,out);
    }


            bool ProcessMenuMessage(
                    GCRTemplate<MessageEnvelope> envelope);

};
# 39 "../Level5/MenuEntry.h" 2
extern "C" { ObjectRegistryItem *Get_private_MenuEntryInfo(); }


class MenuEntry:
    public MenuInterface,
    public MessageHandler,
    public GCNamedObject
{

public: virtual ObjectRegistryItem *Info() const{ return Get_private_MenuEntryInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_MenuEntryInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_MenuEntryInfo()); } friend Object * MenuEntryBuildFn__ ();


protected:


    BString title;

public:


    virtual const char *Title(){
        if (title.Size() == 0)
            return GCNamedObject::Name();
        else
            return title.Buffer();
    }

    virtual void SetTitle(const char *title){
        this->title = title;
    }



    MenuEntry(const char *title= ""){
        SetTitle(title);

    }


    virtual ~MenuEntry(){
    }





    virtual bool ObjectLoadSetup(
                        ConfigurationDataBase & info,
                        StreamInterface * err)
    {

        if (!GCNamedObject::ObjectLoadSetup(info,err)){
            AssertErrorCondition(FatalError,"ObjectLoadSetup:Cannot retrieve name of node");
            return (1==0);
        }

        int size[1] = { 1 };
        int nDim = 1;
        BString title;
        if (!info->ReadArray(&title,CDBTYPE_BString,size,nDim,"Title")){
            AssertErrorCondition(Warning,"ObjectLoadSetup: cannot find the Title entry");
        } else {
            SetTitle(title.Buffer());
        }

        return (1==1);
    }

};
# 33 "CDBBrowserMenu.h" 2
# 1 "CDBHtmlUtilities.h" 1
# 32 "CDBHtmlUtilities.h"
# 1 "../Level1/ConfigurationDataBase.h" 1
# 33 "CDBHtmlUtilities.h" 2
# 1 "../Level4/HttpStream.h" 1
# 34 "CDBHtmlUtilities.h" 2



typedef int CDBHUMode;


const CDBHUMode CDBHUHOSUV_Header = 0x1;

const CDBHUMode CDBHUHOSUV_Script = 0x2;

const CDBHUMode CDBHUHOSUV_Body = 0x4;

const CDBHUMode CDBHUHOSUV_FullBody = 0x8;

const CDBHUMode CDBHUHOSUV_NoBack = 0x10;


extern "C" {


bool CDBHUHtmlObjectSubView(ConfigurationDataBase &cdb_,const char *title_,HttpStream &hStream, CDBHUMode mode);

}
# 34 "CDBBrowserMenu.h" 2

class CDBBrowserMenu;
class ConfigurationDataBase;


extern "C" {

    bool CDB2Browse(StreamInterface &in,StreamInterface &out,ConfigurationDataBase &cdbRef,const char *cdbName);


    bool CDB2Setup(CDBBrowserMenu &cdbBrowse, const char *cdbName, ConfigurationDataBase &cdbRef);

}

extern "C" { ObjectRegistryItem *Get_private_CDBBrowserMenuInfo(); }


class CDBBrowserMenu:
    public MenuInterface,
    public HttpInterface,
    public GCNamedObject
{
public: virtual ObjectRegistryItem *Info() const{ return Get_private_CDBBrowserMenuInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_CDBBrowserMenuInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_CDBBrowserMenuInfo()); } friend Object * CDBBrowserMenuBuildFn__ ();

private:

    friend bool CDB2Setup(CDBBrowserMenu &cdbBrowse, const char *cdbName, ConfigurationDataBase &cdbRef);



    FString cdbName;


    ConfigurationDataBase cdb;

protected:

    virtual bool ProcessHttpMessage(HttpStream &hStream){
        bool ret = CDBHUHtmlObjectSubView(cdb,Comment(),hStream, CDBHUHOSUV_Header | CDBHUHOSUV_FullBody);
        hStream.SSPrintf("OutputHttpOtions.Content-Type","text/html");

        hStream.WriteReplyHeader((1==1));
        return ret;
    }


    BString title;

public:


    virtual const char * Title()
    {
        if (title.Size() == 0){
            return Comment();
        } else {
            return title.Buffer();
        }
    }

    virtual void SetTitle(
                const char * title)
    {
        this->title = title;
    }


                                    CDBBrowserMenu()
    {
    };


                                    ~CDBBrowserMenu()
    {
    };


                bool LinkTo(
            const char * cdbName,
            ConfigurationDataBase & cdb)
    {
        return CDB2Setup(*this,cdbName,cdb);
    }


    virtual bool TextMenu(
            StreamInterface & in,
            StreamInterface & out){
        return CDB2Browse(in,out,cdb,cdbName.Buffer());
    }


    virtual bool ObjectSaveSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        GCNamedObject::ObjectSaveSetup(info,err);
        return HttpInterface::ObjectSaveSetup(info,err);
    }


    virtual bool ObjectLoadSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        GCNamedObject::ObjectLoadSetup(info,err);
        return HttpInterface::ObjectLoadSetup(info,err);
    }

};
# 37 "SignalMessageInterface.h" 2

# 1 "../Level1/GlobalObjectDataBase.h" 1
# 36 "../Level1/GlobalObjectDataBase.h"
# 1 "../Level1/GCReferenceContainer.h" 1
# 37 "../Level1/GlobalObjectDataBase.h" 2






extern "C" {







    void _GetGlobalObjectDataBase(GCRTemplate<GCReferenceContainer> &GODB);



    void GlobalObjectDataBaseEnableDebugging(bool enable);

}



static inline GCRTemplate<GCReferenceContainer>
GetGlobalObjectDataBase(){
    GCRTemplate<GCReferenceContainer> GODB;
    _GetGlobalObjectDataBase(GODB);
    return GODB;
}
# 77 "../Level1/GlobalObjectDataBase.h"
static inline GCReference GODBFindByName(
    const char * name,
    const char ** unMatched = __null,
    bool forceRecurseSearch = (1==0)
     ){

    if (name == __null){
        GCReference gc;
        return gc;
    }

    if (strncasecmp(name,"GODB",4)==0){
        name += 4;
        if (name[0] == 0) return GetGlobalObjectDataBase();
        if (name[0] != '.') {
            GCReference gc;
            return gc;
        }
        name ++;
    }

    GCFlagType gcft = GCFT_None;


    if ((name[0] == '(') || forceRecurseSearch) gcft = GCFT_Recurse;
    return GetGlobalObjectDataBase()->Find(name,gcft,unMatched);
}




static inline bool GODBFindGlobalName(BString &name,GCReference ref){

    return (1==0);
}
# 39 "SignalMessageInterface.h" 2


class SignalMessageInterface;



extern "C" {






    GCRTemplate<SignalInterface> SMIGetSignal(SignalMessageInterface &smi, const char *signalName);




    bool SMIProcessMessage(SignalMessageInterface &smi, GCRTemplate<MessageEnvelope> envelope);

};

class SignalMessageInterface : public MessageHandler, public GCReferenceContainer{

    friend GCRTemplate<SignalInterface> SMIGetSignal(SignalMessageInterface &smi, const char *signalName);
    friend bool SMIProcessMessage(SignalMessageInterface &smi, GCRTemplate<MessageEnvelope> envelope);

private:

    TimeoutType timeout;


    GCRTemplate<GCReferenceContainer> cache;


    int maxCacheSize;


    FString signalSearchRoot;


    MutexSem signalMux;

protected:

    ConfigurationDataBase signalDataBase;





    GCRTemplate<SignalInterface> GetSignal(const char *signalName){
        return SMIGetSignal(*this, signalName);
    }







    void RemoveIllegalCharacters(FString &toBuild, FString &signalName, const char *illegalCharacters) {
        toBuild.SetSize(0);
        signalName.Seek(0);
        while(signalName.GetToken(toBuild, illegalCharacters));
    }
public:
    SignalMessageInterface(){
        maxCacheSize = 4;
        timeout.msecTimeout = 1000;
        GCRTemplate<CDBBrowserMenu> cdbBrowserMenu(GCFT_Create);
        if (cdbBrowserMenu.IsValid()){
            cdbBrowserMenu->LinkTo("SignalDataBase",signalDataBase);
            cdbBrowserMenu->SetObjectName("SignalDataBase");
            Insert(cdbBrowserMenu);
        } else {
            AssertErrorCondition(Warning,"could not create a cdbBrowserMenu");
        }

        GCRTemplate<GCReferenceContainer> myCache(GCFT_Create);
        if (myCache.IsValid()){
            cache = myCache;
            cache->SetObjectName("Cache");
            Insert(cache);
        } else {
            AssertErrorCondition(Warning,"could not create a cache");
        }

        signalMux.Create();
    }

    virtual bool ObjectLoadSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        bool ret = (1==1);
        ret = ret && GCReferenceContainer::ObjectLoadSetup(info,err);

        CDBExtended cdbx(info);


        if(cdbx.ReadFString(signalSearchRoot, "SignalSearchRoot"));

        if (!cdbx.ReadInt32((int32 &)timeout.msecTimeout,"Timeout",1000)){
            AssertErrorCondition(Warning,"Timeout is set to default 1second");
        }

        return ret;
    }
# 171 "SignalMessageInterface.h"
    virtual bool ProcessMessage(GCRTemplate<MessageEnvelope> envelope){
        return SMIProcessMessage(*this, envelope);
    }

};
# 34 "SignalArchiver.h" 2
# 1 "../Level2/File.h" 1
# 34 "../Level2/File.h"
# 1 "../Level0/BasicFile.h" 1
# 36 "../Level0/BasicFile.h"
const uint32 openingFlagsMask1 = 0x00000003;

const uint32 createNewFile = 0x00030000;

const uint32 createOverwrite = 0x00030001;

const uint32 openFile = 0x00030002;

const uint32 openCreate = 0x00030003;

const uint32 openingModeMask1 = 0x00000030;

const uint32 localityNone = 0x00300000;

const uint32 localitySequential = 0x00300010;

const uint32 localityRandom = 0x00300020;

const uint32 localityMixed = 0x00300030;

const uint32 openingModeMask2 = 0x000000C0;

const uint32 shareModeNoRW = 0x00C00000;

const uint32 shareModeNoW = 0x00C00040;

const uint32 shareModeNoR = 0x00C00080;

const uint32 shareModeAll = 0x00C000C0;

const uint32 openingModeMask3 = 0x00000300;

const uint32 accessModeR = 0x03000000;

const uint32 accessModeW = 0x03000100;

const uint32 accessModeRW = 0x03000200;

const uint32 devDriverMode = 0x0400D000;


const uint32 openWasOpen = 0;

const uint32 openWasCreate = 1;

const uint32 openWasOverWrite = 2;

class BasicFile;

extern "C" {

    bool FileOpen(BasicFile &f,const char *name);


    bool FileLock(BasicFile &f,int64 start,int64 size,TimeoutType msecTimeout = TTInfiniteWait);


    bool FileUnLock(BasicFile &f,int64 start,int64 size,TimeoutType msecTimeout = TTInfiniteWait);


    bool FileSetMaxNumberOfFiles(uint32 number);


    bool FileEraseFile(const char *fname,...);


    void FileSetFileName(BasicFile &f,const char *name);


    bool FileRead(BasicFile &f,void* buffer, uint32 &size,TimeoutType msecTimeout);


    bool FileWrite(BasicFile &f,const void* buffer, uint32 &size,TimeoutType msecTimeout);


    int64 FileSize(BasicFile &f);


    bool FileSeek(BasicFile &f,int64 pos);


    int64 FilePosition(BasicFile &f);


    bool FileSetSize(BasicFile &f,int64 size);


    bool FileRelativeSeek(BasicFile &f,int64 pos);


    bool FilePositionSeek(BasicFile &f,int64 &pos);
}



class BasicFile {

    friend bool FileOpen(BasicFile &f,const char *name);
    friend bool FileLock(BasicFile &f,int64 start,int64 size,TimeoutType msecTimeout);
    friend bool FileUnLock(BasicFile &f,int64 start,int64 size,TimeoutType msecTimeout);
    friend bool FileRead(BasicFile &f,void* buffer, uint32 &size,TimeoutType msecTimeout);
    friend void FileSetFileName(BasicFile &f,const char *name);
    friend bool FileWrite(BasicFile &f,const void* buffer, uint32 &size,TimeoutType msecTimeout);
    friend int64 FileSize(BasicFile &f);
    friend bool FileSeek(BasicFile &f,int64 pos);
    friend int64 FilePosition(BasicFile &f);
    friend bool FileSetSize(BasicFile &f,int64 size);
    friend bool FileRelativeSeek(BasicFile &f,int64 pos);
    friend bool FilePositionSeek(BasicFile &f,int64 &pos);

protected:

    intptr file;


    uint32 fileMode;


    int32 action;


    char *fileName;


    void SetFileName(const char *name){
        FileSetFileName(*this,name);
    }





public:

                        BasicFile()
    {
        file = (intptr)0;
        fileMode = openCreate |
                            localityMixed |
                            accessModeRW |
                            shareModeAll;
        action = 0xFFFF;
        fileName = __null;
    }


    virtual ~BasicFile()
    {
        Close();
        SetFileName(__null);
    }




    const intptr Handle(){
        return file;
    }


    inline bool Read (
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        return FileRead(*this,buffer,size,msecTimeout);
    }


    inline bool Write (
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        return FileWrite(*this,buffer,size,msecTimeout);
    }


    inline bool CanRead()
    {
        uint32 rwaccess = fileMode & (accessModeR>>16);
        return ((rwaccess == (accessModeR & 0xFFFF)) || (rwaccess == (accessModeRW & 0xFFFF)));
    }


    inline bool CanWrite()
    {
        uint32 rwaccess = fileMode & (accessModeW>>16);
        return ((rwaccess == (accessModeW & 0xFFFF)) || (rwaccess == (accessModeRW & 0xFFFF)));
    }




    inline int64 Size()
    {
        return FileSize(*this);
    }



    inline bool Seek(int64 pos)
    {
        return FileSeek(*this,pos);
    }


    inline int64 Position(void)
    {
        return FilePosition(*this);
    }


    inline bool SetSize(int64 size)
    {
        return FileSetSize(*this,size);
    }


    inline bool CanSeek()
    {
        return (1==1);
    }




    inline const char * FileName()
    {
        return fileName;
    }


    inline bool RelativeSeek(int64 pos)
    {
        return FileRelativeSeek(*this,pos);
    }


    inline bool PositionSeek(int64 &pos)
    {
        return FilePositionSeek(*this,pos);
    }


    inline bool Truncate()
    {
        return SetSize(Position());
    }




    inline void SetOpeningModes(uint32 modeSet)
    {
        uint32 mask = modeSet>>16;
        uint32 value = modeSet & 0xFFFF;
        fileMode &= ~mask;
        fileMode |= value;
    }





    inline bool Open(const char *fname,...)
    {
        if (fname == __null) return (1==0);
        char name[256];
        va_list argList;
        __builtin_va_start(argList,fname);
        vsnprintf(name,256,fname,argList);
        __builtin_va_end(argList);
        return FileOpen(*this,name);
    }



    inline bool Close()
    {
        if (file != (intptr)0)





        close(file);

        file = (intptr)0;
        return (1==1);
    }






    inline bool OpenWrite(const char *fname,...)
    {
        if (fname == __null) return (1==0);
        SetOpeningModes(openCreate | accessModeRW);
        char name[256];
        va_list argList;
        __builtin_va_start(argList,fname);
        vsnprintf(name,256,fname,argList);
        __builtin_va_end(argList);
        return Open(name);
    }







    inline bool OpenRead(const char *fname,...)
    {
        if (fname == __null) return (1==0);
        SetOpeningModes(openFile | accessModeR);
        char name[256];
        va_list argList;
        __builtin_va_start(argList,fname);
        vsnprintf(name,256,fname,argList);
        __builtin_va_end(argList);
        return Open(name);
    }







    inline bool OpenNew(const char *fname,...)
    {
        if (fname == __null) return (1==0);
        SetOpeningModes(createOverwrite | accessModeRW);
        char name[256];
        va_list argList;
        __builtin_va_start(argList,fname);
        vsnprintf(name,256,fname,argList);
        __builtin_va_end(argList);
        return Open(name);
    }



    inline int32 OpenAction()
    {
        return action;
    }


    int32 ErrorReason()
    {
        return action;
    }






    inline bool Lock(int64 start,int64 size,TimeoutType msecTimeout = TTInfiniteWait)
    {
        return FileLock(*this,start,size,msecTimeout);
    }


    inline bool UnLock(int64 start,int64 size,TimeoutType msecTimeout = TTInfiniteWait)
    {
        return FileUnLock(*this,start,size,msecTimeout);
    }



    static inline bool SetMaxNumberOfFiles(uint32 number){
        return FileSetMaxNumberOfFiles(number);
    }

};
# 35 "../Level2/File.h" 2

extern "C" { ObjectRegistryItem *Get_private_FileInfo(); }


class File: public Streamable, public BasicFile {

    public: virtual ObjectRegistryItem *Info() const{ return Get_private_FileInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_FileInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_FileInfo()); } friend Object * FileBuildFn__ ();


public:

                        File()
    {
    }


    virtual ~File()
    {
        Close();
        SetFileName(__null);
    }



    virtual bool SSRead(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        return BasicFile::Read(buffer,size,msecTimeout);
    }


    virtual bool SSWrite(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        return BasicFile::Write(buffer,size,msecTimeout);
    }


    inline bool Read(
                            void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        return Streamable::Read(buffer,size,msecTimeout);
    }


    inline bool Write(
                            const void* buffer,
                            uint32 & size,
                            TimeoutType msecTimeout = TTDefault)
    {
        return Streamable::Write(buffer,size,msecTimeout);
    }


    virtual bool CanRead()
    {
        return BasicFile::CanRead();
    }


    virtual bool CanWrite()
    {
        return BasicFile::CanWrite();
    }




    virtual int64 Size()
    {
        return BasicFile::Size();
    }


    virtual bool Seek(int64 pos)
    {
        return BasicFile::Seek(pos);
    }


    virtual int64 Position(void)
    {
        return BasicFile::Position();
    }


    virtual bool SetSize(int64 size)
    {
        return BasicFile::SetSize(size);
    }


    virtual bool CanSeek()
    {
        return BasicFile::CanSeek();
    }





    virtual bool StreamName(
                                uint32 n,
                                char * name,
                                int nameSize)
    {
        snprintf(name,nameSize,FileName(),selectedStream);
        return (1==1);
    }

};
# 35 "SignalArchiver.h" 2
# 47 "SignalArchiver.h"
extern "C"{
    void SignalArchivingFn(void *args);
}

enum StorageMode{
    TEXT,
    BINARY,
    MATLAB
};

extern "C" { ObjectRegistryItem *Get_private_SignalArchiverInfo(); }

class SignalArchiver:public SignalMessageInterface,
                     public HttpInterface{
public: virtual ObjectRegistryItem *Info() const{ return Get_private_SignalArchiverInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_SignalArchiverInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_SignalArchiverInfo()); } friend Object * SignalArchiverBuildFn__ ();

    friend void SignalArchivingFn(void *args);



    FString archiveDirectoryPath;





    FString relativeDirectoryPath;




    int32 relativeDirectoryPathMessageCode;




    bool writeExtension;




    HttpDirectoryResource httpDirResource;





    bool StoreSignals();




    StorageMode storageMode;
# 109 "SignalArchiver.h"
    bool SaveInMatlab(GCRTemplate<SignalInterface> signal, FString &originalSignalName, FString &matlabVarName, File &file);





    void GetDateTimeString(FString &timeStr);




    pthread_t archiveTID;




    EventSem archiveSem;
    bool running;

public:

    virtual ~SignalArchiver(){
        running = (1==0);
        archiveSem.Post();
        int32 counter = 0;
        while(!running){
            SleepSec(100e-3);
            if(counter > 10){
                break;
            }
        }
        if(counter > 10){
            AssertErrorCondition(FatalError, "%s::Thread did not terminate on its own... killing thread", Name());
        }
    };


    SignalArchiver(){
        archiveDirectoryPath.SetSize(0);
        relativeDirectoryPath.SetSize(0);
        storageMode = MATLAB;
        archiveTID = 0;
        relativeDirectoryPathMessageCode = -1;
        writeExtension = (1==1);
        archiveSem.Create();
    }




    virtual bool ProcessHttpMessage(HttpStream &hStream){
        return httpDirResource.ProcessHttpMessage(hStream);
    }

    virtual bool ObjectLoadSetup(
            ConfigurationDataBase & info,
            StreamInterface * err){

        bool ret = (1==1);
        ret = ret && SignalMessageInterface::ObjectLoadSetup(info,err);

        CDBExtended cdbx(info);
        FString tmp;
        if (!cdbx.ReadFString(tmp, "StorageMode")){
            SignalMessageInterface::AssertErrorCondition(InitialisationError, "%s::ObjectLoadSetup StorageMode not specified", SignalMessageInterface::Name());
        }
        if(tmp == "TEXT"){
            storageMode = TEXT;
        }
        else if(tmp == "BINARY"){
            storageMode = BINARY;
        }
        else if(tmp == "MATLAB"){
            storageMode = MATLAB;
        }
        else{
            SignalMessageInterface::AssertErrorCondition(InitialisationError, "%s::ObjectLoadSetup Invalid StorageMode", SignalMessageInterface::Name());
            return (1==0);
        }
        if(!cdbx.ReadFString(archiveDirectoryPath, "ArchiveDirectoryPath")){
            SignalMessageInterface::AssertErrorCondition(InitialisationError, "%s::ObjectLoadSetup ArchiveDirectoryPath must be specified", SignalMessageInterface::Name());
        }

        int32 cpuMask;
        if(!cdbx.ReadInt32(cpuMask, "CPUMask")){
            archiveTID = Threads::BeginThread((void ( *)(void *))&SignalArchivingFn,this);
        }
        else{
            archiveTID = Threads::BeginThread((void ( *)(void *))&SignalArchivingFn,this, 32768, Name(), XH_NotHandled, cpuMask);
        }
        cdbx.WriteFString(archiveDirectoryPath, "BaseDir");

        cdbx.ReadFString(relativeDirectoryPath, "RelativeDirectoryPath");
        cdbx.ReadInt32(relativeDirectoryPathMessageCode, "RelativeDirectoryPathMessageCode");
        FString writeExtensionStr;
        cdbx.ReadFString(writeExtensionStr, "WriteExtension", "yes");
        writeExtension = (writeExtensionStr != "no");
        return httpDirResource.ObjectLoadSetup(cdbx, err);
    }







    virtual bool ProcessMessage(GCRTemplate<MessageEnvelope> envelope){
        if (!envelope.IsValid()) {
            SignalMessageInterface::AssertErrorCondition(FatalError, "%s::ProcessMessage: envelope is not valid!!", SignalMessageInterface::Name());
            return (1==0);
        }

        GCRTemplate<Message> msg = envelope->GetMessage();
        if (!msg.IsValid()) {
            SignalMessageInterface::AssertErrorCondition(FatalError, "%s::ProcessMessage: (Message)msg is not valid!!", SignalMessageInterface::Name());
            return (1==0);
        }
        FString content = msg->Content();

        if(msg->GetMessageCode().Code() == relativeDirectoryPathMessageCode){
            relativeDirectoryPath = content;
        }
        if(content == "STORESIGNALS"){
            return StoreSignals();
        }
        else{
            return SignalMessageInterface::ProcessMessage(envelope);
        }
    }
};
# 26 "SignalArchiver.cpp" 2
# 1 "../Level0/Directory.h" 1
# 33 "../Level0/Directory.h"
# 1 "../Level0/LinkedListHolder.h" 1
# 34 "../Level0/Directory.h" 2

# 1 "/usr/include/fnmatch.h" 1 3 4
# 23 "/usr/include/fnmatch.h" 3 4
extern "C" {
# 65 "/usr/include/fnmatch.h" 3 4
extern int fnmatch (const char *__pattern, const char *__name,
      int __flags);


}
# 36 "../Level0/Directory.h" 2


class Directory;




static char *fileFilterSearchMask;



static int fileFilter (const struct dirent *de){

    return (fnmatch(fileFilterSearchMask, de->d_name, 0) == 0);
}



class DirectoryEntry: public LinkedListable{

    const char *fname;

    friend class Directory;


    struct stat fileStatistics;
# 70 "../Level0/Directory.h"
    Directory *holder;
public:

    DirectoryEntry(Directory *holder, const char *fname = __null){
        this->holder= holder;
        this->fname = MEMORYStrDup(fname);
    }


    ~DirectoryEntry(){

        if (fname != __null) MEMORYFree((void *&)fname);
        fname = __null;

    }


    const char *Name(){

        return fname;





    }


    bool IsDirectory(){

        return ((((fileStatistics.st_mode)) & 0170000) == (0040000));





    }


    bool IsFile(){

        return ((((fileStatistics.st_mode)) & 0170000) == (0100000));



    }


    bool ReadOnly(){


        return (1==0);





    }


    int64 Size(){

        return fileStatistics.st_size;
# 141 "../Level0/Directory.h"
    }


    time_t Time(){

        return fileStatistics.st_mtim.tv_sec;
# 158 "../Level0/Directory.h"
    }


    time_t LastAccessTime(){

        return fileStatistics.st_atim.tv_sec;
# 176 "../Level0/Directory.h"
    }


};
# 188 "../Level0/Directory.h"
class Directory: public LinkedListHolder {
    friend class DirectoryEntry;

    char *baseAddress;

    uint64 size;
public:

    Directory(const char *address,const char *fileMask="*",SortFilterFn *sorter=__null){
        size = 0;
        baseAddress = __null;

        if ((address != __null)&&(strlen(address)>0)){
            baseAddress = (char *)MEMORYMalloc(strlen(address)+2);
            strcpy(baseAddress,address);
        }

        if (baseAddress == __null){
            baseAddress = (char *)MEMORYMalloc(2);
            baseAddress[0] = '/';
            baseAddress[1] = 0;
        } else {
            uint32 l = strlen(baseAddress);
            if ((address[l-1] != '\\') || (address[l-1] != '/')){
                baseAddress[l] = '/';
                baseAddress[l+1] = 0;
            }
        }
# 243 "../Level0/Directory.h"
        if(fileMask == __null){
            fileMask = "*";
        }

        fileFilterSearchMask = (char *)MEMORYMalloc(strlen(fileMask) + 1);
        strcpy(fileFilterSearchMask, fileMask);

        char statAddr[512];
        struct dirent **namelist;
        int n = scandir(baseAddress, &namelist, fileFilter, alphasort);

        if(n > 0){
            while (n--){
                DirectoryEntry *entry;
                if (sorter==__null)ListInsert((entry = new DirectoryEntry(this)));
                else ListInsert((entry = new DirectoryEntry(this)),sorter);
                entry->fname = MEMORYStrDup(namelist[n]->d_name);
                memset(statAddr, 0, 512);
                strcat(statAddr, address);
                if(address[strlen(address) - 1] != '/')
                    strcat(statAddr, "/");

                strcat(statAddr, entry->fname);
                stat(statAddr,&entry->fileStatistics);
                size += entry->Size();
            }
        }
        MEMORYFree((void *&)fileFilterSearchMask);
        MEMORYFree((void *&)baseAddress);
        baseAddress = __null;
# 408 "../Level0/Directory.h"
    }


    ~Directory(){
        if (baseAddress!=__null) MEMORYFree((void *&)baseAddress);
    }


    static bool Create(const char *address){



        return (mkdir(address, 0777) == 0);




    };


    static bool DirectoryExists(const char *address){





        struct stat fileStats;
        stat(address, &fileStats);
        return ((((fileStats.st_mode)) & 0170000) == (0040000));




    };


    uint64 TotalFileSize(){
        return size;
    }

};
# 27 "SignalArchiver.cpp" 2

# 1 "MatlabConverter.h" 1
# 34 "MatlabConverter.h"
# 1 "Matrix.h" 1
# 31 "Matrix.h"
# 1 "RTMatrix.h" 1
# 37 "RTMatrix.h"
template <class T>
class RTMatrixRow{

    T *row;
public:

    inline RTMatrixRow(T *row){
        this->row = row;
    }

    inline T &operator[](int col)const{
        return row[col];
    }
};


template <class T> class RTMatrixT;
template <class T> class RefMatrixT;
template <class T> class MatrixT;



template <class T>
class _pRTMatrix_ {
public:

    uint32 n;


    uint32 m;


    T *data;


    T **row;


    inline T *Data()const{
        return data;
    }



    inline uint32 DataSize()const{
        return n*m;
    }

};


extern "C" {


    bool RTM__vecIsNull_I(const int *d,const uint32 sz);

    bool RTM__vecIsNull_F(const float *d,const uint32 sz);

    bool RTM__vecIsNull_D(const double *d,const uint32 sz);


    void RTM__vecCopy_F (float *d,const float *s,const uint32 sz);

    void RTM__vecCopy_D (double *d,const double *s,const uint32 sz);

    void RTM__vecCopy_I (int *d,const int *s,const uint32 sz);

    void RTM__vecCopy_DI(double *d,const int *s,const uint32 sz);

    void RTM__vecCopy_DF(double *d,const float *s,const uint32 sz);

    void RTM__vecCopy_FI(float *d,const int *s,const uint32 sz);

    void RTM__vecCopy_FD(float *d,const double *s,const uint32 sz);

    void RTM__vecCopy_IF(int *d,const float *s,const uint32 sz);

    void RTM__vecCopy_ID(int *d,const double *s,const uint32 sz);


    void RTM__vecSum_F(float *d,const float *s1,const float *s2,uint32 sz);

    void RTM__vecSum_D(double *d,const double *s1,const double *s2,uint32 sz);

    void RTM__vecSum_I(int *d,const int *s1,const int *s2,uint32 sz);


    void RTM__vecDiff_F(float *d,const float *s1,const float *s2,uint32 sz);

    void RTM__vecDiff_D(double *d,const double *s1,const double *s2,uint32 sz);

    void RTM__vecDiff_I(int *d,const int *s1,const int *s2,uint32 sz);


    void RTM__vecComb_I(int *d,uint32 sz,const int *s1,const int w1,const int *s2,const int w2);

    void RTM__vecComb_F(float *d,uint32 sz,const float *s1,const float w1,const float *s2,const float w2);

    void RTM__vecComb_D(double *d,uint32 sz,const double *s1,const double w1,const double *s2,const double w2);


    int RTM__vecMax_I(const int *d,const uint32 sz);

    float RTM__vecMax_F(const float *d,const uint32 sz);

    double RTM__vecMax_D(const double *d,const uint32 sz);


    int RTM__vecMin_I(const int *d,const uint32 sz);

    float RTM__vecMin_F(const float *d,const uint32 sz);

    double RTM__vecMin_D(const double *d,const uint32 sz);


    void RTM__vecScale_F(float *d,uint32 sz,const float w);

    void RTM__vecScale_D(double *d,uint32 sz,const double w);

    void RTM__vecScale_I(int *d,uint32 sz,const int w);


    void RTMZerofy_I(RTMatrixT<int> &A);

    void RTMZerofy_F(RTMatrixT<float> &A);

    void RTMZerofy_D(RTMatrixT<double> &A);


    void RTMOnefy_I(RTMatrixT<int> &A);

    void RTMOnefy_F(RTMatrixT<float> &A);

    void RTMOnefy_D(RTMatrixT<double> &A);


    void RTMEyefy_I(RTMatrixT<int> &A);

    void RTMEyefy_F(RTMatrixT<float> &A);

    void RTMEyefy_D(RTMatrixT<double> &A);


    void RTMScale_II(RTMatrixT<int> &A,const int factor);

    void RTMScale_FF(RTMatrixT<float> &A,const float factor);

    void RTMScale_DD(RTMatrixT<double> &A,const double factor);


    bool RTMIsNull_I(const RTMatrixT<int> &A);

    bool RTMIsNull_F(const RTMatrixT<float> &A);

    bool RTMIsNull_D(const RTMatrixT<double> &A);


    int RTMMax_I(const RTMatrixT<int> &ma);

    float RTMMax_F(const RTMatrixT<float> &ma);

    double RTMMax_D(const RTMatrixT<double> &ma);


    int RTMMin_I(const RTMatrixT<int> &ma);

    float RTMMin_F(const RTMatrixT<float> &ma);

    double RTMMin_D(const RTMatrixT<double> &ma);


    void RTMCombine_UIIII(RTMatrixT<int> &rtm,const RTMatrixT<int > &A,const int aw,const RTMatrixT<int > &B,const int bw);

    void RTMCombine_UFFFF(RTMatrixT<float> &rtm,const RTMatrixT<float > &A,const float aw,const RTMatrixT<float > &B,const float bw);

    void RTMCombine_UDDDD(RTMatrixT<double> &rtm,const RTMatrixT<double> &A,const double aw,const RTMatrixT<double> &B,const double bw);


    void RTMProduct_UIII(RTMatrixT<int> &rtm,const RTMatrixT<int> &A,const RTMatrixT<int> &B);

    void RTMProduct_UFFF(RTMatrixT<float> &rtm,const RTMatrixT<float> &A,const RTMatrixT<float> &B);

    void RTMProduct_UDDD(RTMatrixT<double>&rtm,const RTMatrixT<double>&A,const RTMatrixT<double>&B);


    void RTMVProduct_UIII(RTMatrixT<int> &rtm,int *input,int *output) ;

    void RTMVProduct_UFFF(RTMatrixT<float> &rtm,float *input,float *output) ;

    void RTMVProduct_UDDD(RTMatrixT<double> &rtm,double *input,double *output);


    void RTMVProductAcc_UIII(RTMatrixT<int> &rtm,int *input,int *output) ;

    void RTMVProductAcc_UFFF(RTMatrixT<float> &rtm,float *input,float *output) ;

    void RTMVProductAcc_UDDD(RTMatrixT<double> &rtm,double *input,double *output);


    void RTMDotProduct_UII(RTMatrixT<int> &rtm,const RTMatrixT<int> &A);

    void RTMDotProduct_UFF(RTMatrixT<float> &rtm,const RTMatrixT<float> &A);

    void RTMDotProduct_UDD(RTMatrixT<double> &rtm,const RTMatrixT<double> &A);


    int RTMMaxAbsRowSumNorm_I(RTMatrixT<int> &A);

    float RTMMaxAbsRowSumNorm_F(RTMatrixT<float> &A);

    double RTMMaxAbsRowSumNorm_D(RTMatrixT<double> &A);


    int RTMMaxAbsColSumNorm_I(RTMatrixT<int> &A);

    float RTMMaxAbsColSumNorm_F(RTMatrixT<float> &A);

    double RTMMaxAbsColSumNorm_D(RTMatrixT<double> &A);


    void RTMTranspose_UII(RTMatrixT<int > &rtm,const RTMatrixT<int > &A);

    void RTMTranspose_UFF(RTMatrixT<float > &rtm,const RTMatrixT<float > &A);

    void RTMTranspose_UDD(RTMatrixT<double> &rtm,const RTMatrixT<double> &A);


    bool RTMInvert_UFF(RTMatrixT<float > &rtm,RTMatrixT<float > &A);

    bool RTMInvert_UDF(RTMatrixT<double> &rtm,RTMatrixT<float > &A);

    bool RTMInvert_UDD(RTMatrixT<double> &rtm,RTMatrixT<double> &A);


    bool RTMLU_FFFF(RTMatrixT<float > &rtm,RTMatrixT<float > &L,RTMatrixT<float > &U,RTMatrixT<float > &P);

    bool RTMLU_DDDD(RTMatrixT<double> &rtm,RTMatrixT<double> &L,RTMatrixT<double> &U,RTMatrixT<double> &P);


    bool RTMSVD_FFFF(RTMatrixT<float > &rtm,RTMatrixT<float > &U, RTMatrixT<float > &W, RTMatrixT<float > &V);

    bool RTMSVD_DDDD(RTMatrixT<double> &rtm,RTMatrixT<double> &U, RTMatrixT<double> &W, RTMatrixT<double> &V);


    void RTMPrint_I(RTMatrixT<int > &rtm,StreamInterface &s,int maxrow);

    void RTMPrint_F(RTMatrixT<float > &rtm,StreamInterface &s,int maxrow);

    void RTMPrint_D(RTMatrixT<double> &rtm,StreamInterface &s,int maxrow);


    bool RTMAllocate_I(RTMatrixT<int > &rtm,uint32 nRows,uint32 nColumns);

    bool RTMAllocate_F(RTMatrixT<float > &rtm,uint32 nRows,uint32 nColumns);

    bool RTMAllocate_D(RTMatrixT<double> &rtm,uint32 nRows,uint32 nColumns);


    void REFMAllocate_I(RefMatrixT<int > &refm);

    void REFMAllocate_F(RefMatrixT<float > &refm);

    void REFMAllocate_D(RefMatrixT<double> &refm);


    void REFMDeAllocate_I(RefMatrixT<int > &refm);

    void REFMDeAllocate_F(RefMatrixT<float > &refm);

    void REFMDeAllocate_D(RefMatrixT<double> &refm);


    void MAReAllocate_I(MatrixT<int > &ma,uint32 nRows,uint32 nColumns);

    void MAReAllocate_F(MatrixT<float > &ma,uint32 nRows,uint32 nColumns);

    void MAReAllocate_D(MatrixT<double> &ma,uint32 nRows,uint32 nColumns);

}


static inline bool RTM__vecIsNull(const int* d,const uint32 sz){return RTM__vecIsNull_I(d,sz);}
static inline bool RTM__vecIsNull(const float* d,const uint32 sz){return RTM__vecIsNull_F(d,sz);}
static inline bool RTM__vecIsNull(const double* d,const uint32 sz){return RTM__vecIsNull_D(d,sz);}

static inline void RTM__vecCopy(float *d,const float *s,const uint32 sz) { RTM__vecCopy_F (d,s,sz); }
static inline void RTM__vecCopy(double *d,const double *s,const uint32 sz) { RTM__vecCopy_D (d,s,sz); }
static inline void RTM__vecCopy(int *d,const int *s,const uint32 sz) { RTM__vecCopy_I (d,s,sz); }
static inline void RTM__vecCopy(double *d,const float *s,const uint32 sz) { RTM__vecCopy_DF(d,s,sz); }
static inline void RTM__vecCopy(double *d,const int *s,const uint32 sz) { RTM__vecCopy_DI(d,s,sz); }
static inline void RTM__vecCopy(float *d,const double *s,const uint32 sz) { RTM__vecCopy_FD(d,s,sz); }
static inline void RTM__vecCopy(float *d,const int *s,const uint32 sz) { RTM__vecCopy_FI(d,s,sz); }
static inline void RTM__vecCopy(int *d,const float *s,const uint32 sz) { RTM__vecCopy_IF(d,s,sz); }
static inline void RTM__vecCopy(int *d,const double *s,const uint32 sz) { RTM__vecCopy_ID(d,s,sz); }

static inline void RTM__vecSum(int *d,const int *s1,const int *s2,uint32 sz) { RTM__vecSum_I(d,s1,s2,sz); }
static inline void RTM__vecSum(float *d,const float *s1,const float *s2,uint32 sz) { RTM__vecSum_F(d,s1,s2,sz); }
static inline void RTM__vecSum(double *d,const double *s1,const double *s2,uint32 sz) { RTM__vecSum_D(d,s1,s2,sz); }

static inline void RTM__vecDiff(int *d,const int *s1,const int *s2,uint32 sz) { RTM__vecDiff_I(d,s1,s2,sz); }
static inline void RTM__vecDiff(float *d,const float *s1,const float *s2,uint32 sz) { RTM__vecDiff_F(d,s1,s2,sz); }
static inline void RTM__vecDiff(double *d,const double *s1,const double *s2,uint32 sz) { RTM__vecDiff_D(d,s1,s2,sz); }


static inline void RTM__vecComb(int *d,uint32 sz,const int *s1,const int w1,const int *s2,const int w2){ RTM__vecComb_I(d,sz,s1,w1,s2,w2); }
static inline void RTM__vecComb(float *d,uint32 sz,const float *s1,const float w1,const float *s2,const float w2){ RTM__vecComb_F(d,sz,s1,w1,s2,w2); }
static inline void RTM__vecComb(double *d,uint32 sz,const double *s1,const double w1,const double *s2,const double w2){ RTM__vecComb_D(d,sz,s1,w1,s2,w2); }

static inline int RTM__vecMax(const int *d,const uint32 sz){return RTM__vecMax_I(d,sz);}
static inline float RTM__vecMax(const float *d,const uint32 sz){return RTM__vecMax_F(d,sz);}
static inline double RTM__vecMax(const double *d,const uint32 sz){return RTM__vecMax_D(d,sz);}

static inline int RTM__vecMin(const int *d,const uint32 sz){return RTM__vecMin_I(d,sz);}
static inline float RTM__vecMin(const float *d,const uint32 sz){return RTM__vecMin_F(d,sz);}
static inline double RTM__vecMin(const double *d,const uint32 sz){return RTM__vecMin_D(d,sz);}

static inline void RTM__vecScale(float *d,const float w,uint32 sz) { RTM__vecScale_F(d,sz,w); }
static inline void RTM__vecScale(double *d,const double w,uint32 sz) { RTM__vecScale_D(d,sz,w); }
static inline void RTM__vecScale(int *d,const int w,uint32 sz) { RTM__vecScale_I(d,sz,w); }

static inline void RTMZerofy(RTMatrixT<int> &A){RTMZerofy_I(A);}
static inline void RTMZerofy(RTMatrixT<float> &A){RTMZerofy_F(A);}
static inline void RTMZerofy(RTMatrixT<double> &A){RTMZerofy_D(A);}

static inline void RTMOnefy(RTMatrixT<int> &A){RTMOnefy_I(A);}
static inline void RTMOnefy(RTMatrixT<float> &A){RTMOnefy_F(A);}
static inline void RTMOnefy(RTMatrixT<double> &A){RTMOnefy_D(A);}

static inline void RTMEyefy(RTMatrixT<int> &A){RTMEyefy_I(A);}
static inline void RTMEyefy(RTMatrixT<float> &A){RTMEyefy_F(A);}
static inline void RTMEyefy(RTMatrixT<double> &A){RTMEyefy_D(A);}

static inline void RTMScale(RTMatrixT<int> &A,const int factor){RTMScale_II(A,factor);}
static inline void RTMScale(RTMatrixT<float> &A,const float factor){RTMScale_FF(A,factor);}
static inline void RTMScale(RTMatrixT<double> &A,const double factor){RTMScale_DD(A,factor);}

static inline bool RTMIsNull(const RTMatrixT<int> &A){return RTMIsNull_I(A);}
static inline bool RTMIsNull(const RTMatrixT<float> &A){return RTMIsNull_F(A);}
static inline bool RTMIsNull(const RTMatrixT<double> &A){return RTMIsNull_D(A);}

static inline int RTMMax(const RTMatrixT<int> &ma){return RTMMax_I(ma);}
static inline float RTMMax(const RTMatrixT<float> &ma){return RTMMax_F(ma);}
static inline double RTMMax(const RTMatrixT<double> &ma){return RTMMax_D(ma);}

static inline int RTMMin(const RTMatrixT<int> &ma){return RTMMin_I(ma);}
static inline float RTMMin(const RTMatrixT<float> &ma){return RTMMin_F(ma);}
static inline double RTMMin(const RTMatrixT<double> &ma){return RTMMin_D(ma);}

static inline void RTMProduct_U(RTMatrixT<int>&dest, const RTMatrixT<int> &A ,const RTMatrixT<int> &B){ RTMProduct_UIII(dest,A,B);}
static inline void RTMProduct_U(RTMatrixT<float>&dest, const RTMatrixT<float> &A ,const RTMatrixT<float> &B){ RTMProduct_UFFF(dest,A,B);}
static inline void RTMProduct_U(RTMatrixT<double>&dest, const RTMatrixT<double> &A,const RTMatrixT<double> &B){ RTMProduct_UDDD(dest,A,B);}

static inline void RTMVProduct_U(RTMatrixT<int>&dest, int *input,int *output){ RTMVProduct_UIII(dest,input,output);}
static inline void RTMVProduct_U(RTMatrixT<float>&dest, float *input,float *output){ RTMVProduct_UFFF(dest,input,output);}
static inline void RTMVProduct_U(RTMatrixT<double>&dest, double *input,double *output){ RTMVProduct_UDDD(dest,input,output);}

static inline void RTMVProductAcc_U(RTMatrixT<int> &dest, int *input,int *output){ RTMVProductAcc_UIII(dest,input,output);}
static inline void RTMVProductAcc_U(RTMatrixT<float> &dest, float *input,float *output){ RTMVProductAcc_UFFF(dest,input,output);}
static inline void RTMVProductAcc_U(RTMatrixT<double>&dest, double *input,double *output){ RTMVProductAcc_UDDD(dest,input,output);}

static inline void RTMDotProduct_U(RTMatrixT<int> &rtm,const RTMatrixT<int> &A){ RTMDotProduct_UII(rtm,A); }
static inline void RTMDotProduct_U(RTMatrixT<float> &rtm,const RTMatrixT<float> &A){ RTMDotProduct_UFF(rtm,A); }
static inline void RTMDotProduct_U(RTMatrixT<double>&rtm,const RTMatrixT<double>&A){ RTMDotProduct_UDD(rtm,A); }

static inline void RTMSum_U(_pRTMatrix_<int> &rtm,const _pRTMatrix_<int> &A,const _pRTMatrix_<int> &B){ RTM__vecSum_I(rtm.data,A.data,B.data,rtm.DataSize());}
static inline void RTMSum_U(_pRTMatrix_<float> &rtm,const _pRTMatrix_<float> &A,const _pRTMatrix_<float> &B){ RTM__vecSum_F(rtm.data,A.data,B.data,rtm.DataSize());}
static inline void RTMSum_U(_pRTMatrix_<double>&rtm,const _pRTMatrix_<double>&A,const _pRTMatrix_<double>&B){ RTM__vecSum_D(rtm.data,A.data,B.data,rtm.DataSize());}

static inline void RTMDiff_U(_pRTMatrix_<int> &rtm,const _pRTMatrix_<int >&A,const _pRTMatrix_<int> &B){ RTM__vecDiff_I(rtm.data,A.data,B.data,rtm.DataSize());}
static inline void RTMDiff_U(_pRTMatrix_<float> &rtm,const _pRTMatrix_<float >&A,const _pRTMatrix_<float> &B){ RTM__vecDiff_F(rtm.data,A.data,B.data,rtm.DataSize());}
static inline void RTMDiff_U(_pRTMatrix_<double>&rtm,const _pRTMatrix_<double>&A,const _pRTMatrix_<double>&B){ RTM__vecDiff_D(rtm.data,A.data,B.data,rtm.DataSize());}

static inline void RTMCombine_U(_pRTMatrix_<int> &rtm,const _pRTMatrix_<int >&A,const int aw,const _pRTMatrix_<int >&B,const int bw){RTM__vecComb_I(rtm.data,rtm.DataSize(),A.data,aw,B.data,bw);}
static inline void RTMCombine_U(_pRTMatrix_<float> &rtm,const _pRTMatrix_<float >&A,const float aw,const _pRTMatrix_<float >&B,const float bw){RTM__vecComb_F(rtm.data,rtm.DataSize(),A.data,aw,B.data,bw);}
static inline void RTMCombine_U(_pRTMatrix_<double>&rtm,const _pRTMatrix_<double>&A,const double aw,const _pRTMatrix_<double>&B,const double bw){RTM__vecComb_D(rtm.data,rtm.DataSize(),A.data,aw,B.data,bw);}

static inline int RTMMaxAbsRowSumNorm(RTMatrixT<int> &A){return RTMMaxAbsRowSumNorm_I(A);}
static inline float RTMMaxAbsRowSumNorm(RTMatrixT<float> &A){return RTMMaxAbsRowSumNorm_F(A);}
static inline double RTMMaxAbsRowSumNorm(RTMatrixT<double> &A){return RTMMaxAbsRowSumNorm_D(A);}

static inline int RTMMaxAbsColSumNorm(RTMatrixT<int> &A){return RTMMaxAbsColSumNorm_I(A);}
static inline float RTMMaxAbsColSumNorm(RTMatrixT<float> &A){return RTMMaxAbsColSumNorm_F(A);}
static inline double RTMMaxAbsColSumNorm(RTMatrixT<double> &A){return RTMMaxAbsColSumNorm_D(A);}

static inline void RTMTranspose_U(RTMatrixT<int >&rtm,const RTMatrixT<int> &A){ RTMTranspose_UII(rtm,A); }
static inline void RTMTranspose_U(RTMatrixT<float >&rtm,const RTMatrixT<float> &A){ RTMTranspose_UFF(rtm,A); }
static inline void RTMTranspose_U(RTMatrixT<double>&rtm,const RTMatrixT<double>&A){ RTMTranspose_UDD(rtm,A); }

static inline bool RTMInvert_U(RTMatrixT<int >&rtm,RTMatrixT<int >&A){ return (1==0); }
static inline bool RTMInvert_U(RTMatrixT<float >&rtm,RTMatrixT<float >&A){ return RTMInvert_UFF(rtm,A); }
static inline bool RTMInvert_U(RTMatrixT<double>&rtm,RTMatrixT<float >&A){ return RTMInvert_UDF(rtm,A); }
static inline bool RTMInvert_U(RTMatrixT<double>&rtm,RTMatrixT<double>&A){ return RTMInvert_UDD(rtm,A); }

static inline bool RTMLU(RTMatrixT<int > &rtm,RTMatrixT<int > &L,RTMatrixT<int > &U,RTMatrixT<int > &P){ return (1==0); }
static inline bool RTMLU(RTMatrixT<float > &rtm,RTMatrixT<float > &L,RTMatrixT<float > &U,RTMatrixT<float > &P){ return RTMLU_FFFF(rtm,L,U,P); }
static inline bool RTMLU(RTMatrixT<double> &rtm,RTMatrixT<double> &L,RTMatrixT<double> &U,RTMatrixT<double> &P){ return RTMLU_DDDD(rtm,L,U,P); }

static inline bool RTMSVD(RTMatrixT<int > &rtm,RTMatrixT<int > &U, RTMatrixT<int > &W, RTMatrixT<int > &V){ return (1==0); }
static inline bool RTMSVD(RTMatrixT<float > &rtm,RTMatrixT<float > &U, RTMatrixT<float > &W, RTMatrixT<float > &V){ return RTMSVD_FFFF(rtm,U, W, V); }
static inline bool RTMSVD(RTMatrixT<double> &rtm,RTMatrixT<double> &U, RTMatrixT<double> &W, RTMatrixT<double> &V){ return RTMSVD_DDDD(rtm,U, W, V); }

static inline void RTMPrint(RTMatrixT<int > &rtm,StreamInterface &s,int maxrow){ RTMPrint_I(rtm,s,maxrow); }
static inline void RTMPrint(RTMatrixT<float > &rtm,StreamInterface &s,int maxrow){ RTMPrint_F(rtm,s,maxrow); }
static inline void RTMPrint(RTMatrixT<double> &rtm,StreamInterface &s,int maxrow){ RTMPrint_D(rtm,s,maxrow); }

static inline bool RTMAllocate(RTMatrixT<int > &rtm,uint32 nRows,uint32 nColumns){ return RTMAllocate_I(rtm,nRows,nColumns); }
static inline bool RTMAllocate(RTMatrixT<float > &rtm,uint32 nRows,uint32 nColumns){ return RTMAllocate_F(rtm,nRows,nColumns); }
static inline bool RTMAllocate(RTMatrixT<double> &rtm,uint32 nRows,uint32 nColumns){ return RTMAllocate_D(rtm,nRows,nColumns); }

static inline void REFMAllocate(RefMatrixT<int > &refm){ REFMAllocate_I(refm); }
static inline void REFMAllocate(RefMatrixT<float > &refm){ REFMAllocate_F(refm); }
static inline void REFMAllocate(RefMatrixT<double> &refm){ REFMAllocate_D(refm); }

static inline void REFMDeAllocate(RefMatrixT<int > &refm){ REFMDeAllocate_I(refm); }
static inline void REFMDeAllocate(RefMatrixT<float > &refm){ REFMDeAllocate_F(refm); }
static inline void REFMDeAllocate(RefMatrixT<double> &refm){ REFMDeAllocate_D(refm); }

static inline void MAReAllocate(MatrixT<int > &ma,uint32 nRows,uint32 nColumns){ MAReAllocate_I(ma,nRows,nColumns); }
static inline void MAReAllocate(MatrixT<float > &ma,uint32 nRows,uint32 nColumns){ MAReAllocate_F(ma,nRows,nColumns); }
static inline void MAReAllocate(MatrixT<double> &ma,uint32 nRows,uint32 nColumns){ MAReAllocate_D(ma,nRows,nColumns); }




template <class T1,class T2>
inline bool RTMCopy(RTMatrixT<T1> &dest, const RTMatrixT<T2> &src){
    if (dest.m != src.m) return (1==0);
    if (dest.n != src.n) return (1==0);

    uint32 sz = src.DataSize();
    RTM__vecCopy(dest.data,src.data,sz);

    return (1==1);
}


template <class T1,class T2>
inline bool RTMLoad(RTMatrixT<T1> &dest,const T2 *src, const uint32 nRows,const uint32 nColumns){
    if (dest.m != nColumns) return (1==0);
    if (dest.n != nRows) return (1==0);

    uint32 sz = dest.DataSize();
    RTM__vecCopy(dest.data,src,sz);

    return (1==1);
}


template <class T1,class T2>
inline bool RTMSave(RTMatrixT<T1> &src,T2 *dest, const uint32 nRows,const uint32 nColumns){
    if (src.m != nColumns) return (1==0);
    if (src.n != nRows) return (1==0);

    uint32 sz = src.DataSize();
    RTM__vecCopy(dest,src.data,sz);
    return (1==1);
}


template <class T>
class RTMatrixT:public _pRTMatrix_<T> {

private:




    void Copy(const RTMatrixT<T> &A){
        if (A.data!=__null){
     Allocate(A.NRows(),A.NColumns());
     RTMLoad(*this,A.data,A.NRows(),A.NColumns());
 }
 else{
            Initialize();
 }
    }

public:

    bool Allocate(const uint32 nRows,const uint32 nColumns){
        return RTMAllocate(*this,nRows,nColumns);
    }


    void DeAllocate(){
        if (this->data != __null) MEMORYFree((void *&)this->data);
        if (this->row != __null) MEMORYFree((void *&)this->row);
        Initialize();
    }


    void Initialize(){
        this->data = __null;
        this->row = __null;
        this->n = 0;
        this->m = 0;
    }


    RTMatrixT(){
        Initialize();
    }


    inline void SwapRows(uint32 row_i, uint32 row_j){
        T temp;
        T *Rowi = this->row[row_i];
        T *Rowj = this->row[row_j];
        for(int i=0;i<this->m;i++){
            temp = Rowj[i];
            Rowj[i] = Rowi[i];
            Rowi[i] = temp;
        }
    }

public:

    inline RTMatrixT(const uint32 nRows,const uint32 nColumns){
        Allocate(nRows,nColumns);
    }


    inline RTMatrixT(const uint32 nRows,const uint32 nColumns,const T *source){
        Allocate(nRows,nColumns);
        RTMLoad(*this,source,nRows,nColumns);
    }


    inline RTMatrixT(const RTMatrixT<T> &A){
 Copy(A);
    }


    inline RTMatrixT(const uint32 nRows,const uint32 nColumns,const char* options){

    }


    inline ~RTMatrixT(){
        DeAllocate();
    }


    inline void Zerofy(){
        RTMZerofy(*this);
    }


    inline void Onefy(){
        RTMOnefy(*this);
    }


    inline void Eyefy(){
        RTMEyefy(*this);
    }


    inline void Scale(const T &x){
        RTMScale(*this,x);
    }


    inline uint32 NRows()const{
        return this->n;
    }


    inline uint32 NColumns()const{
        return this->m;
    }


    inline void Clear(){
        T *p = this->data;
        T *pEnd = p + (this->n*this->m);
        while(p<pEnd){
            *p++ = (T)0;
        }
    }


    inline const RTMatrixRow<T> operator[](int rowNo){
        return RTMatrixRow<T>(this->row[rowNo]);
    }


    inline bool IsNull(){
        return RTMIsNull(*this);
    }


    inline bool Product(const RTMatrixT &A,const RTMatrixT &B){
        if (A.m != B.n) return (1==0);
        if (this->n != A.n) return (1==0);
        if (this->m != B.m) return (1==0);
        RTMProduct_U(*this,A,B);
        return (1==1);
    }


    inline bool DotProduct(const RTMatrixT<T> &A){
        if (A.m != this->m) return (1==0);
        if (A.n != this->n) return (1==0);
        RTMDotProduct_U(*this,A);
        return (1==1);
    }


    inline bool Sum(const RTMatrixT<T> &A,const RTMatrixT<T> &B){
        if (A.m != this->m) return (1==0);
        if (A.n != this->n) return (1==0);
        if (B.m != this->m) return (1==0);
        if (B.n != this->n) return (1==0);
        RTMSum_U(*this,A,B);
        return (1==1);
    }


    inline bool Diff(const RTMatrixT<T> &A,const RTMatrixT<T> &B){
        if (A.m != this->m) return (1==0);
        if (A.n != this->n) return (1==0);
        if (B.m != this->m) return (1==0);
        if (B.n != this->n) return (1==0);
        RTMDiff_U(*this,A,B);
        return (1==1);
    }




    inline bool Combine(const RTMatrixT<T> &A,const T aw,const RTMatrixT<T> &B,const T bw){
        if (A.m != this->m) return (1==0);
        if (A.n != this->n) return (1==0);
        if (B.m != this->m) return (1==0);
        if (B.n != this->n) return (1==0);
        RTMCombine_U(*this,A,aw,B,bw);
        return (1==1);
    }


    inline T MaxAbsRowSumNorm(){
        return RTMMaxAbsRowSumNorm(*this);
    }


    inline T MaxAbsColSumNorm(){
        return RTMMaxAbsColSumNorm(*this);
    }


    inline bool Transpose(const RTMatrixT<T> &A){
        if (A.m != this->n) return (1==0);
        if (A.n != this->m) return (1==0);
        RTMTranspose_U(*this,A);
        return (1==1);
    }


    inline bool Invert(RTMatrixT<T> &A){
        if (this->n != this->m) return (1==0);
        if (A.m != this->m) return (1==0);
        if (A.n != this->n) return (1==0);
        return RTMInvert_U(*this,A);
    }

    inline RTMatrixT &operator=(const RTMatrixT<T> &A){
 Copy(A);
    }


    bool LU(RTMatrixT<T> &L,RTMatrixT<T> &U,RTMatrixT<T> &P){
        return RTMLU(*this,L,U,P);
    }


    bool SVD(RTMatrixT<T> &U,RTMatrixT<T> &W,RTMatrixT<T> &V){
        return RTMSVD(*this,U, W, V);
    }


    void Print(StreamInterface &s,int maxrow=10){
        RTMPrint(*this,s,maxrow);
    }

};
# 32 "Matrix.h" 2





template <class T>
class MatrixT;



template <class T1,class T2>
inline bool RTMCopy(MatrixT<T1> &dest, const MatrixT<T2> &src){
    if (dest.m != src.m) return (1==0);
    if (dest.n != src.n) return (1==0);

    uint32 sz = src.DataSize();
    RTM__vecCopy(dest.data,src.data,sz);

    return (1==1);
}


template <class T1,class T2>
inline bool RTMLoad(MatrixT<T1> &dest,const T2 *src, const uint32 nRows,const uint32 nColumns){
    if (dest.m != nColumns) return (1==0);
    if (dest.n != nRows) return (1==0);

    uint32 sz = dest.DataSize();
    RTM__vecCopy(dest.data,src,sz);

    return (1==1);
}


template <class T1,class T2>
inline bool RTMSave(MatrixT<T1> &src,T2 *dest, const uint32 nRows,const uint32 nColumns){
    if (src.m != nColumns) return (1==0);
    if (src.n != nRows) return (1==0);

    uint32 sz = src.DataSize();
    RTM__vecCopy(dest,src.data,sz);
    return (1==1);
}






template <class T>
class MatrixRow{

    T *row;

    int m;
public:

    inline MatrixRow(T *row,int m){
        this->row = row;
        this->m = m;
    }

    inline T &operator[](int col)const{
# 103 "Matrix.h"
        return row[col];
    }
};



template <class T>
class MatrixT: public RTMatrixT<T> {
public:


    void ReSize(uint32 nRows,uint32 nColumns){
        MAReAllocate(*this,nRows,nColumns);
    }


    inline MatrixT(){
        this->Initialize();
    }


    inline MatrixT(uint32 nRows,uint32 nColumns){
        this->Allocate(nRows,nColumns);
    }


    inline MatrixT(uint32 nRows,uint32 nColumns,const T *source){
        this->Allocate(nRows,nColumns);
        uint32 sz = this->DataSize();
        RTM__vecCopy(this->data,source,sz);
    }


    inline MatrixT(const RTMatrixT<T> &A){
        *this = A;
    }


    inline MatrixT(const MatrixT &A){
        *this = A;
    }


    inline ~MatrixT(){
        this->DeAllocate();
    }


    inline MatrixT &operator=(const RTMatrixT<T> &A){
        MAReAllocate(*this,A.NRows(),A.NColumns());
        uint32 sz = A.DataSize();
        RTM__vecCopy(this->data,A.data,sz);
        return *this;
    }


    inline MatrixT &operator=(const MatrixT<T> &A){
        MAReAllocate(*this,A.NRows(),A.NColumns());
        uint32 sz = A.DataSize();
        RTM__vecCopy(this->data,A.data,sz);
        return *this;
    }


    inline const MatrixRow<T> operator[](int rowNo){






        return MatrixRow<T>(this->row[rowNo],this->m);
    }


    inline bool operator*=(const RTMatrixT<T> &A){
        MatrixT temp = *this;
        MAReAllocate(*this,temp.NRows(),A.NColumns());
        RTMProduct_U(*this,temp,A);
        return (1==1);
    }


    inline void operator*=(T x){
        Scale(x);
    }


    inline bool const operator+=(const RTMatrixT<T> &A){
        MAReAllocate(*this,A.NRows(),A.NColumns());
        RTMSum_U(*this,*this,A);
        return (1==1);
    }


    inline bool operator-=(const RTMatrixT<T> &A){
        MAReAllocate(*this,A.NRows(),A.NColumns());
        RTMDiff_U(*this,*this,A);
        return (1==1);
    }

};




template<class T>
inline const MatrixT<T> operator*(const RTMatrixT<T> &A,const RTMatrixT<T> &B){
    MatrixT<T> res;
    if (A.NColumns() != B.NRows()) return res;
    MAReAllocate(res,A.NRows(),B.NColumns());
    RTMProduct_U(res,A,B);
    return res;
}


template<class T>
inline const MatrixT<T> operator*(const RTMatrixT<T> &A,T x){
    MatrixT<T> res = A;
    res.Scale(x);
    return res;
}


template<class T>
inline const MatrixT<T> operator*(T x,const RTMatrixT<T> &A){
    MatrixT<T> res = A;
    res.Scale(x);
    return res;
}


template<class T>
inline const MatrixT<T> operator+(const RTMatrixT<T> &A,const RTMatrixT<T> &B){
    MatrixT<T> res(A.NRows(),A.NColumns());
    RTMSum_U(res,A,B);
    return res;
}


template<class T>
inline const MatrixT<T> operator-(const RTMatrixT<T> &A,const RTMatrixT<T> &B){
    MatrixT<T> res(A.NRows(),A.NColumns());
    RTMDiff_U(res,A,B);
    return res;
}


template<class T>
const MatrixT<T> operator/(T a,const RTMatrixT<T> &A){
    MatrixT<T> res;
    if (A.NRows() != A.NColumns()) return res;
    MAReAllocate(res,A.NRows(),A.NColumns());
    MatrixT<T> temp=A;
    if (RTMInvert_U(res,temp)==(1==0)){
        res.DeAllocate();
        return res;
    }
    res.Scale(a);
    return res;
}


template<class T>
inline const MatrixT<T> operator/(const RTMatrixT<T> &A,const RTMatrixT<T> &B){
    MatrixT<T> res;
    if (B.NRows() != B.NColumns()) return res;
    if (A.NColumns() != B.NRows()) return res;
    MatrixT<T> temp=B;
    MatrixT<T> temp2(B.NRows(),B.NColumns());
    if ( RTMInvert_U(temp2,temp) == (1==0)){
        res.DeAllocate();
        return res;
    }
    MAReAllocate(res,A.NRows(),A.NColumns());
    RTMProduct_U(res,A,temp2);
    return res;
}


template<class T>
inline const MatrixT<T> operator~(const RTMatrixT<T> &A){
    MatrixT<T> res;
    MAReAllocate(res,A.NColumns(),A.NRows());
    RTMTranspose_U(res,A);
    return res;
}
# 308 "Matrix.h"
inline bool ReadRTMatrixF(ConfigurationDataBase &cdb_,MatrixT<float > &matrix,const char *configName){
    CDBExtended &cdb = (CDBExtended &)cdb_;

    int size[4];
    int maxDim = 4;
    if (!cdb->GetArrayDims(size,maxDim,configName,CDBAIM_Strict)) return (1==0);
    if (maxDim > 2){

        return (1==0);
    }
    if (size[0] == 0) size[0] = 1;
    if (size[1] == 0) size[1] = 1;
    matrix.ReSize(size[0],size[1]);
    return cdb.ReadFloatArray(matrix.data,size,maxDim,configName);
}
# 35 "MatlabConverter.h" 2




class MatlabConverter;
extern "C"{
    bool MCSaveF(MatlabConverter &mc, float value, const char* variableName);
    bool MCSaveD(MatlabConverter &mc, double value, const char* variableName);
    bool MCSaveMF(MatlabConverter &mc, MatrixT<float > &mat, const char* variableName);
    bool MCSaveMD(MatlabConverter &mc, MatrixT<double> &mat, const char* variableName);
    bool MCSaveMI(MatlabConverter &mc, MatrixT<int > &mat, const char* variableName);
    bool MCSaveS(MatlabConverter &mc, const char** listOfStrings, int nStrings, const char* variableName);
}

class MatlabConverter{
    friend bool MCSaveF(MatlabConverter &mc, float value, const char* variableName);
    friend bool MCSaveD(MatlabConverter &mc, double value, const char* variableName);
    friend bool MCSaveMF(MatlabConverter &mc, MatrixT<float > &mat, const char* variableName);
    friend bool MCSaveMD(MatlabConverter &mc, MatrixT<double> &mat, const char* variableName);
    friend bool MCSaveMI(MatlabConverter &mc, MatrixT<int > &mat, const char* variableName);
    friend bool MCSaveS(MatlabConverter &mc, const char** listOfStrings, int nStrings, const char* variableName);

private:


    Streamable *output;


    char headerTextField[116];



private:


    void WriteHeader();


    void WriteDataBlockType(int dataType, int dataDimension, int options);


    void WriteDimensions(int *dime, int nDimensions);


    void WriteVariableName(const char* varName);


    void WriteChar(char data);


    void WriteShort(short data);


    void WriteSingle(int data);


    void WriteDouble(double data);


    void WriteString(const char *str, uint32 dim, bool padding = (1==0));


    void AddPadding(int padding);


    int CalculateVariableNameSize(const char* nameVar, int bytesSize = 8);



public:


    MatlabConverter(Streamable* out) {
        memset(headerTextField,512,sizeof(char)*116);
        output = out;
        WriteHeader();
    }


    int CalculateDimension(MatrixT<float > &mat, const char* variableName);


    int CalculateDimension(MatrixT<double> &mat, const char* variableName);


    int CalculateDimension(MatrixT<int > &mat, const char* variableName);


    int CalculateDimension(const char** listOfStrings, int nStrings, const char* variableName);


    int CalculateDimensionFloat(const char* variableName);


    int CalculateDimensionDouble(const char* variableName);


    bool Save(float value, const char* variableName){
        return MCSaveF(*this, value, variableName);
    }


    bool Save(double value, const char* variableName){
        return MCSaveD(*this, value, variableName);
    }


    bool Save(MatrixT<float > &mat, const char* variableName){
        return MCSaveMF(*this, mat, variableName);
    }


    bool Save(MatrixT<double> &mat, const char* variableName){
        return MCSaveMD(*this, mat, variableName);
    }


    bool Save(MatrixT<int > &mat, const char* variableName){
        return MCSaveMI(*this, mat, variableName);
    }


    bool Save(const char** listOfStrings, int nStrings, const char* variableName){
        return MCSaveS(*this, listOfStrings, nStrings, variableName);
    }


    bool InitStructure(const char* nameStruct, const char** listField, int nFields, int totalDimension);


    bool InitCell(const char* nameCell, int nFields, int totalDimension);

};
# 29 "SignalArchiver.cpp" 2
# 1 "../Level2/GCNString.h" 1
# 37 "../Level2/GCNString.h"
extern "C" { ObjectRegistryItem *Get_private_GCNStringInfo(); }


class GCNString: public FString,public GCNamedObject {

public: virtual ObjectRegistryItem *Info() const{ return Get_private_GCNStringInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_GCNStringInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_GCNStringInfo()); } friend Object * GCNStringBuildFn__ ();

public:


    GCNString(){
    }


    virtual ~GCNString(){
    }

};
# 30 "SignalArchiver.cpp" 2


# 1 "../Level5/Signal.h" 1
# 36 "../Level5/Signal.h"
# 1 "../Level5/SignalInterface.h" 1
# 37 "../Level5/Signal.h" 2

extern "C" { ObjectRegistryItem *Get_private_SignalInfo(); }


class Signal: public SignalInterface, public GCNamedObject{

    public: virtual ObjectRegistryItem *Info() const{ return Get_private_SignalInfo(); } static void operator delete(void *p){ OBJDeleteFun(p,Get_private_SignalInfo()); } static void *operator new (size_t len){ return OBJNewFun(len,Get_private_SignalInfo()); } friend Object * SignalBuildFn__ ();;

private:


    BasicTypeDescriptor type;


    int32 numberOfSamples;



    int32 bufferByteSize;


    void * buffer;

private:




    bool Allocate(
            BasicTypeDescriptor type,
            uint32 numberOfSamples,
     MemoryAllocationFlags allocFlags = MEMORYStandardMemory);


    bool Refer(
            BasicTypeDescriptor type,
            uint32 numberOfSamples,
            void * buffer);

public:


                            Signal();


    virtual ~Signal();


    bool CopyData(
           BasicTypeDescriptor type = BTDInt32,
  uint32 numberOfSamples = 0,
                const void * buffer = __null,
  MemoryAllocationFlags allocFlags = MEMORYStandardMemory
     );


    bool ReferData(
                BasicTypeDescriptor type = BTDInt32,
                uint32 numberOfSamples = 0,
                void * buffer = __null
            );


                            Signal(
                const Signal & signal);


    virtual bool ObjectLoadSetup(
                ConfigurationDataBase & info,
                StreamInterface * err);


    virtual bool ObjectSaveSetup(
                ConfigurationDataBase & info,
                StreamInterface * err);


    virtual uint32 NumberOfSamples() const
    {
        return numberOfSamples;
    }


    virtual BasicTypeDescriptor Type() const
    {
        return type;
    }


    virtual const void * Buffer() const
    {
        return buffer;
    }

};
# 33 "SignalArchiver.cpp" 2
# 1 "Matrix.h" 1
# 31 "Matrix.h"
# 1 "RTMatrix.h" 1
# 32 "Matrix.h" 2
# 34 "SignalArchiver.cpp" 2

Object * SignalArchiverBuildFn__ (){ SignalArchiver *p = new SignalArchiver () ; Object *o = p; return o; } static ObjectTools SignalArchiverObjectTools(& SignalArchiverBuildFn__); static ObjectRegistryItem _private_SignalArchiverInfo( "SignalArchiver" ,"$Id: SignalArchiver.cpp 62 2012-04-30 14:51:55Z aneto $", ((size_t)((Object *)((SignalArchiver *)0x1000))-0x1000),"",0,& SignalArchiverObjectTools); ObjectRegistryItem *Get_private_SignalArchiverInfo(){ return &_private_SignalArchiverInfo; }

void SignalArchivingFn(void *args){
    SignalArchiver *sa = (SignalArchiver *)args;
    while(sa->running){
        sa->archiveSem.ResetWait();
        if(sa->running){
            sa->StoreSignals();
        }
    }
    sa->running = (1==1);
}


bool SignalArchiver::SaveInMatlab(GCRTemplate<SignalInterface> s, FString &originalSignalName, FString &matlabVarName, File &file){

    int numberOfSamples = s->NumberOfSamples();
    MatlabConverter mc(&file);
    if(s->Type() == BTDInt32 || s->Type() == BTDUint32){
        MatrixT<int > m;
        m.Allocate(1, numberOfSamples);
        int* data = m.Data();
        memcpy((void*)data, (void*)s->Buffer(), numberOfSamples*sizeof(int));
        return mc.Save(m,matlabVarName.Buffer());
    }else if(s->Type() == BTDFloat){
        MatrixT<float > m;
        m.Allocate(1, numberOfSamples);
        float* data = m.Data();
        memcpy((void*)data, (void*)s->Buffer(), numberOfSamples*sizeof(float));
        return mc.Save(m, matlabVarName.Buffer());
    }else{
        AssertErrorCondition(FatalError,"%s:SaveInMatlab: unhandled signal type for signal:%s",Name(), originalSignalName.Buffer());
    }
    return (1==0);
}

void SignalArchiver::GetDateTimeString(FString &timeStr){


    char stime[64];
    uint32 errorTime = time(__null);

    sprintf(stime,"%s",ctime((const time_t*)&errorTime));



    stime[strlen(stime)-1]=0;
    char *c = stime;
    while (*c != 0){
        if (*c == ':') *c = '.';
        if (*c == ' ') *c = '_';
        c++;
    }
    timeStr = stime;
}

bool SignalArchiver::StoreSignals(){

    FString currentTime;
    GetDateTimeString(currentTime);

    FString directoryName;
    if(relativeDirectoryPath.Size() == 0){
        directoryName.Printf("%s%c%s", archiveDirectoryPath.Buffer(), '/', currentTime.Buffer());
    }
    else{
        directoryName.Printf("%s%c%s", archiveDirectoryPath.Buffer(), '/', relativeDirectoryPath.Buffer());
    }
    if(!Directory::DirectoryExists(directoryName.Buffer())){
        if(!Directory::Create(directoryName.Buffer())){
            AssertErrorCondition(FatalError, "%s::StoreSignals: Could not create directory %s", Name(), directoryName.Buffer());
            return (1==0);
        }
    }


    CDBExtended cdbx(signalDataBase);

    if (cdbx->Move("Signals")){
        int32 i = 0;
        for(i = 0; i<cdbx->NumberOfChildren();i++){
            if(cdbx->MoveToChildren(i)){

                FString originalSignalName;
                if(cdbx->NodeName(originalSignalName)){

                    GCRTemplate<SignalInterface> signal = GetSignal(originalSignalName.Buffer());
                    if(!signal.IsValid()){
                        AssertErrorCondition(FatalError, "%s:StoreSignals: invalid signal name %s", Name(), originalSignalName.Buffer());
                        return (1==0);
                    }


                    FString signalName;
                    RemoveIllegalCharacters(signalName, originalSignalName, "/<:");
                    FString filename;


                    filename.Printf("%s%c%s", directoryName.Buffer(), '/', signalName.Buffer());

                    File outputFile;

                    if(writeExtension){
                        if(storageMode == MATLAB){
                            filename.Printf(".mat");
                        }
                        else if(storageMode == TEXT){
                            filename.Printf(".txt");
                        }
                        else{
                            filename.Printf(".bin");
                        }
                    }
                    if(!outputFile.OpenWrite(filename.Buffer())){
                        AssertErrorCondition(FatalError, "%s::StoreSignals: Could not open file %s", Name(), filename.Buffer());
                        return (1==0);
                    }


                    if(storageMode == MATLAB){
                        if(!SaveInMatlab(signal, originalSignalName, signalName, outputFile)){
                            AssertErrorCondition(FatalError, "%s::StoreSignals: Could not store signal %s in matlab format in file %s", Name(), originalSignalName.Buffer(), filename.Buffer());
                            return (1==0);
                        }
                    }
                    else if(storageMode == TEXT){

                        GCRTemplate<GCNamedObject> signalGCO = signal;

                        ConfigurationDataBase content("CDBOS");

                        content->WriteToStream(outputFile);
                        if(!signalGCO->ObjectSaveSetup(content, __null)){
                            AssertErrorCondition(FatalError, "%s::StoreSignals: Could not store signal %s in text format in file %s", Name(), originalSignalName.Buffer(), filename.Buffer());
                            return (1==0);
                        }
                    }
                    else{
                        uint32 size = signal->NumberOfSamples() * signal->Type().ByteSize();
                        if(!outputFile.Write(signal->Buffer(), size)){
                            AssertErrorCondition(FatalError, "%s::StoreSignals: Could not store signal %s in binary format in file %s", Name(), originalSignalName.Buffer(), filename.Buffer());
                            return (1==0);
                        }
                    }
                    outputFile.Close();
                }
                cdbx->MoveToFather();
            }
        }
        cdbx->MoveToFather();
    }

    return (1==1);
}
